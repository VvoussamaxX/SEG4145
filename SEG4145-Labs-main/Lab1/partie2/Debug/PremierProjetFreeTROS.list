
PremierProjetFreeTROS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005898  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08005a68  08005a68  00015a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ba4  08005ba4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08005ba4  08005ba4  00015ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bac  08005bac  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bac  08005bac  00015bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bb0  08005bb0  00015bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08005bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf0  20000090  08005c44  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c80  08005c44  00024c80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018aef  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034ed  00000000  00000000  00038bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a0  00000000  00000000  0003c0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000100c  00000000  00000000  0003d580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000333b  00000000  00000000  0003e58c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016f78  00000000  00000000  000418c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dae99  00000000  00000000  0005883f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059cc  00000000  00000000  001336d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  001390a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005a50 	.word	0x08005a50

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	08005a50 	.word	0x08005a50

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fbf4 	bl	8000cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f85e 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f8f8 	bl	800070c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800051c:	f000 f8cc 	bl	80006b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000520:	f002 fc32 	bl	8002d88 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000524:	4a19      	ldr	r2, [pc, #100]	; (800058c <main+0x80>)
 8000526:	2100      	movs	r1, #0
 8000528:	4819      	ldr	r0, [pc, #100]	; (8000590 <main+0x84>)
 800052a:	f002 fc77 	bl	8002e1c <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a18      	ldr	r2, [pc, #96]	; (8000594 <main+0x88>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000534:	4a18      	ldr	r2, [pc, #96]	; (8000598 <main+0x8c>)
 8000536:	2100      	movs	r1, #0
 8000538:	4818      	ldr	r0, [pc, #96]	; (800059c <main+0x90>)
 800053a:	f002 fc6f 	bl	8002e1c <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a17      	ldr	r2, [pc, #92]	; (80005a0 <main+0x94>)
 8000542:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(StartTask3, NULL, &Task3_attributes);
 8000544:	4a17      	ldr	r2, [pc, #92]	; (80005a4 <main+0x98>)
 8000546:	2100      	movs	r1, #0
 8000548:	4817      	ldr	r0, [pc, #92]	; (80005a8 <main+0x9c>)
 800054a:	f002 fc67 	bl	8002e1c <osThreadNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a16      	ldr	r2, [pc, #88]	; (80005ac <main+0xa0>)
 8000552:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  /* creation of Task4 */
  Task4Handle = osThreadNew(StartTask4, NULL, &Task4_attributes);
 8000554:	4a16      	ldr	r2, [pc, #88]	; (80005b0 <main+0xa4>)
 8000556:	2100      	movs	r1, #0
 8000558:	4816      	ldr	r0, [pc, #88]	; (80005b4 <main+0xa8>)
 800055a:	f002 fc5f 	bl	8002e1c <osThreadNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a15      	ldr	r2, [pc, #84]	; (80005b8 <main+0xac>)
 8000562:	6013      	str	r3, [r2, #0]

  /* creation of Task5 */
  Task5Handle = osThreadNew(StartTask5, NULL, &Task5_attributes);
 8000564:	4a15      	ldr	r2, [pc, #84]	; (80005bc <main+0xb0>)
 8000566:	2100      	movs	r1, #0
 8000568:	4815      	ldr	r0, [pc, #84]	; (80005c0 <main+0xb4>)
 800056a:	f002 fc57 	bl	8002e1c <osThreadNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <main+0xb8>)
 8000572:	6013      	str	r3, [r2, #0]


  ButtonTaskHandle = osThreadNew(StartButtonTask, NULL, &ButtonTask_attributes);
 8000574:	4a14      	ldr	r2, [pc, #80]	; (80005c8 <main+0xbc>)
 8000576:	2100      	movs	r1, #0
 8000578:	4814      	ldr	r0, [pc, #80]	; (80005cc <main+0xc0>)
 800057a:	f002 fc4f 	bl	8002e1c <osThreadNew>
 800057e:	4603      	mov	r3, r0
 8000580:	4a13      	ldr	r2, [pc, #76]	; (80005d0 <main+0xc4>)
 8000582:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000584:	f002 fc24 	bl	8002dd0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000588:	e7fe      	b.n	8000588 <main+0x7c>
 800058a:	bf00      	nop
 800058c:	08005ab4 	.word	0x08005ab4
 8000590:	08000911 	.word	0x08000911
 8000594:	200000f4 	.word	0x200000f4
 8000598:	08005ad8 	.word	0x08005ad8
 800059c:	0800096d 	.word	0x0800096d
 80005a0:	200000f8 	.word	0x200000f8
 80005a4:	08005afc 	.word	0x08005afc
 80005a8:	080009e5 	.word	0x080009e5
 80005ac:	200000fc 	.word	0x200000fc
 80005b0:	08005b20 	.word	0x08005b20
 80005b4:	08000871 	.word	0x08000871
 80005b8:	20000100 	.word	0x20000100
 80005bc:	08005b44 	.word	0x08005b44
 80005c0:	080008c9 	.word	0x080008c9
 80005c4:	20000104 	.word	0x20000104
 80005c8:	08005b68 	.word	0x08005b68
 80005cc:	0800083d 	.word	0x0800083d
 80005d0:	20000108 	.word	0x20000108

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	; 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	2234      	movs	r2, #52	; 0x34
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f005 f94a 	bl	800587c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <SystemClock_Config+0xdc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a2b      	ldr	r2, [pc, #172]	; (80006b0 <SystemClock_Config+0xdc>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <SystemClock_Config+0xdc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000614:	2300      	movs	r3, #0
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <SystemClock_Config+0xe0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a25      	ldr	r2, [pc, #148]	; (80006b4 <SystemClock_Config+0xe0>)
 800061e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <SystemClock_Config+0xe0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000638:	2310      	movs	r3, #16
 800063a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063c:	2302      	movs	r3, #2
 800063e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000644:	2308      	movs	r3, #8
 8000646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000648:	23b4      	movs	r3, #180	; 0xb4
 800064a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000650:	2302      	movs	r3, #2
 8000652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000654:	2302      	movs	r3, #2
 8000656:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 031c 	add.w	r3, r7, #28
 800065c:	4618      	mov	r0, r3
 800065e:	f001 fa03 	bl	8001a68 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000668:	f000 f9f6 	bl	8000a58 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800066c:	f000 fe30 	bl	80012d0 <HAL_PWREx_EnableOverDrive>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000676:	f000 f9ef 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067e:	2302      	movs	r3, #2
 8000680:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000686:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000690:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000692:	f107 0308 	add.w	r3, r7, #8
 8000696:	2105      	movs	r1, #5
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fe69 	bl	8001370 <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006a4:	f000 f9d8 	bl	8000a58 <Error_Handler>
  }
}
 80006a8:	bf00      	nop
 80006aa:	3750      	adds	r7, #80	; 0x50
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006be:	4a12      	ldr	r2, [pc, #72]	; (8000708 <MX_USART2_UART_Init+0x50>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006f0:	f001 fefa 	bl	80024e8 <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006fa:	f000 f9ad 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200000ac 	.word	0x200000ac
 8000708:	40004400 	.word	0x40004400

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	4b2e      	ldr	r3, [pc, #184]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a2d      	ldr	r2, [pc, #180]	; (80007e0 <MX_GPIO_Init+0xd4>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b2b      	ldr	r3, [pc, #172]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a26      	ldr	r2, [pc, #152]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a1f      	ldr	r2, [pc, #124]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <MX_GPIO_Init+0xd4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_GPIO_Init+0xd4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8000798:	4812      	ldr	r0, [pc, #72]	; (80007e4 <MX_GPIO_Init+0xd8>)
 800079a:	f000 fd7f 	bl	800129c <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin : PUSH_BUTTON_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 800079e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	480d      	ldr	r0, [pc, #52]	; (80007e8 <MX_GPIO_Init+0xdc>)
 80007b4:	f000 fbc6 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80007b8:	f44f 73bc 	mov.w	r3, #376	; 0x178
 80007bc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4619      	mov	r1, r3
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_GPIO_Init+0xd8>)
 80007d2:	f000 fbb7 	bl	8000f44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d6:	bf00      	nop
 80007d8:	3728      	adds	r7, #40	; 0x28
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020400 	.word	0x40020400
 80007e8:	40020800 	.word	0x40020800

080007ec <hasTimePassed>:

/* USER CODE BEGIN 4 */
uint8_t hasTimePassed(uint32_t delay) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	 uint32_t currentTime = xTaskGetTickCount();
 80007f4:	f003 fc9c 	bl	8004130 <xTaskGetTickCount>
 80007f8:	60f8      	str	r0, [r7, #12]
	 if (currentTime > lastButtonPress) {
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <hasTimePassed+0x4c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	429a      	cmp	r2, r3
 8000802:	d90a      	bls.n	800081a <hasTimePassed+0x2e>
		 return currentTime - lastButtonPress > delay;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <hasTimePassed+0x4c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	68fa      	ldr	r2, [r7, #12]
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	429a      	cmp	r2, r3
 8000810:	bf34      	ite	cc
 8000812:	2301      	movcc	r3, #1
 8000814:	2300      	movcs	r3, #0
 8000816:	b2db      	uxtb	r3, r3
 8000818:	e009      	b.n	800082e <hasTimePassed+0x42>
	 } else {
		 return lastButtonPress - currentTime > delay;
 800081a:	4b07      	ldr	r3, [pc, #28]	; (8000838 <hasTimePassed+0x4c>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	429a      	cmp	r2, r3
 8000826:	bf34      	ite	cc
 8000828:	2301      	movcc	r3, #1
 800082a:	2300      	movcs	r3, #0
 800082c:	b2db      	uxtb	r3, r3
	 }
}
 800082e:	4618      	mov	r0, r3
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000000 	.word	0x20000000

0800083c <StartButtonTask>:

void StartButtonTask(void *argument)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  if (HAL_GPIO_ReadPin(PUSH_BUTTON_GPIO_Port, PUSH_BUTTON_Pin) == GPIO_PIN_RESET) {
 8000844:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000848:	4807      	ldr	r0, [pc, #28]	; (8000868 <StartButtonTask+0x2c>)
 800084a:	f000 fd0f 	bl	800126c <HAL_GPIO_ReadPin>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d104      	bne.n	800085e <StartButtonTask+0x22>
		  lastButtonPress = xTaskGetTickCount();
 8000854:	f003 fc6c 	bl	8004130 <xTaskGetTickCount>
 8000858:	4603      	mov	r3, r0
 800085a:	4a04      	ldr	r2, [pc, #16]	; (800086c <StartButtonTask+0x30>)
 800085c:	6013      	str	r3, [r2, #0]
	  }
	  osDelay(100);
 800085e:	2064      	movs	r0, #100	; 0x64
 8000860:	f002 fb6e 	bl	8002f40 <osDelay>
	  if (HAL_GPIO_ReadPin(PUSH_BUTTON_GPIO_Port, PUSH_BUTTON_Pin) == GPIO_PIN_RESET) {
 8000864:	e7ee      	b.n	8000844 <StartButtonTask+0x8>
 8000866:	bf00      	nop
 8000868:	40020800 	.word	0x40020800
 800086c:	20000000 	.word	0x20000000

08000870 <StartTask4>:
  }
}

void StartTask4(void *argument)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//	  HAL_UART_Transmit(&huart2, dataTask4, sizeof(dataTask4), 1000);
	  if ((hasTimePassed(0) && !hasTimePassed(4000)) || hasTimePassed(14000)) {
 8000878:	2000      	movs	r0, #0
 800087a:	f7ff ffb7 	bl	80007ec <hasTimePassed>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d006      	beq.n	8000892 <StartTask4+0x22>
 8000884:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000888:	f7ff ffb0 	bl	80007ec <hasTimePassed>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d006      	beq.n	80008a0 <StartTask4+0x30>
 8000892:	f243 60b0 	movw	r0, #14000	; 0x36b0
 8000896:	f7ff ffa9 	bl	80007ec <hasTimePassed>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d006      	beq.n	80008ae <StartTask4+0x3e>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a6:	4807      	ldr	r0, [pc, #28]	; (80008c4 <StartTask4+0x54>)
 80008a8:	f000 fcf8 	bl	800129c <HAL_GPIO_WritePin>
 80008ac:	e005      	b.n	80008ba <StartTask4+0x4a>
	  } else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b4:	4803      	ldr	r0, [pc, #12]	; (80008c4 <StartTask4+0x54>)
 80008b6:	f000 fcf1 	bl	800129c <HAL_GPIO_WritePin>
	  }
	  osDelay(100);
 80008ba:	2064      	movs	r0, #100	; 0x64
 80008bc:	f002 fb40 	bl	8002f40 <osDelay>
	  if ((hasTimePassed(0) && !hasTimePassed(4000)) || hasTimePassed(14000)) {
 80008c0:	e7da      	b.n	8000878 <StartTask4+0x8>
 80008c2:	bf00      	nop
 80008c4:	40020400 	.word	0x40020400

080008c8 <StartTask5>:

  }
}

void StartTask5(void *argument)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//	  HAL_UART_Transmit(&huart2, dataTask5, sizeof(dataTask5), 1000);
	  if (hasTimePassed(4000) && !hasTimePassed(14000)) {
 80008d0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80008d4:	f7ff ff8a 	bl	80007ec <hasTimePassed>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d00c      	beq.n	80008f8 <StartTask5+0x30>
 80008de:	f243 60b0 	movw	r0, #14000	; 0x36b0
 80008e2:	f7ff ff83 	bl	80007ec <hasTimePassed>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d105      	bne.n	80008f8 <StartTask5+0x30>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	2140      	movs	r1, #64	; 0x40
 80008f0:	4806      	ldr	r0, [pc, #24]	; (800090c <StartTask5+0x44>)
 80008f2:	f000 fcd3 	bl	800129c <HAL_GPIO_WritePin>
 80008f6:	e004      	b.n	8000902 <StartTask5+0x3a>
	  } else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2140      	movs	r1, #64	; 0x40
 80008fc:	4803      	ldr	r0, [pc, #12]	; (800090c <StartTask5+0x44>)
 80008fe:	f000 fccd 	bl	800129c <HAL_GPIO_WritePin>
	  }
	  osDelay(100);
 8000902:	2064      	movs	r0, #100	; 0x64
 8000904:	f002 fb1c 	bl	8002f40 <osDelay>
	  if (hasTimePassed(4000) && !hasTimePassed(14000)) {
 8000908:	e7e2      	b.n	80008d0 <StartTask5+0x8>
 800090a:	bf00      	nop
 800090c:	40020400 	.word	0x40020400

08000910 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart2, dataTask1, sizeof(dataTask1), 1000);
 8000918:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091c:	220c      	movs	r2, #12
 800091e:	4910      	ldr	r1, [pc, #64]	; (8000960 <StartTask1+0x50>)
 8000920:	4810      	ldr	r0, [pc, #64]	; (8000964 <StartTask1+0x54>)
 8000922:	f001 fe31 	bl	8002588 <HAL_UART_Transmit>
	  if (hasTimePassed(3000) && !hasTimePassed(17000)) {
 8000926:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800092a:	f7ff ff5f 	bl	80007ec <hasTimePassed>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d00c      	beq.n	800094e <StartTask1+0x3e>
 8000934:	f244 2068 	movw	r0, #17000	; 0x4268
 8000938:	f7ff ff58 	bl	80007ec <hasTimePassed>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d105      	bne.n	800094e <StartTask1+0x3e>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000942:	2201      	movs	r2, #1
 8000944:	2120      	movs	r1, #32
 8000946:	4808      	ldr	r0, [pc, #32]	; (8000968 <StartTask1+0x58>)
 8000948:	f000 fca8 	bl	800129c <HAL_GPIO_WritePin>
 800094c:	e004      	b.n	8000958 <StartTask1+0x48>
	  } else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2120      	movs	r1, #32
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <StartTask1+0x58>)
 8000954:	f000 fca2 	bl	800129c <HAL_GPIO_WritePin>
	  }
	  osDelay(100);
 8000958:	2064      	movs	r0, #100	; 0x64
 800095a:	f002 faf1 	bl	8002f40 <osDelay>
	  HAL_UART_Transmit(&huart2, dataTask1, sizeof(dataTask1), 1000);
 800095e:	e7db      	b.n	8000918 <StartTask1+0x8>
 8000960:	20000004 	.word	0x20000004
 8000964:	200000ac 	.word	0x200000ac
 8000968:	40020400 	.word	0x40020400

0800096c <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart2, dataTask2, sizeof(dataTask2), 1000);
 8000974:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000978:	220f      	movs	r2, #15
 800097a:	4917      	ldr	r1, [pc, #92]	; (80009d8 <StartTask2+0x6c>)
 800097c:	4817      	ldr	r0, [pc, #92]	; (80009dc <StartTask2+0x70>)
 800097e:	f001 fe03 	bl	8002588 <HAL_UART_Transmit>
	  if ((hasTimePassed(0) && !hasTimePassed(3000)) || (hasTimePassed(15000) && !hasTimePassed(17000))) {
 8000982:	2000      	movs	r0, #0
 8000984:	f7ff ff32 	bl	80007ec <hasTimePassed>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d006      	beq.n	800099c <StartTask2+0x30>
 800098e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000992:	f7ff ff2b 	bl	80007ec <hasTimePassed>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d00d      	beq.n	80009b8 <StartTask2+0x4c>
 800099c:	f643 2098 	movw	r0, #15000	; 0x3a98
 80009a0:	f7ff ff24 	bl	80007ec <hasTimePassed>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d00c      	beq.n	80009c4 <StartTask2+0x58>
 80009aa:	f244 2068 	movw	r0, #17000	; 0x4268
 80009ae:	f7ff ff1d 	bl	80007ec <hasTimePassed>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d105      	bne.n	80009c4 <StartTask2+0x58>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80009b8:	2201      	movs	r2, #1
 80009ba:	2110      	movs	r1, #16
 80009bc:	4808      	ldr	r0, [pc, #32]	; (80009e0 <StartTask2+0x74>)
 80009be:	f000 fc6d 	bl	800129c <HAL_GPIO_WritePin>
 80009c2:	e004      	b.n	80009ce <StartTask2+0x62>
	  } else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2110      	movs	r1, #16
 80009c8:	4805      	ldr	r0, [pc, #20]	; (80009e0 <StartTask2+0x74>)
 80009ca:	f000 fc67 	bl	800129c <HAL_GPIO_WritePin>
	  }
	  osDelay(100);
 80009ce:	2064      	movs	r0, #100	; 0x64
 80009d0:	f002 fab6 	bl	8002f40 <osDelay>
	  HAL_UART_Transmit(&huart2, dataTask2, sizeof(dataTask2), 1000);
 80009d4:	e7ce      	b.n	8000974 <StartTask2+0x8>
 80009d6:	bf00      	nop
 80009d8:	20000010 	.word	0x20000010
 80009dc:	200000ac 	.word	0x200000ac
 80009e0:	40020400 	.word	0x40020400

080009e4 <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart2, dataTask3, sizeof(dataTask3), 1000);
 80009ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f0:	220f      	movs	r2, #15
 80009f2:	490d      	ldr	r1, [pc, #52]	; (8000a28 <StartTask3+0x44>)
 80009f4:	480d      	ldr	r0, [pc, #52]	; (8000a2c <StartTask3+0x48>)
 80009f6:	f001 fdc7 	bl	8002588 <HAL_UART_Transmit>
	 	 // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
	  if (hasTimePassed(17000)) {
 80009fa:	f244 2068 	movw	r0, #17000	; 0x4268
 80009fe:	f7ff fef5 	bl	80007ec <hasTimePassed>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d005      	beq.n	8000a14 <StartTask3+0x30>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2108      	movs	r1, #8
 8000a0c:	4808      	ldr	r0, [pc, #32]	; (8000a30 <StartTask3+0x4c>)
 8000a0e:	f000 fc45 	bl	800129c <HAL_GPIO_WritePin>
 8000a12:	e004      	b.n	8000a1e <StartTask3+0x3a>
	  } else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2108      	movs	r1, #8
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <StartTask3+0x4c>)
 8000a1a:	f000 fc3f 	bl	800129c <HAL_GPIO_WritePin>
	  }
	  osDelay(100);
 8000a1e:	2064      	movs	r0, #100	; 0x64
 8000a20:	f002 fa8e 	bl	8002f40 <osDelay>
	  HAL_UART_Transmit(&huart2, dataTask3, sizeof(dataTask3), 1000);
 8000a24:	e7e2      	b.n	80009ec <StartTask3+0x8>
 8000a26:	bf00      	nop
 8000a28:	20000020 	.word	0x20000020
 8000a2c:	200000ac 	.word	0x200000ac
 8000a30:	40020400 	.word	0x40020400

08000a34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d101      	bne.n	8000a4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a46:	f000 f97b 	bl	8000d40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40001000 	.word	0x40001000

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <Error_Handler+0x8>
	...

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_MspInit+0x54>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	4a11      	ldr	r2, [pc, #68]	; (8000ab8 <HAL_MspInit+0x54>)
 8000a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a78:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <HAL_MspInit+0x54>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <HAL_MspInit+0x54>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <HAL_MspInit+0x54>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a94:	6413      	str	r3, [r2, #64]	; 0x40
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_MspInit+0x54>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	210f      	movs	r1, #15
 8000aa6:	f06f 0001 	mvn.w	r0, #1
 8000aaa:	f000 fa21 	bl	8000ef0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800

08000abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a19      	ldr	r2, [pc, #100]	; (8000b40 <HAL_UART_MspInit+0x84>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d12b      	bne.n	8000b36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a10      	ldr	r2, [pc, #64]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b16:	230c      	movs	r3, #12
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b26:	2307      	movs	r3, #7
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <HAL_UART_MspInit+0x8c>)
 8000b32:	f000 fa07 	bl	8000f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	; 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40004400 	.word	0x40004400
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020000 	.word	0x40020000

08000b4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08e      	sub	sp, #56	; 0x38
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	4b33      	ldr	r3, [pc, #204]	; (8000c30 <HAL_InitTick+0xe4>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	4a32      	ldr	r2, [pc, #200]	; (8000c30 <HAL_InitTick+0xe4>)
 8000b66:	f043 0310 	orr.w	r3, r3, #16
 8000b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6c:	4b30      	ldr	r3, [pc, #192]	; (8000c30 <HAL_InitTick+0xe4>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	f003 0310 	and.w	r3, r3, #16
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b78:	f107 0210 	add.w	r2, r7, #16
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4611      	mov	r1, r2
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 fd0e 	bl	80015a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b88:	6a3b      	ldr	r3, [r7, #32]
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d103      	bne.n	8000b9a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b92:	f000 fcdf 	bl	8001554 <HAL_RCC_GetPCLK1Freq>
 8000b96:	6378      	str	r0, [r7, #52]	; 0x34
 8000b98:	e004      	b.n	8000ba4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b9a:	f000 fcdb 	bl	8001554 <HAL_RCC_GetPCLK1Freq>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ba6:	4a23      	ldr	r2, [pc, #140]	; (8000c34 <HAL_InitTick+0xe8>)
 8000ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bac:	0c9b      	lsrs	r3, r3, #18
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bb2:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <HAL_InitTick+0xec>)
 8000bb4:	4a21      	ldr	r2, [pc, #132]	; (8000c3c <HAL_InitTick+0xf0>)
 8000bb6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <HAL_InitTick+0xec>)
 8000bba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bbe:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bc0:	4a1d      	ldr	r2, [pc, #116]	; (8000c38 <HAL_InitTick+0xec>)
 8000bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <HAL_InitTick+0xec>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <HAL_InitTick+0xec>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <HAL_InitTick+0xec>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bd8:	4817      	ldr	r0, [pc, #92]	; (8000c38 <HAL_InitTick+0xec>)
 8000bda:	f001 f9e3 	bl	8001fa4 <HAL_TIM_Base_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000be4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d11b      	bne.n	8000c24 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bec:	4812      	ldr	r0, [pc, #72]	; (8000c38 <HAL_InitTick+0xec>)
 8000bee:	f001 fa33 	bl	8002058 <HAL_TIM_Base_Start_IT>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bf8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d111      	bne.n	8000c24 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c00:	2036      	movs	r0, #54	; 0x36
 8000c02:	f000 f991 	bl	8000f28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b0f      	cmp	r3, #15
 8000c0a:	d808      	bhi.n	8000c1e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	2036      	movs	r0, #54	; 0x36
 8000c12:	f000 f96d 	bl	8000ef0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <HAL_InitTick+0xf4>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6013      	str	r3, [r2, #0]
 8000c1c:	e002      	b.n	8000c24 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3738      	adds	r7, #56	; 0x38
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40023800 	.word	0x40023800
 8000c34:	431bde83 	.word	0x431bde83
 8000c38:	2000010c 	.word	0x2000010c
 8000c3c:	40001000 	.word	0x40001000
 8000c40:	20000034 	.word	0x20000034

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c48:	e7fe      	b.n	8000c48 <NMI_Handler+0x4>

08000c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <MemManage_Handler+0x4>

08000c56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <TIM6_DAC_IRQHandler+0x10>)
 8000c76:	f001 fa5f 	bl	8002138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	2000010c 	.word	0x2000010c

08000c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <SystemInit+0x20>)
 8000c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <SystemInit+0x20>)
 8000c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cac:	f7ff ffea 	bl	8000c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb0:	480c      	ldr	r0, [pc, #48]	; (8000ce4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cb2:	490d      	ldr	r1, [pc, #52]	; (8000ce8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb8:	e002      	b.n	8000cc0 <LoopCopyDataInit>

08000cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cbe:	3304      	adds	r3, #4

08000cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc4:	d3f9      	bcc.n	8000cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cc8:	4c0a      	ldr	r4, [pc, #40]	; (8000cf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ccc:	e001      	b.n	8000cd2 <LoopFillZerobss>

08000cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd0:	3204      	adds	r2, #4

08000cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd4:	d3fb      	bcc.n	8000cce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cd6:	f004 fe2f 	bl	8005938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cda:	f7ff fc17 	bl	800050c <main>
  bx  lr    
 8000cde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ce0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000cec:	08005bb4 	.word	0x08005bb4
  ldr r2, =_sbss
 8000cf0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000cf4:	20004c80 	.word	0x20004c80

08000cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf8:	e7fe      	b.n	8000cf8 <ADC_IRQHandler>
	...

08000cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <HAL_Init+0x40>)
 8000d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <HAL_Init+0x40>)
 8000d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <HAL_Init+0x40>)
 8000d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f8d8 	bl	8000eda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2a:	200f      	movs	r0, #15
 8000d2c:	f7ff ff0e 	bl	8000b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d30:	f7ff fe98 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023c00 	.word	0x40023c00

08000d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_IncTick+0x20>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_IncTick+0x24>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4413      	add	r3, r2
 8000d50:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <HAL_IncTick+0x24>)
 8000d52:	6013      	str	r3, [r2, #0]
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20000038 	.word	0x20000038
 8000d64:	20000154 	.word	0x20000154

08000d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <HAL_GetTick+0x14>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000154 	.word	0x20000154

08000d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db2:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	60d3      	str	r3, [r2, #12]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	f003 0307 	and.w	r3, r3, #7
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	db0b      	blt.n	8000e0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	f003 021f 	and.w	r2, r3, #31
 8000dfc:	4907      	ldr	r1, [pc, #28]	; (8000e1c <__NVIC_EnableIRQ+0x38>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	095b      	lsrs	r3, r3, #5
 8000e04:	2001      	movs	r0, #1
 8000e06:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000e100 	.word	0xe000e100

08000e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	db0a      	blt.n	8000e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	490c      	ldr	r1, [pc, #48]	; (8000e6c <__NVIC_SetPriority+0x4c>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	0112      	lsls	r2, r2, #4
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	440b      	add	r3, r1
 8000e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e48:	e00a      	b.n	8000e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4908      	ldr	r1, [pc, #32]	; (8000e70 <__NVIC_SetPriority+0x50>)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	f003 030f 	and.w	r3, r3, #15
 8000e56:	3b04      	subs	r3, #4
 8000e58:	0112      	lsls	r2, r2, #4
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	761a      	strb	r2, [r3, #24]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000e100 	.word	0xe000e100
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	; 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f1c3 0307 	rsb	r3, r3, #7
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	bf28      	it	cs
 8000e92:	2304      	movcs	r3, #4
 8000e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	2b06      	cmp	r3, #6
 8000e9c:	d902      	bls.n	8000ea4 <NVIC_EncodePriority+0x30>
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3b03      	subs	r3, #3
 8000ea2:	e000      	b.n	8000ea6 <NVIC_EncodePriority+0x32>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ebc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	43d9      	mvns	r1, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	4313      	orrs	r3, r2
         );
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3724      	adds	r7, #36	; 0x24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ff4c 	bl	8000d80 <__NVIC_SetPriorityGrouping>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
 8000efc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f02:	f7ff ff61 	bl	8000dc8 <__NVIC_GetPriorityGrouping>
 8000f06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	68b9      	ldr	r1, [r7, #8]
 8000f0c:	6978      	ldr	r0, [r7, #20]
 8000f0e:	f7ff ffb1 	bl	8000e74 <NVIC_EncodePriority>
 8000f12:	4602      	mov	r2, r0
 8000f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f18:	4611      	mov	r1, r2
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ff80 	bl	8000e20 <__NVIC_SetPriority>
}
 8000f20:	bf00      	nop
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ff54 	bl	8000de4 <__NVIC_EnableIRQ>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
 8000f5e:	e165      	b.n	800122c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f60:	2201      	movs	r2, #1
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	f040 8154 	bne.w	8001226 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d005      	beq.n	8000f96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d130      	bne.n	8000ff8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	68da      	ldr	r2, [r3, #12]
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fcc:	2201      	movs	r2, #1
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	091b      	lsrs	r3, r3, #4
 8000fe2:	f003 0201 	and.w	r2, r3, #1
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	2b03      	cmp	r3, #3
 8001002:	d017      	beq.n	8001034 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2203      	movs	r2, #3
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d123      	bne.n	8001088 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	08da      	lsrs	r2, r3, #3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3208      	adds	r2, #8
 8001048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	f003 0307 	and.w	r3, r3, #7
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	220f      	movs	r2, #15
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	691a      	ldr	r2, [r3, #16]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	08da      	lsrs	r2, r3, #3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3208      	adds	r2, #8
 8001082:	69b9      	ldr	r1, [r7, #24]
 8001084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	2203      	movs	r2, #3
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0203 	and.w	r2, r3, #3
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 80ae 	beq.w	8001226 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	4b5d      	ldr	r3, [pc, #372]	; (8001244 <HAL_GPIO_Init+0x300>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	4a5c      	ldr	r2, [pc, #368]	; (8001244 <HAL_GPIO_Init+0x300>)
 80010d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d8:	6453      	str	r3, [r2, #68]	; 0x44
 80010da:	4b5a      	ldr	r3, [pc, #360]	; (8001244 <HAL_GPIO_Init+0x300>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010e6:	4a58      	ldr	r2, [pc, #352]	; (8001248 <HAL_GPIO_Init+0x304>)
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	089b      	lsrs	r3, r3, #2
 80010ec:	3302      	adds	r3, #2
 80010ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	220f      	movs	r2, #15
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4f      	ldr	r2, [pc, #316]	; (800124c <HAL_GPIO_Init+0x308>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d025      	beq.n	800115e <HAL_GPIO_Init+0x21a>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4e      	ldr	r2, [pc, #312]	; (8001250 <HAL_GPIO_Init+0x30c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d01f      	beq.n	800115a <HAL_GPIO_Init+0x216>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4d      	ldr	r2, [pc, #308]	; (8001254 <HAL_GPIO_Init+0x310>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d019      	beq.n	8001156 <HAL_GPIO_Init+0x212>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4c      	ldr	r2, [pc, #304]	; (8001258 <HAL_GPIO_Init+0x314>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d013      	beq.n	8001152 <HAL_GPIO_Init+0x20e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4b      	ldr	r2, [pc, #300]	; (800125c <HAL_GPIO_Init+0x318>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d00d      	beq.n	800114e <HAL_GPIO_Init+0x20a>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4a      	ldr	r2, [pc, #296]	; (8001260 <HAL_GPIO_Init+0x31c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d007      	beq.n	800114a <HAL_GPIO_Init+0x206>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a49      	ldr	r2, [pc, #292]	; (8001264 <HAL_GPIO_Init+0x320>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d101      	bne.n	8001146 <HAL_GPIO_Init+0x202>
 8001142:	2306      	movs	r3, #6
 8001144:	e00c      	b.n	8001160 <HAL_GPIO_Init+0x21c>
 8001146:	2307      	movs	r3, #7
 8001148:	e00a      	b.n	8001160 <HAL_GPIO_Init+0x21c>
 800114a:	2305      	movs	r3, #5
 800114c:	e008      	b.n	8001160 <HAL_GPIO_Init+0x21c>
 800114e:	2304      	movs	r3, #4
 8001150:	e006      	b.n	8001160 <HAL_GPIO_Init+0x21c>
 8001152:	2303      	movs	r3, #3
 8001154:	e004      	b.n	8001160 <HAL_GPIO_Init+0x21c>
 8001156:	2302      	movs	r3, #2
 8001158:	e002      	b.n	8001160 <HAL_GPIO_Init+0x21c>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <HAL_GPIO_Init+0x21c>
 800115e:	2300      	movs	r3, #0
 8001160:	69fa      	ldr	r2, [r7, #28]
 8001162:	f002 0203 	and.w	r2, r2, #3
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	4093      	lsls	r3, r2
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001170:	4935      	ldr	r1, [pc, #212]	; (8001248 <HAL_GPIO_Init+0x304>)
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	3302      	adds	r3, #2
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800117e:	4b3a      	ldr	r3, [pc, #232]	; (8001268 <HAL_GPIO_Init+0x324>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011a2:	4a31      	ldr	r2, [pc, #196]	; (8001268 <HAL_GPIO_Init+0x324>)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a8:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <HAL_GPIO_Init+0x324>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011cc:	4a26      	ldr	r2, [pc, #152]	; (8001268 <HAL_GPIO_Init+0x324>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011d2:	4b25      	ldr	r3, [pc, #148]	; (8001268 <HAL_GPIO_Init+0x324>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011f6:	4a1c      	ldr	r2, [pc, #112]	; (8001268 <HAL_GPIO_Init+0x324>)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <HAL_GPIO_Init+0x324>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001220:	4a11      	ldr	r2, [pc, #68]	; (8001268 <HAL_GPIO_Init+0x324>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3301      	adds	r3, #1
 800122a:	61fb      	str	r3, [r7, #28]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	2b0f      	cmp	r3, #15
 8001230:	f67f ae96 	bls.w	8000f60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	3724      	adds	r7, #36	; 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	40013800 	.word	0x40013800
 800124c:	40020000 	.word	0x40020000
 8001250:	40020400 	.word	0x40020400
 8001254:	40020800 	.word	0x40020800
 8001258:	40020c00 	.word	0x40020c00
 800125c:	40021000 	.word	0x40021000
 8001260:	40021400 	.word	0x40021400
 8001264:	40021800 	.word	0x40021800
 8001268:	40013c00 	.word	0x40013c00

0800126c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	887b      	ldrh	r3, [r7, #2]
 800127e:	4013      	ands	r3, r2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d002      	beq.n	800128a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001284:	2301      	movs	r3, #1
 8001286:	73fb      	strb	r3, [r7, #15]
 8001288:	e001      	b.n	800128e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800128a:	2300      	movs	r3, #0
 800128c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800128e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
 80012a8:	4613      	mov	r3, r2
 80012aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012ac:	787b      	ldrb	r3, [r7, #1]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b2:	887a      	ldrh	r2, [r7, #2]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012b8:	e003      	b.n	80012c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ba:	887b      	ldrh	r3, [r7, #2]
 80012bc:	041a      	lsls	r2, r3, #16
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	619a      	str	r2, [r3, #24]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	4b20      	ldr	r3, [pc, #128]	; (8001360 <HAL_PWREx_EnableOverDrive+0x90>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	4a1f      	ldr	r2, [pc, #124]	; (8001360 <HAL_PWREx_EnableOverDrive+0x90>)
 80012e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <HAL_PWREx_EnableOverDrive+0x90>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80012f6:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <HAL_PWREx_EnableOverDrive+0x94>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012fc:	f7ff fd34 	bl	8000d68 <HAL_GetTick>
 8001300:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001302:	e009      	b.n	8001318 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001304:	f7ff fd30 	bl	8000d68 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001312:	d901      	bls.n	8001318 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e01f      	b.n	8001358 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <HAL_PWREx_EnableOverDrive+0x98>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001324:	d1ee      	bne.n	8001304 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001328:	2201      	movs	r2, #1
 800132a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800132c:	f7ff fd1c 	bl	8000d68 <HAL_GetTick>
 8001330:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001332:	e009      	b.n	8001348 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001334:	f7ff fd18 	bl	8000d68 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001342:	d901      	bls.n	8001348 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e007      	b.n	8001358 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001348:	4b07      	ldr	r3, [pc, #28]	; (8001368 <HAL_PWREx_EnableOverDrive+0x98>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001350:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001354:	d1ee      	bne.n	8001334 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40023800 	.word	0x40023800
 8001364:	420e0040 	.word	0x420e0040
 8001368:	40007000 	.word	0x40007000
 800136c:	420e0044 	.word	0x420e0044

08001370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e0cc      	b.n	800151e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001384:	4b68      	ldr	r3, [pc, #416]	; (8001528 <HAL_RCC_ClockConfig+0x1b8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 030f 	and.w	r3, r3, #15
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	429a      	cmp	r2, r3
 8001390:	d90c      	bls.n	80013ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001392:	4b65      	ldr	r3, [pc, #404]	; (8001528 <HAL_RCC_ClockConfig+0x1b8>)
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800139a:	4b63      	ldr	r3, [pc, #396]	; (8001528 <HAL_RCC_ClockConfig+0x1b8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d001      	beq.n	80013ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e0b8      	b.n	800151e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d020      	beq.n	80013fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013c4:	4b59      	ldr	r3, [pc, #356]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	4a58      	ldr	r2, [pc, #352]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80013ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0308 	and.w	r3, r3, #8
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d005      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013dc:	4b53      	ldr	r3, [pc, #332]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	4a52      	ldr	r2, [pc, #328]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80013e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013e8:	4b50      	ldr	r3, [pc, #320]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	494d      	ldr	r1, [pc, #308]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b00      	cmp	r3, #0
 8001404:	d044      	beq.n	8001490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d107      	bne.n	800141e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140e:	4b47      	ldr	r3, [pc, #284]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d119      	bne.n	800144e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e07f      	b.n	800151e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b02      	cmp	r3, #2
 8001424:	d003      	beq.n	800142e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800142a:	2b03      	cmp	r3, #3
 800142c:	d107      	bne.n	800143e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800142e:	4b3f      	ldr	r3, [pc, #252]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d109      	bne.n	800144e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e06f      	b.n	800151e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143e:	4b3b      	ldr	r3, [pc, #236]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e067      	b.n	800151e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800144e:	4b37      	ldr	r3, [pc, #220]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f023 0203 	bic.w	r2, r3, #3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	4934      	ldr	r1, [pc, #208]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 800145c:	4313      	orrs	r3, r2
 800145e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001460:	f7ff fc82 	bl	8000d68 <HAL_GetTick>
 8001464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001466:	e00a      	b.n	800147e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001468:	f7ff fc7e 	bl	8000d68 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	f241 3288 	movw	r2, #5000	; 0x1388
 8001476:	4293      	cmp	r3, r2
 8001478:	d901      	bls.n	800147e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e04f      	b.n	800151e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800147e:	4b2b      	ldr	r3, [pc, #172]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 020c 	and.w	r2, r3, #12
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	429a      	cmp	r2, r3
 800148e:	d1eb      	bne.n	8001468 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001490:	4b25      	ldr	r3, [pc, #148]	; (8001528 <HAL_RCC_ClockConfig+0x1b8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 030f 	and.w	r3, r3, #15
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	429a      	cmp	r2, r3
 800149c:	d20c      	bcs.n	80014b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149e:	4b22      	ldr	r3, [pc, #136]	; (8001528 <HAL_RCC_ClockConfig+0x1b8>)
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a6:	4b20      	ldr	r3, [pc, #128]	; (8001528 <HAL_RCC_ClockConfig+0x1b8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d001      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e032      	b.n	800151e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d008      	beq.n	80014d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014c4:	4b19      	ldr	r3, [pc, #100]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	4916      	ldr	r1, [pc, #88]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d009      	beq.n	80014f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	490e      	ldr	r1, [pc, #56]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014f6:	f000 f887 	bl	8001608 <HAL_RCC_GetSysClockFreq>
 80014fa:	4602      	mov	r2, r0
 80014fc:	4b0b      	ldr	r3, [pc, #44]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	091b      	lsrs	r3, r3, #4
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	490a      	ldr	r1, [pc, #40]	; (8001530 <HAL_RCC_ClockConfig+0x1c0>)
 8001508:	5ccb      	ldrb	r3, [r1, r3]
 800150a:	fa22 f303 	lsr.w	r3, r2, r3
 800150e:	4a09      	ldr	r2, [pc, #36]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 8001510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_RCC_ClockConfig+0x1c8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fb18 	bl	8000b4c <HAL_InitTick>

  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40023c00 	.word	0x40023c00
 800152c:	40023800 	.word	0x40023800
 8001530:	08005b8c 	.word	0x08005b8c
 8001534:	20000030 	.word	0x20000030
 8001538:	20000034 	.word	0x20000034

0800153c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001540:	4b03      	ldr	r3, [pc, #12]	; (8001550 <HAL_RCC_GetHCLKFreq+0x14>)
 8001542:	681b      	ldr	r3, [r3, #0]
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20000030 	.word	0x20000030

08001554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001558:	f7ff fff0 	bl	800153c <HAL_RCC_GetHCLKFreq>
 800155c:	4602      	mov	r2, r0
 800155e:	4b05      	ldr	r3, [pc, #20]	; (8001574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	0a9b      	lsrs	r3, r3, #10
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	4903      	ldr	r1, [pc, #12]	; (8001578 <HAL_RCC_GetPCLK1Freq+0x24>)
 800156a:	5ccb      	ldrb	r3, [r1, r3]
 800156c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001570:	4618      	mov	r0, r3
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40023800 	.word	0x40023800
 8001578:	08005b9c 	.word	0x08005b9c

0800157c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001580:	f7ff ffdc 	bl	800153c <HAL_RCC_GetHCLKFreq>
 8001584:	4602      	mov	r2, r0
 8001586:	4b05      	ldr	r3, [pc, #20]	; (800159c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	0b5b      	lsrs	r3, r3, #13
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	4903      	ldr	r1, [pc, #12]	; (80015a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001592:	5ccb      	ldrb	r3, [r1, r3]
 8001594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001598:	4618      	mov	r0, r3
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40023800 	.word	0x40023800
 80015a0:	08005b9c 	.word	0x08005b9c

080015a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	220f      	movs	r2, #15
 80015b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <HAL_RCC_GetClockConfig+0x5c>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 0203 	and.w	r2, r3, #3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <HAL_RCC_GetClockConfig+0x5c>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <HAL_RCC_GetClockConfig+0x5c>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80015d8:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_RCC_GetClockConfig+0x5c>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	08db      	lsrs	r3, r3, #3
 80015de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015e6:	4b07      	ldr	r3, [pc, #28]	; (8001604 <HAL_RCC_GetClockConfig+0x60>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 020f 	and.w	r2, r3, #15
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	601a      	str	r2, [r3, #0]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800
 8001604:	40023c00 	.word	0x40023c00

08001608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800160c:	b0ae      	sub	sp, #184	; 0xb8
 800160e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001616:	2300      	movs	r3, #0
 8001618:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800162e:	4bcb      	ldr	r3, [pc, #812]	; (800195c <HAL_RCC_GetSysClockFreq+0x354>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	2b0c      	cmp	r3, #12
 8001638:	f200 8206 	bhi.w	8001a48 <HAL_RCC_GetSysClockFreq+0x440>
 800163c:	a201      	add	r2, pc, #4	; (adr r2, 8001644 <HAL_RCC_GetSysClockFreq+0x3c>)
 800163e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001642:	bf00      	nop
 8001644:	08001679 	.word	0x08001679
 8001648:	08001a49 	.word	0x08001a49
 800164c:	08001a49 	.word	0x08001a49
 8001650:	08001a49 	.word	0x08001a49
 8001654:	08001681 	.word	0x08001681
 8001658:	08001a49 	.word	0x08001a49
 800165c:	08001a49 	.word	0x08001a49
 8001660:	08001a49 	.word	0x08001a49
 8001664:	08001689 	.word	0x08001689
 8001668:	08001a49 	.word	0x08001a49
 800166c:	08001a49 	.word	0x08001a49
 8001670:	08001a49 	.word	0x08001a49
 8001674:	08001879 	.word	0x08001879
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001678:	4bb9      	ldr	r3, [pc, #740]	; (8001960 <HAL_RCC_GetSysClockFreq+0x358>)
 800167a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800167e:	e1e7      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001680:	4bb8      	ldr	r3, [pc, #736]	; (8001964 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001682:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001686:	e1e3      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001688:	4bb4      	ldr	r3, [pc, #720]	; (800195c <HAL_RCC_GetSysClockFreq+0x354>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001690:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001694:	4bb1      	ldr	r3, [pc, #708]	; (800195c <HAL_RCC_GetSysClockFreq+0x354>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d071      	beq.n	8001784 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a0:	4bae      	ldr	r3, [pc, #696]	; (800195c <HAL_RCC_GetSysClockFreq+0x354>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	099b      	lsrs	r3, r3, #6
 80016a6:	2200      	movs	r2, #0
 80016a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80016ac:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80016b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80016b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80016bc:	2300      	movs	r3, #0
 80016be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80016c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80016c6:	4622      	mov	r2, r4
 80016c8:	462b      	mov	r3, r5
 80016ca:	f04f 0000 	mov.w	r0, #0
 80016ce:	f04f 0100 	mov.w	r1, #0
 80016d2:	0159      	lsls	r1, r3, #5
 80016d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016d8:	0150      	lsls	r0, r2, #5
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4621      	mov	r1, r4
 80016e0:	1a51      	subs	r1, r2, r1
 80016e2:	6439      	str	r1, [r7, #64]	; 0x40
 80016e4:	4629      	mov	r1, r5
 80016e6:	eb63 0301 	sbc.w	r3, r3, r1
 80016ea:	647b      	str	r3, [r7, #68]	; 0x44
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80016f8:	4649      	mov	r1, r9
 80016fa:	018b      	lsls	r3, r1, #6
 80016fc:	4641      	mov	r1, r8
 80016fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001702:	4641      	mov	r1, r8
 8001704:	018a      	lsls	r2, r1, #6
 8001706:	4641      	mov	r1, r8
 8001708:	1a51      	subs	r1, r2, r1
 800170a:	63b9      	str	r1, [r7, #56]	; 0x38
 800170c:	4649      	mov	r1, r9
 800170e:	eb63 0301 	sbc.w	r3, r3, r1
 8001712:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	f04f 0300 	mov.w	r3, #0
 800171c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001720:	4649      	mov	r1, r9
 8001722:	00cb      	lsls	r3, r1, #3
 8001724:	4641      	mov	r1, r8
 8001726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800172a:	4641      	mov	r1, r8
 800172c:	00ca      	lsls	r2, r1, #3
 800172e:	4610      	mov	r0, r2
 8001730:	4619      	mov	r1, r3
 8001732:	4603      	mov	r3, r0
 8001734:	4622      	mov	r2, r4
 8001736:	189b      	adds	r3, r3, r2
 8001738:	633b      	str	r3, [r7, #48]	; 0x30
 800173a:	462b      	mov	r3, r5
 800173c:	460a      	mov	r2, r1
 800173e:	eb42 0303 	adc.w	r3, r2, r3
 8001742:	637b      	str	r3, [r7, #52]	; 0x34
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001750:	4629      	mov	r1, r5
 8001752:	024b      	lsls	r3, r1, #9
 8001754:	4621      	mov	r1, r4
 8001756:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800175a:	4621      	mov	r1, r4
 800175c:	024a      	lsls	r2, r1, #9
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001766:	2200      	movs	r2, #0
 8001768:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800176c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001770:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001774:	f7fe fd4c 	bl	8000210 <__aeabi_uldivmod>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4613      	mov	r3, r2
 800177e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001782:	e067      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001784:	4b75      	ldr	r3, [pc, #468]	; (800195c <HAL_RCC_GetSysClockFreq+0x354>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	099b      	lsrs	r3, r3, #6
 800178a:	2200      	movs	r2, #0
 800178c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001790:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001794:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800179c:	67bb      	str	r3, [r7, #120]	; 0x78
 800179e:	2300      	movs	r3, #0
 80017a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80017a6:	4622      	mov	r2, r4
 80017a8:	462b      	mov	r3, r5
 80017aa:	f04f 0000 	mov.w	r0, #0
 80017ae:	f04f 0100 	mov.w	r1, #0
 80017b2:	0159      	lsls	r1, r3, #5
 80017b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017b8:	0150      	lsls	r0, r2, #5
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4621      	mov	r1, r4
 80017c0:	1a51      	subs	r1, r2, r1
 80017c2:	62b9      	str	r1, [r7, #40]	; 0x28
 80017c4:	4629      	mov	r1, r5
 80017c6:	eb63 0301 	sbc.w	r3, r3, r1
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80017d8:	4649      	mov	r1, r9
 80017da:	018b      	lsls	r3, r1, #6
 80017dc:	4641      	mov	r1, r8
 80017de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017e2:	4641      	mov	r1, r8
 80017e4:	018a      	lsls	r2, r1, #6
 80017e6:	4641      	mov	r1, r8
 80017e8:	ebb2 0a01 	subs.w	sl, r2, r1
 80017ec:	4649      	mov	r1, r9
 80017ee:	eb63 0b01 	sbc.w	fp, r3, r1
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	f04f 0300 	mov.w	r3, #0
 80017fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80017fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001802:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001806:	4692      	mov	sl, r2
 8001808:	469b      	mov	fp, r3
 800180a:	4623      	mov	r3, r4
 800180c:	eb1a 0303 	adds.w	r3, sl, r3
 8001810:	623b      	str	r3, [r7, #32]
 8001812:	462b      	mov	r3, r5
 8001814:	eb4b 0303 	adc.w	r3, fp, r3
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001826:	4629      	mov	r1, r5
 8001828:	028b      	lsls	r3, r1, #10
 800182a:	4621      	mov	r1, r4
 800182c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001830:	4621      	mov	r1, r4
 8001832:	028a      	lsls	r2, r1, #10
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800183c:	2200      	movs	r2, #0
 800183e:	673b      	str	r3, [r7, #112]	; 0x70
 8001840:	677a      	str	r2, [r7, #116]	; 0x74
 8001842:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001846:	f7fe fce3 	bl	8000210 <__aeabi_uldivmod>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4613      	mov	r3, r2
 8001850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001854:	4b41      	ldr	r3, [pc, #260]	; (800195c <HAL_RCC_GetSysClockFreq+0x354>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	0c1b      	lsrs	r3, r3, #16
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	3301      	adds	r3, #1
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001866:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800186a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800186e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001872:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001876:	e0eb      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001878:	4b38      	ldr	r3, [pc, #224]	; (800195c <HAL_RCC_GetSysClockFreq+0x354>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001880:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001884:	4b35      	ldr	r3, [pc, #212]	; (800195c <HAL_RCC_GetSysClockFreq+0x354>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d06b      	beq.n	8001968 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001890:	4b32      	ldr	r3, [pc, #200]	; (800195c <HAL_RCC_GetSysClockFreq+0x354>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	099b      	lsrs	r3, r3, #6
 8001896:	2200      	movs	r2, #0
 8001898:	66bb      	str	r3, [r7, #104]	; 0x68
 800189a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800189c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800189e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018a2:	663b      	str	r3, [r7, #96]	; 0x60
 80018a4:	2300      	movs	r3, #0
 80018a6:	667b      	str	r3, [r7, #100]	; 0x64
 80018a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80018ac:	4622      	mov	r2, r4
 80018ae:	462b      	mov	r3, r5
 80018b0:	f04f 0000 	mov.w	r0, #0
 80018b4:	f04f 0100 	mov.w	r1, #0
 80018b8:	0159      	lsls	r1, r3, #5
 80018ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018be:	0150      	lsls	r0, r2, #5
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4621      	mov	r1, r4
 80018c6:	1a51      	subs	r1, r2, r1
 80018c8:	61b9      	str	r1, [r7, #24]
 80018ca:	4629      	mov	r1, r5
 80018cc:	eb63 0301 	sbc.w	r3, r3, r1
 80018d0:	61fb      	str	r3, [r7, #28]
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80018de:	4659      	mov	r1, fp
 80018e0:	018b      	lsls	r3, r1, #6
 80018e2:	4651      	mov	r1, sl
 80018e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018e8:	4651      	mov	r1, sl
 80018ea:	018a      	lsls	r2, r1, #6
 80018ec:	4651      	mov	r1, sl
 80018ee:	ebb2 0801 	subs.w	r8, r2, r1
 80018f2:	4659      	mov	r1, fp
 80018f4:	eb63 0901 	sbc.w	r9, r3, r1
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001904:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001908:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800190c:	4690      	mov	r8, r2
 800190e:	4699      	mov	r9, r3
 8001910:	4623      	mov	r3, r4
 8001912:	eb18 0303 	adds.w	r3, r8, r3
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	462b      	mov	r3, r5
 800191a:	eb49 0303 	adc.w	r3, r9, r3
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800192c:	4629      	mov	r1, r5
 800192e:	024b      	lsls	r3, r1, #9
 8001930:	4621      	mov	r1, r4
 8001932:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001936:	4621      	mov	r1, r4
 8001938:	024a      	lsls	r2, r1, #9
 800193a:	4610      	mov	r0, r2
 800193c:	4619      	mov	r1, r3
 800193e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001942:	2200      	movs	r2, #0
 8001944:	65bb      	str	r3, [r7, #88]	; 0x58
 8001946:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001948:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800194c:	f7fe fc60 	bl	8000210 <__aeabi_uldivmod>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4613      	mov	r3, r2
 8001956:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800195a:	e065      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0x420>
 800195c:	40023800 	.word	0x40023800
 8001960:	00f42400 	.word	0x00f42400
 8001964:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001968:	4b3d      	ldr	r3, [pc, #244]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x458>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	099b      	lsrs	r3, r3, #6
 800196e:	2200      	movs	r2, #0
 8001970:	4618      	mov	r0, r3
 8001972:	4611      	mov	r1, r2
 8001974:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001978:	653b      	str	r3, [r7, #80]	; 0x50
 800197a:	2300      	movs	r3, #0
 800197c:	657b      	str	r3, [r7, #84]	; 0x54
 800197e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001982:	4642      	mov	r2, r8
 8001984:	464b      	mov	r3, r9
 8001986:	f04f 0000 	mov.w	r0, #0
 800198a:	f04f 0100 	mov.w	r1, #0
 800198e:	0159      	lsls	r1, r3, #5
 8001990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001994:	0150      	lsls	r0, r2, #5
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4641      	mov	r1, r8
 800199c:	1a51      	subs	r1, r2, r1
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	4649      	mov	r1, r9
 80019a2:	eb63 0301 	sbc.w	r3, r3, r1
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80019b4:	4659      	mov	r1, fp
 80019b6:	018b      	lsls	r3, r1, #6
 80019b8:	4651      	mov	r1, sl
 80019ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019be:	4651      	mov	r1, sl
 80019c0:	018a      	lsls	r2, r1, #6
 80019c2:	4651      	mov	r1, sl
 80019c4:	1a54      	subs	r4, r2, r1
 80019c6:	4659      	mov	r1, fp
 80019c8:	eb63 0501 	sbc.w	r5, r3, r1
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	f04f 0300 	mov.w	r3, #0
 80019d4:	00eb      	lsls	r3, r5, #3
 80019d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019da:	00e2      	lsls	r2, r4, #3
 80019dc:	4614      	mov	r4, r2
 80019de:	461d      	mov	r5, r3
 80019e0:	4643      	mov	r3, r8
 80019e2:	18e3      	adds	r3, r4, r3
 80019e4:	603b      	str	r3, [r7, #0]
 80019e6:	464b      	mov	r3, r9
 80019e8:	eb45 0303 	adc.w	r3, r5, r3
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019fa:	4629      	mov	r1, r5
 80019fc:	028b      	lsls	r3, r1, #10
 80019fe:	4621      	mov	r1, r4
 8001a00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a04:	4621      	mov	r1, r4
 8001a06:	028a      	lsls	r2, r1, #10
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a10:	2200      	movs	r2, #0
 8001a12:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a14:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a16:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001a1a:	f7fe fbf9 	bl	8000210 <__aeabi_uldivmod>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4613      	mov	r3, r2
 8001a24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a28:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x458>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	0f1b      	lsrs	r3, r3, #28
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001a36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a46:	e003      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001a4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	37b8      	adds	r7, #184	; 0xb8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800
 8001a64:	00f42400 	.word	0x00f42400

08001a68 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e28d      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 8083 	beq.w	8001b8e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a88:	4b94      	ldr	r3, [pc, #592]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d019      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a94:	4b91      	ldr	r3, [pc, #580]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d106      	bne.n	8001aae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001aa0:	4b8e      	ldr	r3, [pc, #568]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aac:	d00c      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aae:	4b8b      	ldr	r3, [pc, #556]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ab6:	2b0c      	cmp	r3, #12
 8001ab8:	d112      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aba:	4b88      	ldr	r3, [pc, #544]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ac6:	d10b      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac8:	4b84      	ldr	r3, [pc, #528]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d05b      	beq.n	8001b8c <HAL_RCC_OscConfig+0x124>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d157      	bne.n	8001b8c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e25a      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae8:	d106      	bne.n	8001af8 <HAL_RCC_OscConfig+0x90>
 8001aea:	4b7c      	ldr	r3, [pc, #496]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a7b      	ldr	r2, [pc, #492]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e01d      	b.n	8001b34 <HAL_RCC_OscConfig+0xcc>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b00:	d10c      	bne.n	8001b1c <HAL_RCC_OscConfig+0xb4>
 8001b02:	4b76      	ldr	r3, [pc, #472]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a75      	ldr	r2, [pc, #468]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b73      	ldr	r3, [pc, #460]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a72      	ldr	r2, [pc, #456]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e00b      	b.n	8001b34 <HAL_RCC_OscConfig+0xcc>
 8001b1c:	4b6f      	ldr	r3, [pc, #444]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a6e      	ldr	r2, [pc, #440]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	4b6c      	ldr	r3, [pc, #432]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a6b      	ldr	r2, [pc, #428]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d013      	beq.n	8001b64 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7ff f914 	bl	8000d68 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff f910 	bl	8000d68 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	; 0x64
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e21f      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b56:	4b61      	ldr	r3, [pc, #388]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0xdc>
 8001b62:	e014      	b.n	8001b8e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7ff f900 	bl	8000d68 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7ff f8fc 	bl	8000d68 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	; 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e20b      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7e:	4b57      	ldr	r3, [pc, #348]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x104>
 8001b8a:	e000      	b.n	8001b8e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d06f      	beq.n	8001c7a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b9a:	4b50      	ldr	r3, [pc, #320]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d017      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ba6:	4b4d      	ldr	r3, [pc, #308]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d105      	bne.n	8001bbe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bb2:	4b4a      	ldr	r3, [pc, #296]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00b      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bbe:	4b47      	ldr	r3, [pc, #284]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bc6:	2b0c      	cmp	r3, #12
 8001bc8:	d11c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bca:	4b44      	ldr	r3, [pc, #272]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d116      	bne.n	8001c04 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd6:	4b41      	ldr	r3, [pc, #260]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d005      	beq.n	8001bee <HAL_RCC_OscConfig+0x186>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d001      	beq.n	8001bee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e1d3      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bee:	4b3b      	ldr	r3, [pc, #236]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4937      	ldr	r1, [pc, #220]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c02:	e03a      	b.n	8001c7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d020      	beq.n	8001c4e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c0c:	4b34      	ldr	r3, [pc, #208]	; (8001ce0 <HAL_RCC_OscConfig+0x278>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c12:	f7ff f8a9 	bl	8000d68 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c1a:	f7ff f8a5 	bl	8000d68 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e1b4      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2c:	4b2b      	ldr	r3, [pc, #172]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0f0      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c38:	4b28      	ldr	r3, [pc, #160]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4925      	ldr	r1, [pc, #148]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	600b      	str	r3, [r1, #0]
 8001c4c:	e015      	b.n	8001c7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c4e:	4b24      	ldr	r3, [pc, #144]	; (8001ce0 <HAL_RCC_OscConfig+0x278>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7ff f888 	bl	8000d68 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c5c:	f7ff f884 	bl	8000d68 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e193      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c6e:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d036      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d016      	beq.n	8001cbc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <HAL_RCC_OscConfig+0x27c>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c94:	f7ff f868 	bl	8000d68 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c9c:	f7ff f864 	bl	8000d68 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e173      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cae:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x234>
 8001cba:	e01b      	b.n	8001cf4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_RCC_OscConfig+0x27c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc2:	f7ff f851 	bl	8000d68 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc8:	e00e      	b.n	8001ce8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cca:	f7ff f84d 	bl	8000d68 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d907      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e15c      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	42470000 	.word	0x42470000
 8001ce4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce8:	4b8a      	ldr	r3, [pc, #552]	; (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1ea      	bne.n	8001cca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 8097 	beq.w	8001e30 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d02:	2300      	movs	r3, #0
 8001d04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d06:	4b83      	ldr	r3, [pc, #524]	; (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10f      	bne.n	8001d32 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	4b7f      	ldr	r3, [pc, #508]	; (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	4a7e      	ldr	r2, [pc, #504]	; (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d20:	6413      	str	r3, [r2, #64]	; 0x40
 8001d22:	4b7c      	ldr	r3, [pc, #496]	; (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d32:	4b79      	ldr	r3, [pc, #484]	; (8001f18 <HAL_RCC_OscConfig+0x4b0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d118      	bne.n	8001d70 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d3e:	4b76      	ldr	r3, [pc, #472]	; (8001f18 <HAL_RCC_OscConfig+0x4b0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a75      	ldr	r2, [pc, #468]	; (8001f18 <HAL_RCC_OscConfig+0x4b0>)
 8001d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d4a:	f7ff f80d 	bl	8000d68 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d52:	f7ff f809 	bl	8000d68 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e118      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d64:	4b6c      	ldr	r3, [pc, #432]	; (8001f18 <HAL_RCC_OscConfig+0x4b0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0f0      	beq.n	8001d52 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d106      	bne.n	8001d86 <HAL_RCC_OscConfig+0x31e>
 8001d78:	4b66      	ldr	r3, [pc, #408]	; (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7c:	4a65      	ldr	r2, [pc, #404]	; (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6713      	str	r3, [r2, #112]	; 0x70
 8001d84:	e01c      	b.n	8001dc0 <HAL_RCC_OscConfig+0x358>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	2b05      	cmp	r3, #5
 8001d8c:	d10c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x340>
 8001d8e:	4b61      	ldr	r3, [pc, #388]	; (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d92:	4a60      	ldr	r2, [pc, #384]	; (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001d94:	f043 0304 	orr.w	r3, r3, #4
 8001d98:	6713      	str	r3, [r2, #112]	; 0x70
 8001d9a:	4b5e      	ldr	r3, [pc, #376]	; (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9e:	4a5d      	ldr	r2, [pc, #372]	; (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6713      	str	r3, [r2, #112]	; 0x70
 8001da6:	e00b      	b.n	8001dc0 <HAL_RCC_OscConfig+0x358>
 8001da8:	4b5a      	ldr	r3, [pc, #360]	; (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dac:	4a59      	ldr	r2, [pc, #356]	; (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001dae:	f023 0301 	bic.w	r3, r3, #1
 8001db2:	6713      	str	r3, [r2, #112]	; 0x70
 8001db4:	4b57      	ldr	r3, [pc, #348]	; (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db8:	4a56      	ldr	r2, [pc, #344]	; (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001dba:	f023 0304 	bic.w	r3, r3, #4
 8001dbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d015      	beq.n	8001df4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc8:	f7fe ffce 	bl	8000d68 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dce:	e00a      	b.n	8001de6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dd0:	f7fe ffca 	bl	8000d68 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e0d7      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de6:	4b4b      	ldr	r3, [pc, #300]	; (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0ee      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x368>
 8001df2:	e014      	b.n	8001e1e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df4:	f7fe ffb8 	bl	8000d68 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dfa:	e00a      	b.n	8001e12 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dfc:	f7fe ffb4 	bl	8000d68 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e0c1      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e12:	4b40      	ldr	r3, [pc, #256]	; (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1ee      	bne.n	8001dfc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e1e:	7dfb      	ldrb	r3, [r7, #23]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d105      	bne.n	8001e30 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e24:	4b3b      	ldr	r3, [pc, #236]	; (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	4a3a      	ldr	r2, [pc, #232]	; (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001e2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 80ad 	beq.w	8001f94 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e3a:	4b36      	ldr	r3, [pc, #216]	; (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d060      	beq.n	8001f08 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d145      	bne.n	8001eda <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4e:	4b33      	ldr	r3, [pc, #204]	; (8001f1c <HAL_RCC_OscConfig+0x4b4>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e54:	f7fe ff88 	bl	8000d68 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e5c:	f7fe ff84 	bl	8000d68 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e093      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e6e:	4b29      	ldr	r3, [pc, #164]	; (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69da      	ldr	r2, [r3, #28]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	019b      	lsls	r3, r3, #6
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e90:	085b      	lsrs	r3, r3, #1
 8001e92:	3b01      	subs	r3, #1
 8001e94:	041b      	lsls	r3, r3, #16
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9c:	061b      	lsls	r3, r3, #24
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	071b      	lsls	r3, r3, #28
 8001ea6:	491b      	ldr	r1, [pc, #108]	; (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eac:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <HAL_RCC_OscConfig+0x4b4>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb2:	f7fe ff59 	bl	8000d68 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eba:	f7fe ff55 	bl	8000d68 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e064      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0f0      	beq.n	8001eba <HAL_RCC_OscConfig+0x452>
 8001ed8:	e05c      	b.n	8001f94 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eda:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <HAL_RCC_OscConfig+0x4b4>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7fe ff42 	bl	8000d68 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee8:	f7fe ff3e 	bl	8000d68 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e04d      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_RCC_OscConfig+0x4ac>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x480>
 8001f06:	e045      	b.n	8001f94 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d107      	bne.n	8001f20 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e040      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40007000 	.word	0x40007000
 8001f1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f20:	4b1f      	ldr	r3, [pc, #124]	; (8001fa0 <HAL_RCC_OscConfig+0x538>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d030      	beq.n	8001f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d129      	bne.n	8001f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d122      	bne.n	8001f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f50:	4013      	ands	r3, r2
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d119      	bne.n	8001f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f66:	085b      	lsrs	r3, r3, #1
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d10f      	bne.n	8001f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d107      	bne.n	8001f90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e000      	b.n	8001f96 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800

08001fa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e041      	b.n	800203a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d106      	bne.n	8001fd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f839 	bl	8002042 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3304      	adds	r3, #4
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	f000 f9c0 	bl	8002368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b01      	cmp	r3, #1
 800206a:	d001      	beq.n	8002070 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e04e      	b.n	800210e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2202      	movs	r2, #2
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0201 	orr.w	r2, r2, #1
 8002086:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a23      	ldr	r2, [pc, #140]	; (800211c <HAL_TIM_Base_Start_IT+0xc4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d022      	beq.n	80020d8 <HAL_TIM_Base_Start_IT+0x80>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800209a:	d01d      	beq.n	80020d8 <HAL_TIM_Base_Start_IT+0x80>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a1f      	ldr	r2, [pc, #124]	; (8002120 <HAL_TIM_Base_Start_IT+0xc8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d018      	beq.n	80020d8 <HAL_TIM_Base_Start_IT+0x80>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a1e      	ldr	r2, [pc, #120]	; (8002124 <HAL_TIM_Base_Start_IT+0xcc>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d013      	beq.n	80020d8 <HAL_TIM_Base_Start_IT+0x80>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a1c      	ldr	r2, [pc, #112]	; (8002128 <HAL_TIM_Base_Start_IT+0xd0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d00e      	beq.n	80020d8 <HAL_TIM_Base_Start_IT+0x80>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a1b      	ldr	r2, [pc, #108]	; (800212c <HAL_TIM_Base_Start_IT+0xd4>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d009      	beq.n	80020d8 <HAL_TIM_Base_Start_IT+0x80>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a19      	ldr	r2, [pc, #100]	; (8002130 <HAL_TIM_Base_Start_IT+0xd8>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d004      	beq.n	80020d8 <HAL_TIM_Base_Start_IT+0x80>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a18      	ldr	r2, [pc, #96]	; (8002134 <HAL_TIM_Base_Start_IT+0xdc>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d111      	bne.n	80020fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2b06      	cmp	r3, #6
 80020e8:	d010      	beq.n	800210c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f042 0201 	orr.w	r2, r2, #1
 80020f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020fa:	e007      	b.n	800210c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40010000 	.word	0x40010000
 8002120:	40000400 	.word	0x40000400
 8002124:	40000800 	.word	0x40000800
 8002128:	40000c00 	.word	0x40000c00
 800212c:	40010400 	.word	0x40010400
 8002130:	40014000 	.word	0x40014000
 8002134:	40001800 	.word	0x40001800

08002138 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d020      	beq.n	800219c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d01b      	beq.n	800219c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f06f 0202 	mvn.w	r2, #2
 800216c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f8d2 	bl	800232c <HAL_TIM_IC_CaptureCallback>
 8002188:	e005      	b.n	8002196 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f8c4 	bl	8002318 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f8d5 	bl	8002340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d020      	beq.n	80021e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d01b      	beq.n	80021e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f06f 0204 	mvn.w	r2, #4
 80021b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2202      	movs	r2, #2
 80021be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f8ac 	bl	800232c <HAL_TIM_IC_CaptureCallback>
 80021d4:	e005      	b.n	80021e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f89e 	bl	8002318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f8af 	bl	8002340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d020      	beq.n	8002234 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d01b      	beq.n	8002234 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0208 	mvn.w	r2, #8
 8002204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2204      	movs	r2, #4
 800220a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f886 	bl	800232c <HAL_TIM_IC_CaptureCallback>
 8002220:	e005      	b.n	800222e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f878 	bl	8002318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f889 	bl	8002340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2b00      	cmp	r3, #0
 800223c:	d020      	beq.n	8002280 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f003 0310 	and.w	r3, r3, #16
 8002244:	2b00      	cmp	r3, #0
 8002246:	d01b      	beq.n	8002280 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f06f 0210 	mvn.w	r2, #16
 8002250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2208      	movs	r2, #8
 8002256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f860 	bl	800232c <HAL_TIM_IC_CaptureCallback>
 800226c:	e005      	b.n	800227a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f852 	bl	8002318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 f863 	bl	8002340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00c      	beq.n	80022a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d007      	beq.n	80022a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0201 	mvn.w	r2, #1
 800229c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7fe fbc8 	bl	8000a34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00c      	beq.n	80022c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d007      	beq.n	80022c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f906 	bl	80024d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00c      	beq.n	80022ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d007      	beq.n	80022ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f834 	bl	8002354 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	f003 0320 	and.w	r3, r3, #32
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00c      	beq.n	8002310 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d007      	beq.n	8002310 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f06f 0220 	mvn.w	r2, #32
 8002308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f8d8 	bl	80024c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002310:	bf00      	nop
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a46      	ldr	r2, [pc, #280]	; (8002494 <TIM_Base_SetConfig+0x12c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d013      	beq.n	80023a8 <TIM_Base_SetConfig+0x40>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002386:	d00f      	beq.n	80023a8 <TIM_Base_SetConfig+0x40>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a43      	ldr	r2, [pc, #268]	; (8002498 <TIM_Base_SetConfig+0x130>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d00b      	beq.n	80023a8 <TIM_Base_SetConfig+0x40>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a42      	ldr	r2, [pc, #264]	; (800249c <TIM_Base_SetConfig+0x134>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d007      	beq.n	80023a8 <TIM_Base_SetConfig+0x40>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a41      	ldr	r2, [pc, #260]	; (80024a0 <TIM_Base_SetConfig+0x138>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d003      	beq.n	80023a8 <TIM_Base_SetConfig+0x40>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a40      	ldr	r2, [pc, #256]	; (80024a4 <TIM_Base_SetConfig+0x13c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d108      	bne.n	80023ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a35      	ldr	r2, [pc, #212]	; (8002494 <TIM_Base_SetConfig+0x12c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d02b      	beq.n	800241a <TIM_Base_SetConfig+0xb2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c8:	d027      	beq.n	800241a <TIM_Base_SetConfig+0xb2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a32      	ldr	r2, [pc, #200]	; (8002498 <TIM_Base_SetConfig+0x130>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d023      	beq.n	800241a <TIM_Base_SetConfig+0xb2>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a31      	ldr	r2, [pc, #196]	; (800249c <TIM_Base_SetConfig+0x134>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d01f      	beq.n	800241a <TIM_Base_SetConfig+0xb2>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a30      	ldr	r2, [pc, #192]	; (80024a0 <TIM_Base_SetConfig+0x138>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d01b      	beq.n	800241a <TIM_Base_SetConfig+0xb2>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a2f      	ldr	r2, [pc, #188]	; (80024a4 <TIM_Base_SetConfig+0x13c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d017      	beq.n	800241a <TIM_Base_SetConfig+0xb2>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a2e      	ldr	r2, [pc, #184]	; (80024a8 <TIM_Base_SetConfig+0x140>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d013      	beq.n	800241a <TIM_Base_SetConfig+0xb2>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a2d      	ldr	r2, [pc, #180]	; (80024ac <TIM_Base_SetConfig+0x144>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d00f      	beq.n	800241a <TIM_Base_SetConfig+0xb2>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a2c      	ldr	r2, [pc, #176]	; (80024b0 <TIM_Base_SetConfig+0x148>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d00b      	beq.n	800241a <TIM_Base_SetConfig+0xb2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a2b      	ldr	r2, [pc, #172]	; (80024b4 <TIM_Base_SetConfig+0x14c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d007      	beq.n	800241a <TIM_Base_SetConfig+0xb2>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a2a      	ldr	r2, [pc, #168]	; (80024b8 <TIM_Base_SetConfig+0x150>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d003      	beq.n	800241a <TIM_Base_SetConfig+0xb2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a29      	ldr	r2, [pc, #164]	; (80024bc <TIM_Base_SetConfig+0x154>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d108      	bne.n	800242c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	4313      	orrs	r3, r2
 800242a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	4313      	orrs	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a10      	ldr	r2, [pc, #64]	; (8002494 <TIM_Base_SetConfig+0x12c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d003      	beq.n	8002460 <TIM_Base_SetConfig+0xf8>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a12      	ldr	r2, [pc, #72]	; (80024a4 <TIM_Base_SetConfig+0x13c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d103      	bne.n	8002468 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b01      	cmp	r3, #1
 8002478:	d105      	bne.n	8002486 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	f023 0201 	bic.w	r2, r3, #1
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	611a      	str	r2, [r3, #16]
  }
}
 8002486:	bf00      	nop
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40010000 	.word	0x40010000
 8002498:	40000400 	.word	0x40000400
 800249c:	40000800 	.word	0x40000800
 80024a0:	40000c00 	.word	0x40000c00
 80024a4:	40010400 	.word	0x40010400
 80024a8:	40014000 	.word	0x40014000
 80024ac:	40014400 	.word	0x40014400
 80024b0:	40014800 	.word	0x40014800
 80024b4:	40001800 	.word	0x40001800
 80024b8:	40001c00 	.word	0x40001c00
 80024bc:	40002000 	.word	0x40002000

080024c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e042      	b.n	8002580 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d106      	bne.n	8002514 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fe fad4 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2224      	movs	r2, #36	; 0x24
 8002518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800252a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f973 	bl	8002818 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002540:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695a      	ldr	r2, [r3, #20]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002550:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002560:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08a      	sub	sp, #40	; 0x28
 800258c:	af02      	add	r7, sp, #8
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	4613      	mov	r3, r2
 8002596:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	d175      	bne.n	8002694 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <HAL_UART_Transmit+0x2c>
 80025ae:	88fb      	ldrh	r3, [r7, #6]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e06e      	b.n	8002696 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2221      	movs	r2, #33	; 0x21
 80025c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025c6:	f7fe fbcf 	bl	8000d68 <HAL_GetTick>
 80025ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	88fa      	ldrh	r2, [r7, #6]
 80025d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	88fa      	ldrh	r2, [r7, #6]
 80025d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e0:	d108      	bne.n	80025f4 <HAL_UART_Transmit+0x6c>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d104      	bne.n	80025f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	61bb      	str	r3, [r7, #24]
 80025f2:	e003      	b.n	80025fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025fc:	e02e      	b.n	800265c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2200      	movs	r2, #0
 8002606:	2180      	movs	r1, #128	; 0x80
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 f848 	bl	800269e <UART_WaitOnFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e03a      	b.n	8002696 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10b      	bne.n	800263e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002634:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	3302      	adds	r3, #2
 800263a:	61bb      	str	r3, [r7, #24]
 800263c:	e007      	b.n	800264e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	781a      	ldrb	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	3301      	adds	r3, #1
 800264c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002652:	b29b      	uxth	r3, r3
 8002654:	3b01      	subs	r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1cb      	bne.n	80025fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2200      	movs	r2, #0
 800266e:	2140      	movs	r1, #64	; 0x40
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 f814 	bl	800269e <UART_WaitOnFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e006      	b.n	8002696 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	e000      	b.n	8002696 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002694:	2302      	movs	r3, #2
  }
}
 8002696:	4618      	mov	r0, r3
 8002698:	3720      	adds	r7, #32
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b086      	sub	sp, #24
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	603b      	str	r3, [r7, #0]
 80026aa:	4613      	mov	r3, r2
 80026ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026ae:	e03b      	b.n	8002728 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026b6:	d037      	beq.n	8002728 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b8:	f7fe fb56 	bl	8000d68 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	6a3a      	ldr	r2, [r7, #32]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d302      	bcc.n	80026ce <UART_WaitOnFlagUntilTimeout+0x30>
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e03a      	b.n	8002748 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d023      	beq.n	8002728 <UART_WaitOnFlagUntilTimeout+0x8a>
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2b80      	cmp	r3, #128	; 0x80
 80026e4:	d020      	beq.n	8002728 <UART_WaitOnFlagUntilTimeout+0x8a>
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2b40      	cmp	r3, #64	; 0x40
 80026ea:	d01d      	beq.n	8002728 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d116      	bne.n	8002728 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 f81d 	bl	8002750 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2208      	movs	r2, #8
 800271a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e00f      	b.n	8002748 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	4013      	ands	r3, r2
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	429a      	cmp	r2, r3
 8002736:	bf0c      	ite	eq
 8002738:	2301      	moveq	r3, #1
 800273a:	2300      	movne	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	461a      	mov	r2, r3
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	429a      	cmp	r2, r3
 8002744:	d0b4      	beq.n	80026b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002750:	b480      	push	{r7}
 8002752:	b095      	sub	sp, #84	; 0x54
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	330c      	adds	r3, #12
 800275e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002762:	e853 3f00 	ldrex	r3, [r3]
 8002766:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800276e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	330c      	adds	r3, #12
 8002776:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002778:	643a      	str	r2, [r7, #64]	; 0x40
 800277a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800277c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800277e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002780:	e841 2300 	strex	r3, r2, [r1]
 8002784:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1e5      	bne.n	8002758 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3314      	adds	r3, #20
 8002792:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	e853 3f00 	ldrex	r3, [r3]
 800279a:	61fb      	str	r3, [r7, #28]
   return(result);
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f023 0301 	bic.w	r3, r3, #1
 80027a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	3314      	adds	r3, #20
 80027aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027b4:	e841 2300 	strex	r3, r2, [r1]
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1e5      	bne.n	800278c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d119      	bne.n	80027fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	330c      	adds	r3, #12
 80027ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	e853 3f00 	ldrex	r3, [r3]
 80027d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f023 0310 	bic.w	r3, r3, #16
 80027de:	647b      	str	r3, [r7, #68]	; 0x44
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	330c      	adds	r3, #12
 80027e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027e8:	61ba      	str	r2, [r7, #24]
 80027ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ec:	6979      	ldr	r1, [r7, #20]
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	e841 2300 	strex	r3, r2, [r1]
 80027f4:	613b      	str	r3, [r7, #16]
   return(result);
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1e5      	bne.n	80027c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	631a      	str	r2, [r3, #48]	; 0x30
}
 800280a:	bf00      	nop
 800280c:	3754      	adds	r7, #84	; 0x54
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800281c:	b0c0      	sub	sp, #256	; 0x100
 800281e:	af00      	add	r7, sp, #0
 8002820:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002834:	68d9      	ldr	r1, [r3, #12]
 8002836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	ea40 0301 	orr.w	r3, r0, r1
 8002840:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	431a      	orrs	r2, r3
 8002850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	431a      	orrs	r2, r3
 8002858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002870:	f021 010c 	bic.w	r1, r1, #12
 8002874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800287e:	430b      	orrs	r3, r1
 8002880:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800288e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002892:	6999      	ldr	r1, [r3, #24]
 8002894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	ea40 0301 	orr.w	r3, r0, r1
 800289e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	4b8f      	ldr	r3, [pc, #572]	; (8002ae4 <UART_SetConfig+0x2cc>)
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d005      	beq.n	80028b8 <UART_SetConfig+0xa0>
 80028ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	4b8d      	ldr	r3, [pc, #564]	; (8002ae8 <UART_SetConfig+0x2d0>)
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d104      	bne.n	80028c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028b8:	f7fe fe60 	bl	800157c <HAL_RCC_GetPCLK2Freq>
 80028bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80028c0:	e003      	b.n	80028ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028c2:	f7fe fe47 	bl	8001554 <HAL_RCC_GetPCLK1Freq>
 80028c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028d4:	f040 810c 	bne.w	8002af0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028dc:	2200      	movs	r2, #0
 80028de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80028e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80028e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80028ea:	4622      	mov	r2, r4
 80028ec:	462b      	mov	r3, r5
 80028ee:	1891      	adds	r1, r2, r2
 80028f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80028f2:	415b      	adcs	r3, r3
 80028f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80028fa:	4621      	mov	r1, r4
 80028fc:	eb12 0801 	adds.w	r8, r2, r1
 8002900:	4629      	mov	r1, r5
 8002902:	eb43 0901 	adc.w	r9, r3, r1
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002912:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002916:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800291a:	4690      	mov	r8, r2
 800291c:	4699      	mov	r9, r3
 800291e:	4623      	mov	r3, r4
 8002920:	eb18 0303 	adds.w	r3, r8, r3
 8002924:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002928:	462b      	mov	r3, r5
 800292a:	eb49 0303 	adc.w	r3, r9, r3
 800292e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800293e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002942:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002946:	460b      	mov	r3, r1
 8002948:	18db      	adds	r3, r3, r3
 800294a:	653b      	str	r3, [r7, #80]	; 0x50
 800294c:	4613      	mov	r3, r2
 800294e:	eb42 0303 	adc.w	r3, r2, r3
 8002952:	657b      	str	r3, [r7, #84]	; 0x54
 8002954:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002958:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800295c:	f7fd fc58 	bl	8000210 <__aeabi_uldivmod>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4b61      	ldr	r3, [pc, #388]	; (8002aec <UART_SetConfig+0x2d4>)
 8002966:	fba3 2302 	umull	r2, r3, r3, r2
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	011c      	lsls	r4, r3, #4
 800296e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002972:	2200      	movs	r2, #0
 8002974:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002978:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800297c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002980:	4642      	mov	r2, r8
 8002982:	464b      	mov	r3, r9
 8002984:	1891      	adds	r1, r2, r2
 8002986:	64b9      	str	r1, [r7, #72]	; 0x48
 8002988:	415b      	adcs	r3, r3
 800298a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800298c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002990:	4641      	mov	r1, r8
 8002992:	eb12 0a01 	adds.w	sl, r2, r1
 8002996:	4649      	mov	r1, r9
 8002998:	eb43 0b01 	adc.w	fp, r3, r1
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029b0:	4692      	mov	sl, r2
 80029b2:	469b      	mov	fp, r3
 80029b4:	4643      	mov	r3, r8
 80029b6:	eb1a 0303 	adds.w	r3, sl, r3
 80029ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80029be:	464b      	mov	r3, r9
 80029c0:	eb4b 0303 	adc.w	r3, fp, r3
 80029c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80029c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80029d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80029dc:	460b      	mov	r3, r1
 80029de:	18db      	adds	r3, r3, r3
 80029e0:	643b      	str	r3, [r7, #64]	; 0x40
 80029e2:	4613      	mov	r3, r2
 80029e4:	eb42 0303 	adc.w	r3, r2, r3
 80029e8:	647b      	str	r3, [r7, #68]	; 0x44
 80029ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80029ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80029f2:	f7fd fc0d 	bl	8000210 <__aeabi_uldivmod>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4611      	mov	r1, r2
 80029fc:	4b3b      	ldr	r3, [pc, #236]	; (8002aec <UART_SetConfig+0x2d4>)
 80029fe:	fba3 2301 	umull	r2, r3, r3, r1
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	2264      	movs	r2, #100	; 0x64
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	1acb      	subs	r3, r1, r3
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a12:	4b36      	ldr	r3, [pc, #216]	; (8002aec <UART_SetConfig+0x2d4>)
 8002a14:	fba3 2302 	umull	r2, r3, r3, r2
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a20:	441c      	add	r4, r3
 8002a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a26:	2200      	movs	r2, #0
 8002a28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002a30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002a34:	4642      	mov	r2, r8
 8002a36:	464b      	mov	r3, r9
 8002a38:	1891      	adds	r1, r2, r2
 8002a3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a3c:	415b      	adcs	r3, r3
 8002a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a44:	4641      	mov	r1, r8
 8002a46:	1851      	adds	r1, r2, r1
 8002a48:	6339      	str	r1, [r7, #48]	; 0x30
 8002a4a:	4649      	mov	r1, r9
 8002a4c:	414b      	adcs	r3, r1
 8002a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002a5c:	4659      	mov	r1, fp
 8002a5e:	00cb      	lsls	r3, r1, #3
 8002a60:	4651      	mov	r1, sl
 8002a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a66:	4651      	mov	r1, sl
 8002a68:	00ca      	lsls	r2, r1, #3
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4642      	mov	r2, r8
 8002a72:	189b      	adds	r3, r3, r2
 8002a74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a78:	464b      	mov	r3, r9
 8002a7a:	460a      	mov	r2, r1
 8002a7c:	eb42 0303 	adc.w	r3, r2, r3
 8002a80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002a94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002a98:	460b      	mov	r3, r1
 8002a9a:	18db      	adds	r3, r3, r3
 8002a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	eb42 0303 	adc.w	r3, r2, r3
 8002aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aa6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002aaa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002aae:	f7fd fbaf 	bl	8000210 <__aeabi_uldivmod>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <UART_SetConfig+0x2d4>)
 8002ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	2164      	movs	r1, #100	; 0x64
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	3332      	adds	r3, #50	; 0x32
 8002aca:	4a08      	ldr	r2, [pc, #32]	; (8002aec <UART_SetConfig+0x2d4>)
 8002acc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad0:	095b      	lsrs	r3, r3, #5
 8002ad2:	f003 0207 	and.w	r2, r3, #7
 8002ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4422      	add	r2, r4
 8002ade:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ae0:	e106      	b.n	8002cf0 <UART_SetConfig+0x4d8>
 8002ae2:	bf00      	nop
 8002ae4:	40011000 	.word	0x40011000
 8002ae8:	40011400 	.word	0x40011400
 8002aec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002af4:	2200      	movs	r2, #0
 8002af6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002afa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002afe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002b02:	4642      	mov	r2, r8
 8002b04:	464b      	mov	r3, r9
 8002b06:	1891      	adds	r1, r2, r2
 8002b08:	6239      	str	r1, [r7, #32]
 8002b0a:	415b      	adcs	r3, r3
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b12:	4641      	mov	r1, r8
 8002b14:	1854      	adds	r4, r2, r1
 8002b16:	4649      	mov	r1, r9
 8002b18:	eb43 0501 	adc.w	r5, r3, r1
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	00eb      	lsls	r3, r5, #3
 8002b26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b2a:	00e2      	lsls	r2, r4, #3
 8002b2c:	4614      	mov	r4, r2
 8002b2e:	461d      	mov	r5, r3
 8002b30:	4643      	mov	r3, r8
 8002b32:	18e3      	adds	r3, r4, r3
 8002b34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b38:	464b      	mov	r3, r9
 8002b3a:	eb45 0303 	adc.w	r3, r5, r3
 8002b3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b5e:	4629      	mov	r1, r5
 8002b60:	008b      	lsls	r3, r1, #2
 8002b62:	4621      	mov	r1, r4
 8002b64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b68:	4621      	mov	r1, r4
 8002b6a:	008a      	lsls	r2, r1, #2
 8002b6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002b70:	f7fd fb4e 	bl	8000210 <__aeabi_uldivmod>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4b60      	ldr	r3, [pc, #384]	; (8002cfc <UART_SetConfig+0x4e4>)
 8002b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	011c      	lsls	r4, r3, #4
 8002b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b86:	2200      	movs	r2, #0
 8002b88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002b90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002b94:	4642      	mov	r2, r8
 8002b96:	464b      	mov	r3, r9
 8002b98:	1891      	adds	r1, r2, r2
 8002b9a:	61b9      	str	r1, [r7, #24]
 8002b9c:	415b      	adcs	r3, r3
 8002b9e:	61fb      	str	r3, [r7, #28]
 8002ba0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ba4:	4641      	mov	r1, r8
 8002ba6:	1851      	adds	r1, r2, r1
 8002ba8:	6139      	str	r1, [r7, #16]
 8002baa:	4649      	mov	r1, r9
 8002bac:	414b      	adcs	r3, r1
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bbc:	4659      	mov	r1, fp
 8002bbe:	00cb      	lsls	r3, r1, #3
 8002bc0:	4651      	mov	r1, sl
 8002bc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bc6:	4651      	mov	r1, sl
 8002bc8:	00ca      	lsls	r2, r1, #3
 8002bca:	4610      	mov	r0, r2
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4603      	mov	r3, r0
 8002bd0:	4642      	mov	r2, r8
 8002bd2:	189b      	adds	r3, r3, r2
 8002bd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bd8:	464b      	mov	r3, r9
 8002bda:	460a      	mov	r2, r1
 8002bdc:	eb42 0303 	adc.w	r3, r2, r3
 8002be0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002bfc:	4649      	mov	r1, r9
 8002bfe:	008b      	lsls	r3, r1, #2
 8002c00:	4641      	mov	r1, r8
 8002c02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c06:	4641      	mov	r1, r8
 8002c08:	008a      	lsls	r2, r1, #2
 8002c0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002c0e:	f7fd faff 	bl	8000210 <__aeabi_uldivmod>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4611      	mov	r1, r2
 8002c18:	4b38      	ldr	r3, [pc, #224]	; (8002cfc <UART_SetConfig+0x4e4>)
 8002c1a:	fba3 2301 	umull	r2, r3, r3, r1
 8002c1e:	095b      	lsrs	r3, r3, #5
 8002c20:	2264      	movs	r2, #100	; 0x64
 8002c22:	fb02 f303 	mul.w	r3, r2, r3
 8002c26:	1acb      	subs	r3, r1, r3
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	3332      	adds	r3, #50	; 0x32
 8002c2c:	4a33      	ldr	r2, [pc, #204]	; (8002cfc <UART_SetConfig+0x4e4>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c38:	441c      	add	r4, r3
 8002c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c3e:	2200      	movs	r2, #0
 8002c40:	673b      	str	r3, [r7, #112]	; 0x70
 8002c42:	677a      	str	r2, [r7, #116]	; 0x74
 8002c44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002c48:	4642      	mov	r2, r8
 8002c4a:	464b      	mov	r3, r9
 8002c4c:	1891      	adds	r1, r2, r2
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	415b      	adcs	r3, r3
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c58:	4641      	mov	r1, r8
 8002c5a:	1851      	adds	r1, r2, r1
 8002c5c:	6039      	str	r1, [r7, #0]
 8002c5e:	4649      	mov	r1, r9
 8002c60:	414b      	adcs	r3, r1
 8002c62:	607b      	str	r3, [r7, #4]
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c70:	4659      	mov	r1, fp
 8002c72:	00cb      	lsls	r3, r1, #3
 8002c74:	4651      	mov	r1, sl
 8002c76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c7a:	4651      	mov	r1, sl
 8002c7c:	00ca      	lsls	r2, r1, #3
 8002c7e:	4610      	mov	r0, r2
 8002c80:	4619      	mov	r1, r3
 8002c82:	4603      	mov	r3, r0
 8002c84:	4642      	mov	r2, r8
 8002c86:	189b      	adds	r3, r3, r2
 8002c88:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c8a:	464b      	mov	r3, r9
 8002c8c:	460a      	mov	r2, r1
 8002c8e:	eb42 0303 	adc.w	r3, r2, r3
 8002c92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	663b      	str	r3, [r7, #96]	; 0x60
 8002c9e:	667a      	str	r2, [r7, #100]	; 0x64
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002cac:	4649      	mov	r1, r9
 8002cae:	008b      	lsls	r3, r1, #2
 8002cb0:	4641      	mov	r1, r8
 8002cb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cb6:	4641      	mov	r1, r8
 8002cb8:	008a      	lsls	r2, r1, #2
 8002cba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002cbe:	f7fd faa7 	bl	8000210 <__aeabi_uldivmod>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4b0d      	ldr	r3, [pc, #52]	; (8002cfc <UART_SetConfig+0x4e4>)
 8002cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8002ccc:	095b      	lsrs	r3, r3, #5
 8002cce:	2164      	movs	r1, #100	; 0x64
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	3332      	adds	r3, #50	; 0x32
 8002cda:	4a08      	ldr	r2, [pc, #32]	; (8002cfc <UART_SetConfig+0x4e4>)
 8002cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce0:	095b      	lsrs	r3, r3, #5
 8002ce2:	f003 020f 	and.w	r2, r3, #15
 8002ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4422      	add	r2, r4
 8002cee:	609a      	str	r2, [r3, #8]
}
 8002cf0:	bf00      	nop
 8002cf2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cfc:	51eb851f 	.word	0x51eb851f

08002d00 <__NVIC_SetPriority>:
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	6039      	str	r1, [r7, #0]
 8002d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	db0a      	blt.n	8002d2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	490c      	ldr	r1, [pc, #48]	; (8002d4c <__NVIC_SetPriority+0x4c>)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	0112      	lsls	r2, r2, #4
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	440b      	add	r3, r1
 8002d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d28:	e00a      	b.n	8002d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	4908      	ldr	r1, [pc, #32]	; (8002d50 <__NVIC_SetPriority+0x50>)
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	3b04      	subs	r3, #4
 8002d38:	0112      	lsls	r2, r2, #4
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	761a      	strb	r2, [r3, #24]
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	e000e100 	.word	0xe000e100
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002d58:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <SysTick_Handler+0x1c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002d5c:	f001 fd28 	bl	80047b0 <xTaskGetSchedulerState>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d001      	beq.n	8002d6a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002d66:	f002 fb0f 	bl	8005388 <xPortSysTickHandler>
  }
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	e000e010 	.word	0xe000e010

08002d74 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002d78:	2100      	movs	r1, #0
 8002d7a:	f06f 0004 	mvn.w	r0, #4
 8002d7e:	f7ff ffbf 	bl	8002d00 <__NVIC_SetPriority>
#endif
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d8e:	f3ef 8305 	mrs	r3, IPSR
 8002d92:	603b      	str	r3, [r7, #0]
  return(result);
 8002d94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002d9a:	f06f 0305 	mvn.w	r3, #5
 8002d9e:	607b      	str	r3, [r7, #4]
 8002da0:	e00c      	b.n	8002dbc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002da2:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <osKernelInitialize+0x44>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d105      	bne.n	8002db6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002daa:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <osKernelInitialize+0x44>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	607b      	str	r3, [r7, #4]
 8002db4:	e002      	b.n	8002dbc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002dbc:	687b      	ldr	r3, [r7, #4]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	20000158 	.word	0x20000158

08002dd0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dd6:	f3ef 8305 	mrs	r3, IPSR
 8002dda:	603b      	str	r3, [r7, #0]
  return(result);
 8002ddc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <osKernelStart+0x1a>
    stat = osErrorISR;
 8002de2:	f06f 0305 	mvn.w	r3, #5
 8002de6:	607b      	str	r3, [r7, #4]
 8002de8:	e010      	b.n	8002e0c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002dea:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <osKernelStart+0x48>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d109      	bne.n	8002e06 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002df2:	f7ff ffbf 	bl	8002d74 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002df6:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <osKernelStart+0x48>)
 8002df8:	2202      	movs	r2, #2
 8002dfa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002dfc:	f001 f87c 	bl	8003ef8 <vTaskStartScheduler>
      stat = osOK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	607b      	str	r3, [r7, #4]
 8002e04:	e002      	b.n	8002e0c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002e0c:	687b      	ldr	r3, [r7, #4]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000158 	.word	0x20000158

08002e1c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08e      	sub	sp, #56	; 0x38
 8002e20:	af04      	add	r7, sp, #16
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e2c:	f3ef 8305 	mrs	r3, IPSR
 8002e30:	617b      	str	r3, [r7, #20]
  return(result);
 8002e32:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d17e      	bne.n	8002f36 <osThreadNew+0x11a>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d07b      	beq.n	8002f36 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002e3e:	2380      	movs	r3, #128	; 0x80
 8002e40:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002e42:	2318      	movs	r3, #24
 8002e44:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002e4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e4e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d045      	beq.n	8002ee2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <osThreadNew+0x48>
        name = attr->name;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d002      	beq.n	8002e72 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <osThreadNew+0x6e>
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	2b38      	cmp	r3, #56	; 0x38
 8002e7c:	d805      	bhi.n	8002e8a <osThreadNew+0x6e>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <osThreadNew+0x72>
        return (NULL);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	e054      	b.n	8002f38 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	089b      	lsrs	r3, r3, #2
 8002e9c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00e      	beq.n	8002ec4 <osThreadNew+0xa8>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2ba7      	cmp	r3, #167	; 0xa7
 8002eac:	d90a      	bls.n	8002ec4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d006      	beq.n	8002ec4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <osThreadNew+0xa8>
        mem = 1;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	61bb      	str	r3, [r7, #24]
 8002ec2:	e010      	b.n	8002ee6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10c      	bne.n	8002ee6 <osThreadNew+0xca>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d108      	bne.n	8002ee6 <osThreadNew+0xca>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d104      	bne.n	8002ee6 <osThreadNew+0xca>
          mem = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	61bb      	str	r3, [r7, #24]
 8002ee0:	e001      	b.n	8002ee6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d110      	bne.n	8002f0e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ef4:	9202      	str	r2, [sp, #8]
 8002ef6:	9301      	str	r3, [sp, #4]
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	6a3a      	ldr	r2, [r7, #32]
 8002f00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 fe0c 	bl	8003b20 <xTaskCreateStatic>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	e013      	b.n	8002f36 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d110      	bne.n	8002f36 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	f107 0310 	add.w	r3, r7, #16
 8002f1c:	9301      	str	r3, [sp, #4]
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 fe57 	bl	8003bda <xTaskCreate>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d001      	beq.n	8002f36 <osThreadNew+0x11a>
            hTask = NULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002f36:	693b      	ldr	r3, [r7, #16]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3728      	adds	r7, #40	; 0x28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f48:	f3ef 8305 	mrs	r3, IPSR
 8002f4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f4e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <osDelay+0x1c>
    stat = osErrorISR;
 8002f54:	f06f 0305 	mvn.w	r3, #5
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	e007      	b.n	8002f6c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 ff92 	bl	8003e90 <vTaskDelay>
    }
  }

  return (stat);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4a07      	ldr	r2, [pc, #28]	; (8002fa4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002f88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	4a06      	ldr	r2, [pc, #24]	; (8002fa8 <vApplicationGetIdleTaskMemory+0x30>)
 8002f8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2280      	movs	r2, #128	; 0x80
 8002f94:	601a      	str	r2, [r3, #0]
}
 8002f96:	bf00      	nop
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	2000015c 	.word	0x2000015c
 8002fa8:	20000204 	.word	0x20000204

08002fac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4a07      	ldr	r2, [pc, #28]	; (8002fd8 <vApplicationGetTimerTaskMemory+0x2c>)
 8002fbc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	4a06      	ldr	r2, [pc, #24]	; (8002fdc <vApplicationGetTimerTaskMemory+0x30>)
 8002fc2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fca:	601a      	str	r2, [r3, #0]
}
 8002fcc:	bf00      	nop
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	20000404 	.word	0x20000404
 8002fdc:	200004ac 	.word	0x200004ac

08002fe0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f103 0208 	add.w	r2, r3, #8
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ff8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f103 0208 	add.w	r2, r3, #8
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f103 0208 	add.w	r2, r3, #8
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800303a:	b480      	push	{r7}
 800303c:	b085      	sub	sp, #20
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	601a      	str	r2, [r3, #0]
}
 8003076:	bf00      	nop
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003082:	b480      	push	{r7}
 8003084:	b085      	sub	sp, #20
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003098:	d103      	bne.n	80030a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	e00c      	b.n	80030bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3308      	adds	r3, #8
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	e002      	b.n	80030b0 <vListInsert+0x2e>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d2f6      	bcs.n	80030aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	601a      	str	r2, [r3, #0]
}
 80030e8:	bf00      	nop
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6892      	ldr	r2, [r2, #8]
 800310a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6852      	ldr	r2, [r2, #4]
 8003114:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	429a      	cmp	r2, r3
 800311e:	d103      	bne.n	8003128 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	1e5a      	subs	r2, r3, #1
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10a      	bne.n	8003172 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800315c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003160:	f383 8811 	msr	BASEPRI, r3
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	f3bf 8f4f 	dsb	sy
 800316c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800316e:	bf00      	nop
 8003170:	e7fe      	b.n	8003170 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003172:	f002 f877 	bl	8005264 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317e:	68f9      	ldr	r1, [r7, #12]
 8003180:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003182:	fb01 f303 	mul.w	r3, r1, r3
 8003186:	441a      	add	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a2:	3b01      	subs	r3, #1
 80031a4:	68f9      	ldr	r1, [r7, #12]
 80031a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031a8:	fb01 f303 	mul.w	r3, r1, r3
 80031ac:	441a      	add	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	22ff      	movs	r2, #255	; 0xff
 80031b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	22ff      	movs	r2, #255	; 0xff
 80031be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d114      	bne.n	80031f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d01a      	beq.n	8003206 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	3310      	adds	r3, #16
 80031d4:	4618      	mov	r0, r3
 80031d6:	f001 f929 	bl	800442c <xTaskRemoveFromEventList>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d012      	beq.n	8003206 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80031e0:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <xQueueGenericReset+0xcc>)
 80031e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	f3bf 8f4f 	dsb	sy
 80031ec:	f3bf 8f6f 	isb	sy
 80031f0:	e009      	b.n	8003206 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	3310      	adds	r3, #16
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff fef2 	bl	8002fe0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	3324      	adds	r3, #36	; 0x24
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff feed 	bl	8002fe0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003206:	f002 f85d 	bl	80052c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800320a:	2301      	movs	r3, #1
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	e000ed04 	.word	0xe000ed04

08003218 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08e      	sub	sp, #56	; 0x38
 800321c:	af02      	add	r7, sp, #8
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
 8003224:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10a      	bne.n	8003242 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800322c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003230:	f383 8811 	msr	BASEPRI, r3
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800323e:	bf00      	nop
 8003240:	e7fe      	b.n	8003240 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10a      	bne.n	800325e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324c:	f383 8811 	msr	BASEPRI, r3
 8003250:	f3bf 8f6f 	isb	sy
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
}
 800325a:	bf00      	nop
 800325c:	e7fe      	b.n	800325c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <xQueueGenericCreateStatic+0x52>
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <xQueueGenericCreateStatic+0x56>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <xQueueGenericCreateStatic+0x58>
 800326e:	2300      	movs	r3, #0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10a      	bne.n	800328a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	623b      	str	r3, [r7, #32]
}
 8003286:	bf00      	nop
 8003288:	e7fe      	b.n	8003288 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d102      	bne.n	8003296 <xQueueGenericCreateStatic+0x7e>
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <xQueueGenericCreateStatic+0x82>
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <xQueueGenericCreateStatic+0x84>
 800329a:	2300      	movs	r3, #0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10a      	bne.n	80032b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80032a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a4:	f383 8811 	msr	BASEPRI, r3
 80032a8:	f3bf 8f6f 	isb	sy
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	61fb      	str	r3, [r7, #28]
}
 80032b2:	bf00      	nop
 80032b4:	e7fe      	b.n	80032b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80032b6:	2350      	movs	r3, #80	; 0x50
 80032b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2b50      	cmp	r3, #80	; 0x50
 80032be:	d00a      	beq.n	80032d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80032c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c4:	f383 8811 	msr	BASEPRI, r3
 80032c8:	f3bf 8f6f 	isb	sy
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	61bb      	str	r3, [r7, #24]
}
 80032d2:	bf00      	nop
 80032d4:	e7fe      	b.n	80032d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80032d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80032dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00d      	beq.n	80032fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80032e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80032ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80032ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	4613      	mov	r3, r2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	68b9      	ldr	r1, [r7, #8]
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 f805 	bl	8003308 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80032fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003300:	4618      	mov	r0, r3
 8003302:	3730      	adds	r7, #48	; 0x30
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d103      	bne.n	8003324 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	e002      	b.n	800332a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003336:	2101      	movs	r1, #1
 8003338:	69b8      	ldr	r0, [r7, #24]
 800333a:	f7ff ff05 	bl	8003148 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003346:	bf00      	nop
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08e      	sub	sp, #56	; 0x38
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800335e:	2300      	movs	r3, #0
 8003360:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10a      	bne.n	8003382 <xQueueGenericSend+0x32>
	__asm volatile
 800336c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003370:	f383 8811 	msr	BASEPRI, r3
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	f3bf 8f4f 	dsb	sy
 800337c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800337e:	bf00      	nop
 8003380:	e7fe      	b.n	8003380 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d103      	bne.n	8003390 <xQueueGenericSend+0x40>
 8003388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <xQueueGenericSend+0x44>
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <xQueueGenericSend+0x46>
 8003394:	2300      	movs	r3, #0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10a      	bne.n	80033b0 <xQueueGenericSend+0x60>
	__asm volatile
 800339a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339e:	f383 8811 	msr	BASEPRI, r3
 80033a2:	f3bf 8f6f 	isb	sy
 80033a6:	f3bf 8f4f 	dsb	sy
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80033ac:	bf00      	nop
 80033ae:	e7fe      	b.n	80033ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d103      	bne.n	80033be <xQueueGenericSend+0x6e>
 80033b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <xQueueGenericSend+0x72>
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <xQueueGenericSend+0x74>
 80033c2:	2300      	movs	r3, #0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10a      	bne.n	80033de <xQueueGenericSend+0x8e>
	__asm volatile
 80033c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033cc:	f383 8811 	msr	BASEPRI, r3
 80033d0:	f3bf 8f6f 	isb	sy
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	623b      	str	r3, [r7, #32]
}
 80033da:	bf00      	nop
 80033dc:	e7fe      	b.n	80033dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033de:	f001 f9e7 	bl	80047b0 <xTaskGetSchedulerState>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d102      	bne.n	80033ee <xQueueGenericSend+0x9e>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <xQueueGenericSend+0xa2>
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <xQueueGenericSend+0xa4>
 80033f2:	2300      	movs	r3, #0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10a      	bne.n	800340e <xQueueGenericSend+0xbe>
	__asm volatile
 80033f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fc:	f383 8811 	msr	BASEPRI, r3
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	61fb      	str	r3, [r7, #28]
}
 800340a:	bf00      	nop
 800340c:	e7fe      	b.n	800340c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800340e:	f001 ff29 	bl	8005264 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341a:	429a      	cmp	r2, r3
 800341c:	d302      	bcc.n	8003424 <xQueueGenericSend+0xd4>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b02      	cmp	r3, #2
 8003422:	d129      	bne.n	8003478 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	68b9      	ldr	r1, [r7, #8]
 8003428:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800342a:	f000 fa0b 	bl	8003844 <prvCopyDataToQueue>
 800342e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	2b00      	cmp	r3, #0
 8003436:	d010      	beq.n	800345a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	3324      	adds	r3, #36	; 0x24
 800343c:	4618      	mov	r0, r3
 800343e:	f000 fff5 	bl	800442c <xTaskRemoveFromEventList>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d013      	beq.n	8003470 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003448:	4b3f      	ldr	r3, [pc, #252]	; (8003548 <xQueueGenericSend+0x1f8>)
 800344a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	f3bf 8f4f 	dsb	sy
 8003454:	f3bf 8f6f 	isb	sy
 8003458:	e00a      	b.n	8003470 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800345a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345c:	2b00      	cmp	r3, #0
 800345e:	d007      	beq.n	8003470 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003460:	4b39      	ldr	r3, [pc, #228]	; (8003548 <xQueueGenericSend+0x1f8>)
 8003462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003470:	f001 ff28 	bl	80052c4 <vPortExitCritical>
				return pdPASS;
 8003474:	2301      	movs	r3, #1
 8003476:	e063      	b.n	8003540 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d103      	bne.n	8003486 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800347e:	f001 ff21 	bl	80052c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003482:	2300      	movs	r3, #0
 8003484:	e05c      	b.n	8003540 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003488:	2b00      	cmp	r3, #0
 800348a:	d106      	bne.n	800349a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800348c:	f107 0314 	add.w	r3, r7, #20
 8003490:	4618      	mov	r0, r3
 8003492:	f001 f82f 	bl	80044f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003496:	2301      	movs	r3, #1
 8003498:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800349a:	f001 ff13 	bl	80052c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800349e:	f000 fd9b 	bl	8003fd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034a2:	f001 fedf 	bl	8005264 <vPortEnterCritical>
 80034a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034ac:	b25b      	sxtb	r3, r3
 80034ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034b2:	d103      	bne.n	80034bc <xQueueGenericSend+0x16c>
 80034b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034c2:	b25b      	sxtb	r3, r3
 80034c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034c8:	d103      	bne.n	80034d2 <xQueueGenericSend+0x182>
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034d2:	f001 fef7 	bl	80052c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034d6:	1d3a      	adds	r2, r7, #4
 80034d8:	f107 0314 	add.w	r3, r7, #20
 80034dc:	4611      	mov	r1, r2
 80034de:	4618      	mov	r0, r3
 80034e0:	f001 f81e 	bl	8004520 <xTaskCheckForTimeOut>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d124      	bne.n	8003534 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034ec:	f000 faa2 	bl	8003a34 <prvIsQueueFull>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d018      	beq.n	8003528 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80034f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f8:	3310      	adds	r3, #16
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	4611      	mov	r1, r2
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 ff44 	bl	800438c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003504:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003506:	f000 fa2d 	bl	8003964 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800350a:	f000 fd73 	bl	8003ff4 <xTaskResumeAll>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	f47f af7c 	bne.w	800340e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003516:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <xQueueGenericSend+0x1f8>)
 8003518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	f3bf 8f6f 	isb	sy
 8003526:	e772      	b.n	800340e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003528:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800352a:	f000 fa1b 	bl	8003964 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800352e:	f000 fd61 	bl	8003ff4 <xTaskResumeAll>
 8003532:	e76c      	b.n	800340e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003536:	f000 fa15 	bl	8003964 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800353a:	f000 fd5b 	bl	8003ff4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800353e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003540:	4618      	mov	r0, r3
 8003542:	3738      	adds	r7, #56	; 0x38
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	e000ed04 	.word	0xe000ed04

0800354c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b090      	sub	sp, #64	; 0x40
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800355e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10a      	bne.n	800357a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003568:	f383 8811 	msr	BASEPRI, r3
 800356c:	f3bf 8f6f 	isb	sy
 8003570:	f3bf 8f4f 	dsb	sy
 8003574:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003576:	bf00      	nop
 8003578:	e7fe      	b.n	8003578 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d103      	bne.n	8003588 <xQueueGenericSendFromISR+0x3c>
 8003580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <xQueueGenericSendFromISR+0x40>
 8003588:	2301      	movs	r3, #1
 800358a:	e000      	b.n	800358e <xQueueGenericSendFromISR+0x42>
 800358c:	2300      	movs	r3, #0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10a      	bne.n	80035a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003596:	f383 8811 	msr	BASEPRI, r3
 800359a:	f3bf 8f6f 	isb	sy
 800359e:	f3bf 8f4f 	dsb	sy
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80035a4:	bf00      	nop
 80035a6:	e7fe      	b.n	80035a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d103      	bne.n	80035b6 <xQueueGenericSendFromISR+0x6a>
 80035ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <xQueueGenericSendFromISR+0x6e>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <xQueueGenericSendFromISR+0x70>
 80035ba:	2300      	movs	r3, #0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10a      	bne.n	80035d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80035c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c4:	f383 8811 	msr	BASEPRI, r3
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	623b      	str	r3, [r7, #32]
}
 80035d2:	bf00      	nop
 80035d4:	e7fe      	b.n	80035d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035d6:	f001 ff27 	bl	8005428 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80035da:	f3ef 8211 	mrs	r2, BASEPRI
 80035de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e2:	f383 8811 	msr	BASEPRI, r3
 80035e6:	f3bf 8f6f 	isb	sy
 80035ea:	f3bf 8f4f 	dsb	sy
 80035ee:	61fa      	str	r2, [r7, #28]
 80035f0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80035f2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80035f4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fe:	429a      	cmp	r2, r3
 8003600:	d302      	bcc.n	8003608 <xQueueGenericSendFromISR+0xbc>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b02      	cmp	r3, #2
 8003606:	d12f      	bne.n	8003668 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800360e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	68b9      	ldr	r1, [r7, #8]
 800361c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800361e:	f000 f911 	bl	8003844 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003622:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003626:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800362a:	d112      	bne.n	8003652 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800362c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	2b00      	cmp	r3, #0
 8003632:	d016      	beq.n	8003662 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003636:	3324      	adds	r3, #36	; 0x24
 8003638:	4618      	mov	r0, r3
 800363a:	f000 fef7 	bl	800442c <xTaskRemoveFromEventList>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00e      	beq.n	8003662 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00b      	beq.n	8003662 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	e007      	b.n	8003662 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003652:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003656:	3301      	adds	r3, #1
 8003658:	b2db      	uxtb	r3, r3
 800365a:	b25a      	sxtb	r2, r3
 800365c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003662:	2301      	movs	r3, #1
 8003664:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003666:	e001      	b.n	800366c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003668:	2300      	movs	r3, #0
 800366a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800366c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800366e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003676:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800367a:	4618      	mov	r0, r3
 800367c:	3740      	adds	r7, #64	; 0x40
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08c      	sub	sp, #48	; 0x30
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003690:	2300      	movs	r3, #0
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10a      	bne.n	80036b4 <xQueueReceive+0x30>
	__asm volatile
 800369e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a2:	f383 8811 	msr	BASEPRI, r3
 80036a6:	f3bf 8f6f 	isb	sy
 80036aa:	f3bf 8f4f 	dsb	sy
 80036ae:	623b      	str	r3, [r7, #32]
}
 80036b0:	bf00      	nop
 80036b2:	e7fe      	b.n	80036b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d103      	bne.n	80036c2 <xQueueReceive+0x3e>
 80036ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <xQueueReceive+0x42>
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <xQueueReceive+0x44>
 80036c6:	2300      	movs	r3, #0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10a      	bne.n	80036e2 <xQueueReceive+0x5e>
	__asm volatile
 80036cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d0:	f383 8811 	msr	BASEPRI, r3
 80036d4:	f3bf 8f6f 	isb	sy
 80036d8:	f3bf 8f4f 	dsb	sy
 80036dc:	61fb      	str	r3, [r7, #28]
}
 80036de:	bf00      	nop
 80036e0:	e7fe      	b.n	80036e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036e2:	f001 f865 	bl	80047b0 <xTaskGetSchedulerState>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d102      	bne.n	80036f2 <xQueueReceive+0x6e>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <xQueueReceive+0x72>
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <xQueueReceive+0x74>
 80036f6:	2300      	movs	r3, #0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10a      	bne.n	8003712 <xQueueReceive+0x8e>
	__asm volatile
 80036fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003700:	f383 8811 	msr	BASEPRI, r3
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	61bb      	str	r3, [r7, #24]
}
 800370e:	bf00      	nop
 8003710:	e7fe      	b.n	8003710 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003712:	f001 fda7 	bl	8005264 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	2b00      	cmp	r3, #0
 8003720:	d01f      	beq.n	8003762 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003722:	68b9      	ldr	r1, [r7, #8]
 8003724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003726:	f000 f8f7 	bl	8003918 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	1e5a      	subs	r2, r3, #1
 800372e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003730:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00f      	beq.n	800375a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373c:	3310      	adds	r3, #16
 800373e:	4618      	mov	r0, r3
 8003740:	f000 fe74 	bl	800442c <xTaskRemoveFromEventList>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d007      	beq.n	800375a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800374a:	4b3d      	ldr	r3, [pc, #244]	; (8003840 <xQueueReceive+0x1bc>)
 800374c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	f3bf 8f4f 	dsb	sy
 8003756:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800375a:	f001 fdb3 	bl	80052c4 <vPortExitCritical>
				return pdPASS;
 800375e:	2301      	movs	r3, #1
 8003760:	e069      	b.n	8003836 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d103      	bne.n	8003770 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003768:	f001 fdac 	bl	80052c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800376c:	2300      	movs	r3, #0
 800376e:	e062      	b.n	8003836 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003776:	f107 0310 	add.w	r3, r7, #16
 800377a:	4618      	mov	r0, r3
 800377c:	f000 feba 	bl	80044f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003780:	2301      	movs	r3, #1
 8003782:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003784:	f001 fd9e 	bl	80052c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003788:	f000 fc26 	bl	8003fd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800378c:	f001 fd6a 	bl	8005264 <vPortEnterCritical>
 8003790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003792:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003796:	b25b      	sxtb	r3, r3
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800379c:	d103      	bne.n	80037a6 <xQueueReceive+0x122>
 800379e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037ac:	b25b      	sxtb	r3, r3
 80037ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037b2:	d103      	bne.n	80037bc <xQueueReceive+0x138>
 80037b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037bc:	f001 fd82 	bl	80052c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037c0:	1d3a      	adds	r2, r7, #4
 80037c2:	f107 0310 	add.w	r3, r7, #16
 80037c6:	4611      	mov	r1, r2
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 fea9 	bl	8004520 <xTaskCheckForTimeOut>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d123      	bne.n	800381c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037d6:	f000 f917 	bl	8003a08 <prvIsQueueEmpty>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d017      	beq.n	8003810 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e2:	3324      	adds	r3, #36	; 0x24
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	4611      	mov	r1, r2
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 fdcf 	bl	800438c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80037ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037f0:	f000 f8b8 	bl	8003964 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80037f4:	f000 fbfe 	bl	8003ff4 <xTaskResumeAll>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d189      	bne.n	8003712 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80037fe:	4b10      	ldr	r3, [pc, #64]	; (8003840 <xQueueReceive+0x1bc>)
 8003800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	e780      	b.n	8003712 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003812:	f000 f8a7 	bl	8003964 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003816:	f000 fbed 	bl	8003ff4 <xTaskResumeAll>
 800381a:	e77a      	b.n	8003712 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800381c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800381e:	f000 f8a1 	bl	8003964 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003822:	f000 fbe7 	bl	8003ff4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003828:	f000 f8ee 	bl	8003a08 <prvIsQueueEmpty>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	f43f af6f 	beq.w	8003712 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003834:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003836:	4618      	mov	r0, r3
 8003838:	3730      	adds	r7, #48	; 0x30
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	e000ed04 	.word	0xe000ed04

08003844 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003858:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10d      	bne.n	800387e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d14d      	bne.n	8003906 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	4618      	mov	r0, r3
 8003870:	f000 ffbc 	bl	80047ec <xTaskPriorityDisinherit>
 8003874:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	e043      	b.n	8003906 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d119      	bne.n	80038b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6858      	ldr	r0, [r3, #4]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	461a      	mov	r2, r3
 800388e:	68b9      	ldr	r1, [r7, #8]
 8003890:	f002 f878 	bl	8005984 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	441a      	add	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d32b      	bcc.n	8003906 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	e026      	b.n	8003906 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	68d8      	ldr	r0, [r3, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	461a      	mov	r2, r3
 80038c2:	68b9      	ldr	r1, [r7, #8]
 80038c4:	f002 f85e 	bl	8005984 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	425b      	negs	r3, r3
 80038d2:	441a      	add	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d207      	bcs.n	80038f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	425b      	negs	r3, r3
 80038ee:	441a      	add	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d105      	bne.n	8003906 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	3b01      	subs	r3, #1
 8003904:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800390e:	697b      	ldr	r3, [r7, #20]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	2b00      	cmp	r3, #0
 8003928:	d018      	beq.n	800395c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	441a      	add	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	429a      	cmp	r2, r3
 8003942:	d303      	bcc.n	800394c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68d9      	ldr	r1, [r3, #12]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	461a      	mov	r2, r3
 8003956:	6838      	ldr	r0, [r7, #0]
 8003958:	f002 f814 	bl	8005984 <memcpy>
	}
}
 800395c:	bf00      	nop
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800396c:	f001 fc7a 	bl	8005264 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003976:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003978:	e011      	b.n	800399e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	2b00      	cmp	r3, #0
 8003980:	d012      	beq.n	80039a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	3324      	adds	r3, #36	; 0x24
 8003986:	4618      	mov	r0, r3
 8003988:	f000 fd50 	bl	800442c <xTaskRemoveFromEventList>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003992:	f000 fe27 	bl	80045e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	3b01      	subs	r3, #1
 800399a:	b2db      	uxtb	r3, r3
 800399c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800399e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	dce9      	bgt.n	800397a <prvUnlockQueue+0x16>
 80039a6:	e000      	b.n	80039aa <prvUnlockQueue+0x46>
					break;
 80039a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	22ff      	movs	r2, #255	; 0xff
 80039ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80039b2:	f001 fc87 	bl	80052c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80039b6:	f001 fc55 	bl	8005264 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039c2:	e011      	b.n	80039e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d012      	beq.n	80039f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3310      	adds	r3, #16
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fd2b 	bl	800442c <xTaskRemoveFromEventList>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80039dc:	f000 fe02 	bl	80045e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80039e0:	7bbb      	ldrb	r3, [r7, #14]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	dce9      	bgt.n	80039c4 <prvUnlockQueue+0x60>
 80039f0:	e000      	b.n	80039f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80039f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	22ff      	movs	r2, #255	; 0xff
 80039f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80039fc:	f001 fc62 	bl	80052c4 <vPortExitCritical>
}
 8003a00:	bf00      	nop
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a10:	f001 fc28 	bl	8005264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d102      	bne.n	8003a22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	e001      	b.n	8003a26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a22:	2300      	movs	r3, #0
 8003a24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a26:	f001 fc4d 	bl	80052c4 <vPortExitCritical>

	return xReturn;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a3c:	f001 fc12 	bl	8005264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d102      	bne.n	8003a52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	e001      	b.n	8003a56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a56:	f001 fc35 	bl	80052c4 <vPortExitCritical>

	return xReturn;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	e014      	b.n	8003a9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a74:	4a0f      	ldr	r2, [pc, #60]	; (8003ab4 <vQueueAddToRegistry+0x50>)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10b      	bne.n	8003a98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a80:	490c      	ldr	r1, [pc, #48]	; (8003ab4 <vQueueAddToRegistry+0x50>)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003a8a:	4a0a      	ldr	r2, [pc, #40]	; (8003ab4 <vQueueAddToRegistry+0x50>)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	4413      	add	r3, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003a96:	e006      	b.n	8003aa6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2b07      	cmp	r3, #7
 8003aa2:	d9e7      	bls.n	8003a74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	200008ac 	.word	0x200008ac

08003ab8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003ac8:	f001 fbcc 	bl	8005264 <vPortEnterCritical>
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ad2:	b25b      	sxtb	r3, r3
 8003ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ad8:	d103      	bne.n	8003ae2 <vQueueWaitForMessageRestricted+0x2a>
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ae8:	b25b      	sxtb	r3, r3
 8003aea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aee:	d103      	bne.n	8003af8 <vQueueWaitForMessageRestricted+0x40>
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003af8:	f001 fbe4 	bl	80052c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d106      	bne.n	8003b12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	3324      	adds	r3, #36	; 0x24
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	68b9      	ldr	r1, [r7, #8]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fc61 	bl	80043d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003b12:	6978      	ldr	r0, [r7, #20]
 8003b14:	f7ff ff26 	bl	8003964 <prvUnlockQueue>
	}
 8003b18:	bf00      	nop
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08e      	sub	sp, #56	; 0x38
 8003b24:	af04      	add	r7, sp, #16
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10a      	bne.n	8003b4a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b38:	f383 8811 	msr	BASEPRI, r3
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	f3bf 8f4f 	dsb	sy
 8003b44:	623b      	str	r3, [r7, #32]
}
 8003b46:	bf00      	nop
 8003b48:	e7fe      	b.n	8003b48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10a      	bne.n	8003b66 <xTaskCreateStatic+0x46>
	__asm volatile
 8003b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	61fb      	str	r3, [r7, #28]
}
 8003b62:	bf00      	nop
 8003b64:	e7fe      	b.n	8003b64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b66:	23a8      	movs	r3, #168	; 0xa8
 8003b68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	2ba8      	cmp	r3, #168	; 0xa8
 8003b6e:	d00a      	beq.n	8003b86 <xTaskCreateStatic+0x66>
	__asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	61bb      	str	r3, [r7, #24]
}
 8003b82:	bf00      	nop
 8003b84:	e7fe      	b.n	8003b84 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003b86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d01e      	beq.n	8003bcc <xTaskCreateStatic+0xac>
 8003b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01b      	beq.n	8003bcc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	9303      	str	r3, [sp, #12]
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	9302      	str	r3, [sp, #8]
 8003bae:	f107 0314 	add.w	r3, r7, #20
 8003bb2:	9301      	str	r3, [sp, #4]
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	68b9      	ldr	r1, [r7, #8]
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 f850 	bl	8003c64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003bc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bc6:	f000 f8f3 	bl	8003db0 <prvAddNewTaskToReadyList>
 8003bca:	e001      	b.n	8003bd0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003bd0:	697b      	ldr	r3, [r7, #20]
	}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3728      	adds	r7, #40	; 0x28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b08c      	sub	sp, #48	; 0x30
 8003bde:	af04      	add	r7, sp, #16
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	603b      	str	r3, [r7, #0]
 8003be6:	4613      	mov	r3, r2
 8003be8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003bea:	88fb      	ldrh	r3, [r7, #6]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f001 fc5a 	bl	80054a8 <pvPortMalloc>
 8003bf4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00e      	beq.n	8003c1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003bfc:	20a8      	movs	r0, #168	; 0xa8
 8003bfe:	f001 fc53 	bl	80054a8 <pvPortMalloc>
 8003c02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	631a      	str	r2, [r3, #48]	; 0x30
 8003c10:	e005      	b.n	8003c1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c12:	6978      	ldr	r0, [r7, #20]
 8003c14:	f001 fd14 	bl	8005640 <vPortFree>
 8003c18:	e001      	b.n	8003c1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d017      	beq.n	8003c54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c2c:	88fa      	ldrh	r2, [r7, #6]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	9303      	str	r3, [sp, #12]
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	9302      	str	r3, [sp, #8]
 8003c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c38:	9301      	str	r3, [sp, #4]
 8003c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68b9      	ldr	r1, [r7, #8]
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 f80e 	bl	8003c64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c48:	69f8      	ldr	r0, [r7, #28]
 8003c4a:	f000 f8b1 	bl	8003db0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	61bb      	str	r3, [r7, #24]
 8003c52:	e002      	b.n	8003c5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c5a:	69bb      	ldr	r3, [r7, #24]
	}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3720      	adds	r7, #32
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	21a5      	movs	r1, #165	; 0xa5
 8003c7e:	f001 fdfd 	bl	800587c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	f023 0307 	bic.w	r3, r3, #7
 8003c9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00a      	beq.n	8003cbc <prvInitialiseNewTask+0x58>
	__asm volatile
 8003ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003caa:	f383 8811 	msr	BASEPRI, r3
 8003cae:	f3bf 8f6f 	isb	sy
 8003cb2:	f3bf 8f4f 	dsb	sy
 8003cb6:	617b      	str	r3, [r7, #20]
}
 8003cb8:	bf00      	nop
 8003cba:	e7fe      	b.n	8003cba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d01f      	beq.n	8003d02 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
 8003cc6:	e012      	b.n	8003cee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	4413      	add	r3, r2
 8003cce:	7819      	ldrb	r1, [r3, #0]
 8003cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	3334      	adds	r3, #52	; 0x34
 8003cd8:	460a      	mov	r2, r1
 8003cda:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d006      	beq.n	8003cf6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	3301      	adds	r3, #1
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	2b0f      	cmp	r3, #15
 8003cf2:	d9e9      	bls.n	8003cc8 <prvInitialiseNewTask+0x64>
 8003cf4:	e000      	b.n	8003cf8 <prvInitialiseNewTask+0x94>
			{
				break;
 8003cf6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d00:	e003      	b.n	8003d0a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0c:	2b37      	cmp	r3, #55	; 0x37
 8003d0e:	d901      	bls.n	8003d14 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d10:	2337      	movs	r3, #55	; 0x37
 8003d12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d1e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d22:	2200      	movs	r2, #0
 8003d24:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d28:	3304      	adds	r3, #4
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff f978 	bl	8003020 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d32:	3318      	adds	r3, #24
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff f973 	bl	8003020 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d52:	2200      	movs	r2, #0
 8003d54:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d62:	3354      	adds	r3, #84	; 0x54
 8003d64:	224c      	movs	r2, #76	; 0x4c
 8003d66:	2100      	movs	r1, #0
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f001 fd87 	bl	800587c <memset>
 8003d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d70:	4a0c      	ldr	r2, [pc, #48]	; (8003da4 <prvInitialiseNewTask+0x140>)
 8003d72:	659a      	str	r2, [r3, #88]	; 0x58
 8003d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d76:	4a0c      	ldr	r2, [pc, #48]	; (8003da8 <prvInitialiseNewTask+0x144>)
 8003d78:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7c:	4a0b      	ldr	r2, [pc, #44]	; (8003dac <prvInitialiseNewTask+0x148>)
 8003d7e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	68f9      	ldr	r1, [r7, #12]
 8003d84:	69b8      	ldr	r0, [r7, #24]
 8003d86:	f001 f941 	bl	800500c <pxPortInitialiseStack>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d9c:	bf00      	nop
 8003d9e:	3720      	adds	r7, #32
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	20004b40 	.word	0x20004b40
 8003da8:	20004ba8 	.word	0x20004ba8
 8003dac:	20004c10 	.word	0x20004c10

08003db0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003db8:	f001 fa54 	bl	8005264 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003dbc:	4b2d      	ldr	r3, [pc, #180]	; (8003e74 <prvAddNewTaskToReadyList+0xc4>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	4a2c      	ldr	r2, [pc, #176]	; (8003e74 <prvAddNewTaskToReadyList+0xc4>)
 8003dc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003dc6:	4b2c      	ldr	r3, [pc, #176]	; (8003e78 <prvAddNewTaskToReadyList+0xc8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d109      	bne.n	8003de2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003dce:	4a2a      	ldr	r2, [pc, #168]	; (8003e78 <prvAddNewTaskToReadyList+0xc8>)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003dd4:	4b27      	ldr	r3, [pc, #156]	; (8003e74 <prvAddNewTaskToReadyList+0xc4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d110      	bne.n	8003dfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ddc:	f000 fc26 	bl	800462c <prvInitialiseTaskLists>
 8003de0:	e00d      	b.n	8003dfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003de2:	4b26      	ldr	r3, [pc, #152]	; (8003e7c <prvAddNewTaskToReadyList+0xcc>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d109      	bne.n	8003dfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003dea:	4b23      	ldr	r3, [pc, #140]	; (8003e78 <prvAddNewTaskToReadyList+0xc8>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d802      	bhi.n	8003dfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003df8:	4a1f      	ldr	r2, [pc, #124]	; (8003e78 <prvAddNewTaskToReadyList+0xc8>)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003dfe:	4b20      	ldr	r3, [pc, #128]	; (8003e80 <prvAddNewTaskToReadyList+0xd0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3301      	adds	r3, #1
 8003e04:	4a1e      	ldr	r2, [pc, #120]	; (8003e80 <prvAddNewTaskToReadyList+0xd0>)
 8003e06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e08:	4b1d      	ldr	r3, [pc, #116]	; (8003e80 <prvAddNewTaskToReadyList+0xd0>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e14:	4b1b      	ldr	r3, [pc, #108]	; (8003e84 <prvAddNewTaskToReadyList+0xd4>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d903      	bls.n	8003e24 <prvAddNewTaskToReadyList+0x74>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e20:	4a18      	ldr	r2, [pc, #96]	; (8003e84 <prvAddNewTaskToReadyList+0xd4>)
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4a15      	ldr	r2, [pc, #84]	; (8003e88 <prvAddNewTaskToReadyList+0xd8>)
 8003e32:	441a      	add	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3304      	adds	r3, #4
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4610      	mov	r0, r2
 8003e3c:	f7ff f8fd 	bl	800303a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e40:	f001 fa40 	bl	80052c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e44:	4b0d      	ldr	r3, [pc, #52]	; (8003e7c <prvAddNewTaskToReadyList+0xcc>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00e      	beq.n	8003e6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e4c:	4b0a      	ldr	r3, [pc, #40]	; (8003e78 <prvAddNewTaskToReadyList+0xc8>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d207      	bcs.n	8003e6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e5a:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <prvAddNewTaskToReadyList+0xdc>)
 8003e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	f3bf 8f4f 	dsb	sy
 8003e66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e6a:	bf00      	nop
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20000dc0 	.word	0x20000dc0
 8003e78:	200008ec 	.word	0x200008ec
 8003e7c:	20000dcc 	.word	0x20000dcc
 8003e80:	20000ddc 	.word	0x20000ddc
 8003e84:	20000dc8 	.word	0x20000dc8
 8003e88:	200008f0 	.word	0x200008f0
 8003e8c:	e000ed04 	.word	0xe000ed04

08003e90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d017      	beq.n	8003ed2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ea2:	4b13      	ldr	r3, [pc, #76]	; (8003ef0 <vTaskDelay+0x60>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <vTaskDelay+0x30>
	__asm volatile
 8003eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eae:	f383 8811 	msr	BASEPRI, r3
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	60bb      	str	r3, [r7, #8]
}
 8003ebc:	bf00      	nop
 8003ebe:	e7fe      	b.n	8003ebe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ec0:	f000 f88a 	bl	8003fd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fcfe 	bl	80048c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ecc:	f000 f892 	bl	8003ff4 <xTaskResumeAll>
 8003ed0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d107      	bne.n	8003ee8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003ed8:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <vTaskDelay+0x64>)
 8003eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ee8:	bf00      	nop
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	20000de8 	.word	0x20000de8
 8003ef4:	e000ed04 	.word	0xe000ed04

08003ef8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08a      	sub	sp, #40	; 0x28
 8003efc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f06:	463a      	mov	r2, r7
 8003f08:	1d39      	adds	r1, r7, #4
 8003f0a:	f107 0308 	add.w	r3, r7, #8
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff f832 	bl	8002f78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f14:	6839      	ldr	r1, [r7, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	9202      	str	r2, [sp, #8]
 8003f1c:	9301      	str	r3, [sp, #4]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	2300      	movs	r3, #0
 8003f24:	460a      	mov	r2, r1
 8003f26:	4924      	ldr	r1, [pc, #144]	; (8003fb8 <vTaskStartScheduler+0xc0>)
 8003f28:	4824      	ldr	r0, [pc, #144]	; (8003fbc <vTaskStartScheduler+0xc4>)
 8003f2a:	f7ff fdf9 	bl	8003b20 <xTaskCreateStatic>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	4a23      	ldr	r2, [pc, #140]	; (8003fc0 <vTaskStartScheduler+0xc8>)
 8003f32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f34:	4b22      	ldr	r3, [pc, #136]	; (8003fc0 <vTaskStartScheduler+0xc8>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	e001      	b.n	8003f46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d102      	bne.n	8003f52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003f4c:	f000 fd10 	bl	8004970 <xTimerCreateTimerTask>
 8003f50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d11b      	bne.n	8003f90 <vTaskStartScheduler+0x98>
	__asm volatile
 8003f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5c:	f383 8811 	msr	BASEPRI, r3
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	613b      	str	r3, [r7, #16]
}
 8003f6a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f6c:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <vTaskStartScheduler+0xcc>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3354      	adds	r3, #84	; 0x54
 8003f72:	4a15      	ldr	r2, [pc, #84]	; (8003fc8 <vTaskStartScheduler+0xd0>)
 8003f74:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f76:	4b15      	ldr	r3, [pc, #84]	; (8003fcc <vTaskStartScheduler+0xd4>)
 8003f78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f7e:	4b14      	ldr	r3, [pc, #80]	; (8003fd0 <vTaskStartScheduler+0xd8>)
 8003f80:	2201      	movs	r2, #1
 8003f82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f84:	4b13      	ldr	r3, [pc, #76]	; (8003fd4 <vTaskStartScheduler+0xdc>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f8a:	f001 f8c9 	bl	8005120 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f8e:	e00e      	b.n	8003fae <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f96:	d10a      	bne.n	8003fae <vTaskStartScheduler+0xb6>
	__asm volatile
 8003f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	60fb      	str	r3, [r7, #12]
}
 8003faa:	bf00      	nop
 8003fac:	e7fe      	b.n	8003fac <vTaskStartScheduler+0xb4>
}
 8003fae:	bf00      	nop
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	08005a9c 	.word	0x08005a9c
 8003fbc:	080045fd 	.word	0x080045fd
 8003fc0:	20000de4 	.word	0x20000de4
 8003fc4:	200008ec 	.word	0x200008ec
 8003fc8:	2000008c 	.word	0x2000008c
 8003fcc:	20000de0 	.word	0x20000de0
 8003fd0:	20000dcc 	.word	0x20000dcc
 8003fd4:	20000dc4 	.word	0x20000dc4

08003fd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003fdc:	4b04      	ldr	r3, [pc, #16]	; (8003ff0 <vTaskSuspendAll+0x18>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	4a03      	ldr	r2, [pc, #12]	; (8003ff0 <vTaskSuspendAll+0x18>)
 8003fe4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003fe6:	bf00      	nop
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	20000de8 	.word	0x20000de8

08003ff4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004002:	4b42      	ldr	r3, [pc, #264]	; (800410c <xTaskResumeAll+0x118>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10a      	bne.n	8004020 <xTaskResumeAll+0x2c>
	__asm volatile
 800400a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400e:	f383 8811 	msr	BASEPRI, r3
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	f3bf 8f4f 	dsb	sy
 800401a:	603b      	str	r3, [r7, #0]
}
 800401c:	bf00      	nop
 800401e:	e7fe      	b.n	800401e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004020:	f001 f920 	bl	8005264 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004024:	4b39      	ldr	r3, [pc, #228]	; (800410c <xTaskResumeAll+0x118>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3b01      	subs	r3, #1
 800402a:	4a38      	ldr	r2, [pc, #224]	; (800410c <xTaskResumeAll+0x118>)
 800402c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800402e:	4b37      	ldr	r3, [pc, #220]	; (800410c <xTaskResumeAll+0x118>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d162      	bne.n	80040fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004036:	4b36      	ldr	r3, [pc, #216]	; (8004110 <xTaskResumeAll+0x11c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d05e      	beq.n	80040fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800403e:	e02f      	b.n	80040a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004040:	4b34      	ldr	r3, [pc, #208]	; (8004114 <xTaskResumeAll+0x120>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	3318      	adds	r3, #24
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff f851 	bl	80030f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	3304      	adds	r3, #4
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff f84c 	bl	80030f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004060:	4b2d      	ldr	r3, [pc, #180]	; (8004118 <xTaskResumeAll+0x124>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d903      	bls.n	8004070 <xTaskResumeAll+0x7c>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	4a2a      	ldr	r2, [pc, #168]	; (8004118 <xTaskResumeAll+0x124>)
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004074:	4613      	mov	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4a27      	ldr	r2, [pc, #156]	; (800411c <xTaskResumeAll+0x128>)
 800407e:	441a      	add	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3304      	adds	r3, #4
 8004084:	4619      	mov	r1, r3
 8004086:	4610      	mov	r0, r2
 8004088:	f7fe ffd7 	bl	800303a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004090:	4b23      	ldr	r3, [pc, #140]	; (8004120 <xTaskResumeAll+0x12c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	429a      	cmp	r2, r3
 8004098:	d302      	bcc.n	80040a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800409a:	4b22      	ldr	r3, [pc, #136]	; (8004124 <xTaskResumeAll+0x130>)
 800409c:	2201      	movs	r2, #1
 800409e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040a0:	4b1c      	ldr	r3, [pc, #112]	; (8004114 <xTaskResumeAll+0x120>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1cb      	bne.n	8004040 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80040ae:	f000 fb5f 	bl	8004770 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80040b2:	4b1d      	ldr	r3, [pc, #116]	; (8004128 <xTaskResumeAll+0x134>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d010      	beq.n	80040e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80040be:	f000 f847 	bl	8004150 <xTaskIncrementTick>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80040c8:	4b16      	ldr	r3, [pc, #88]	; (8004124 <xTaskResumeAll+0x130>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f1      	bne.n	80040be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80040da:	4b13      	ldr	r3, [pc, #76]	; (8004128 <xTaskResumeAll+0x134>)
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80040e0:	4b10      	ldr	r3, [pc, #64]	; (8004124 <xTaskResumeAll+0x130>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d009      	beq.n	80040fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80040e8:	2301      	movs	r3, #1
 80040ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80040ec:	4b0f      	ldr	r3, [pc, #60]	; (800412c <xTaskResumeAll+0x138>)
 80040ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040fc:	f001 f8e2 	bl	80052c4 <vPortExitCritical>

	return xAlreadyYielded;
 8004100:	68bb      	ldr	r3, [r7, #8]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000de8 	.word	0x20000de8
 8004110:	20000dc0 	.word	0x20000dc0
 8004114:	20000d80 	.word	0x20000d80
 8004118:	20000dc8 	.word	0x20000dc8
 800411c:	200008f0 	.word	0x200008f0
 8004120:	200008ec 	.word	0x200008ec
 8004124:	20000dd4 	.word	0x20000dd4
 8004128:	20000dd0 	.word	0x20000dd0
 800412c:	e000ed04 	.word	0xe000ed04

08004130 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004136:	4b05      	ldr	r3, [pc, #20]	; (800414c <xTaskGetTickCount+0x1c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800413c:	687b      	ldr	r3, [r7, #4]
}
 800413e:	4618      	mov	r0, r3
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	20000dc4 	.word	0x20000dc4

08004150 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800415a:	4b4f      	ldr	r3, [pc, #316]	; (8004298 <xTaskIncrementTick+0x148>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	f040 808f 	bne.w	8004282 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004164:	4b4d      	ldr	r3, [pc, #308]	; (800429c <xTaskIncrementTick+0x14c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3301      	adds	r3, #1
 800416a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800416c:	4a4b      	ldr	r2, [pc, #300]	; (800429c <xTaskIncrementTick+0x14c>)
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d120      	bne.n	80041ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004178:	4b49      	ldr	r3, [pc, #292]	; (80042a0 <xTaskIncrementTick+0x150>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <xTaskIncrementTick+0x48>
	__asm volatile
 8004182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	603b      	str	r3, [r7, #0]
}
 8004194:	bf00      	nop
 8004196:	e7fe      	b.n	8004196 <xTaskIncrementTick+0x46>
 8004198:	4b41      	ldr	r3, [pc, #260]	; (80042a0 <xTaskIncrementTick+0x150>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	4b41      	ldr	r3, [pc, #260]	; (80042a4 <xTaskIncrementTick+0x154>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a3f      	ldr	r2, [pc, #252]	; (80042a0 <xTaskIncrementTick+0x150>)
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	4a3f      	ldr	r2, [pc, #252]	; (80042a4 <xTaskIncrementTick+0x154>)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	4b3e      	ldr	r3, [pc, #248]	; (80042a8 <xTaskIncrementTick+0x158>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3301      	adds	r3, #1
 80041b2:	4a3d      	ldr	r2, [pc, #244]	; (80042a8 <xTaskIncrementTick+0x158>)
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	f000 fadb 	bl	8004770 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80041ba:	4b3c      	ldr	r3, [pc, #240]	; (80042ac <xTaskIncrementTick+0x15c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d349      	bcc.n	8004258 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041c4:	4b36      	ldr	r3, [pc, #216]	; (80042a0 <xTaskIncrementTick+0x150>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d104      	bne.n	80041d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041ce:	4b37      	ldr	r3, [pc, #220]	; (80042ac <xTaskIncrementTick+0x15c>)
 80041d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041d4:	601a      	str	r2, [r3, #0]
					break;
 80041d6:	e03f      	b.n	8004258 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041d8:	4b31      	ldr	r3, [pc, #196]	; (80042a0 <xTaskIncrementTick+0x150>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d203      	bcs.n	80041f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80041f0:	4a2e      	ldr	r2, [pc, #184]	; (80042ac <xTaskIncrementTick+0x15c>)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80041f6:	e02f      	b.n	8004258 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	3304      	adds	r3, #4
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fe ff79 	bl	80030f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004206:	2b00      	cmp	r3, #0
 8004208:	d004      	beq.n	8004214 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	3318      	adds	r3, #24
 800420e:	4618      	mov	r0, r3
 8004210:	f7fe ff70 	bl	80030f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004218:	4b25      	ldr	r3, [pc, #148]	; (80042b0 <xTaskIncrementTick+0x160>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d903      	bls.n	8004228 <xTaskIncrementTick+0xd8>
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	4a22      	ldr	r2, [pc, #136]	; (80042b0 <xTaskIncrementTick+0x160>)
 8004226:	6013      	str	r3, [r2, #0]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422c:	4613      	mov	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4a1f      	ldr	r2, [pc, #124]	; (80042b4 <xTaskIncrementTick+0x164>)
 8004236:	441a      	add	r2, r3
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	3304      	adds	r3, #4
 800423c:	4619      	mov	r1, r3
 800423e:	4610      	mov	r0, r2
 8004240:	f7fe fefb 	bl	800303a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004248:	4b1b      	ldr	r3, [pc, #108]	; (80042b8 <xTaskIncrementTick+0x168>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424e:	429a      	cmp	r2, r3
 8004250:	d3b8      	bcc.n	80041c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004252:	2301      	movs	r3, #1
 8004254:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004256:	e7b5      	b.n	80041c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004258:	4b17      	ldr	r3, [pc, #92]	; (80042b8 <xTaskIncrementTick+0x168>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800425e:	4915      	ldr	r1, [pc, #84]	; (80042b4 <xTaskIncrementTick+0x164>)
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	440b      	add	r3, r1
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d901      	bls.n	8004274 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004270:	2301      	movs	r3, #1
 8004272:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004274:	4b11      	ldr	r3, [pc, #68]	; (80042bc <xTaskIncrementTick+0x16c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d007      	beq.n	800428c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800427c:	2301      	movs	r3, #1
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	e004      	b.n	800428c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004282:	4b0f      	ldr	r3, [pc, #60]	; (80042c0 <xTaskIncrementTick+0x170>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3301      	adds	r3, #1
 8004288:	4a0d      	ldr	r2, [pc, #52]	; (80042c0 <xTaskIncrementTick+0x170>)
 800428a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800428c:	697b      	ldr	r3, [r7, #20]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	20000de8 	.word	0x20000de8
 800429c:	20000dc4 	.word	0x20000dc4
 80042a0:	20000d78 	.word	0x20000d78
 80042a4:	20000d7c 	.word	0x20000d7c
 80042a8:	20000dd8 	.word	0x20000dd8
 80042ac:	20000de0 	.word	0x20000de0
 80042b0:	20000dc8 	.word	0x20000dc8
 80042b4:	200008f0 	.word	0x200008f0
 80042b8:	200008ec 	.word	0x200008ec
 80042bc:	20000dd4 	.word	0x20000dd4
 80042c0:	20000dd0 	.word	0x20000dd0

080042c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042ca:	4b2a      	ldr	r3, [pc, #168]	; (8004374 <vTaskSwitchContext+0xb0>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80042d2:	4b29      	ldr	r3, [pc, #164]	; (8004378 <vTaskSwitchContext+0xb4>)
 80042d4:	2201      	movs	r2, #1
 80042d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80042d8:	e046      	b.n	8004368 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80042da:	4b27      	ldr	r3, [pc, #156]	; (8004378 <vTaskSwitchContext+0xb4>)
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042e0:	4b26      	ldr	r3, [pc, #152]	; (800437c <vTaskSwitchContext+0xb8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	60fb      	str	r3, [r7, #12]
 80042e6:	e010      	b.n	800430a <vTaskSwitchContext+0x46>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10a      	bne.n	8004304 <vTaskSwitchContext+0x40>
	__asm volatile
 80042ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	607b      	str	r3, [r7, #4]
}
 8004300:	bf00      	nop
 8004302:	e7fe      	b.n	8004302 <vTaskSwitchContext+0x3e>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	3b01      	subs	r3, #1
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	491d      	ldr	r1, [pc, #116]	; (8004380 <vTaskSwitchContext+0xbc>)
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	440b      	add	r3, r1
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0e4      	beq.n	80042e8 <vTaskSwitchContext+0x24>
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4613      	mov	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4a15      	ldr	r2, [pc, #84]	; (8004380 <vTaskSwitchContext+0xbc>)
 800432a:	4413      	add	r3, r2
 800432c:	60bb      	str	r3, [r7, #8]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	605a      	str	r2, [r3, #4]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	3308      	adds	r3, #8
 8004340:	429a      	cmp	r2, r3
 8004342:	d104      	bne.n	800434e <vTaskSwitchContext+0x8a>
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	605a      	str	r2, [r3, #4]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	4a0b      	ldr	r2, [pc, #44]	; (8004384 <vTaskSwitchContext+0xc0>)
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	4a08      	ldr	r2, [pc, #32]	; (800437c <vTaskSwitchContext+0xb8>)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800435e:	4b09      	ldr	r3, [pc, #36]	; (8004384 <vTaskSwitchContext+0xc0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3354      	adds	r3, #84	; 0x54
 8004364:	4a08      	ldr	r2, [pc, #32]	; (8004388 <vTaskSwitchContext+0xc4>)
 8004366:	6013      	str	r3, [r2, #0]
}
 8004368:	bf00      	nop
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	20000de8 	.word	0x20000de8
 8004378:	20000dd4 	.word	0x20000dd4
 800437c:	20000dc8 	.word	0x20000dc8
 8004380:	200008f0 	.word	0x200008f0
 8004384:	200008ec 	.word	0x200008ec
 8004388:	2000008c 	.word	0x2000008c

0800438c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10a      	bne.n	80043b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800439c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a0:	f383 8811 	msr	BASEPRI, r3
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	60fb      	str	r3, [r7, #12]
}
 80043ae:	bf00      	nop
 80043b0:	e7fe      	b.n	80043b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043b2:	4b07      	ldr	r3, [pc, #28]	; (80043d0 <vTaskPlaceOnEventList+0x44>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	3318      	adds	r3, #24
 80043b8:	4619      	mov	r1, r3
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7fe fe61 	bl	8003082 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80043c0:	2101      	movs	r1, #1
 80043c2:	6838      	ldr	r0, [r7, #0]
 80043c4:	f000 fa80 	bl	80048c8 <prvAddCurrentTaskToDelayedList>
}
 80043c8:	bf00      	nop
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	200008ec 	.word	0x200008ec

080043d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10a      	bne.n	80043fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80043e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ea:	f383 8811 	msr	BASEPRI, r3
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	617b      	str	r3, [r7, #20]
}
 80043f8:	bf00      	nop
 80043fa:	e7fe      	b.n	80043fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043fc:	4b0a      	ldr	r3, [pc, #40]	; (8004428 <vTaskPlaceOnEventListRestricted+0x54>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3318      	adds	r3, #24
 8004402:	4619      	mov	r1, r3
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f7fe fe18 	bl	800303a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004414:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	68b8      	ldr	r0, [r7, #8]
 800441a:	f000 fa55 	bl	80048c8 <prvAddCurrentTaskToDelayedList>
	}
 800441e:	bf00      	nop
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	200008ec 	.word	0x200008ec

0800442c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10a      	bne.n	8004458 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	60fb      	str	r3, [r7, #12]
}
 8004454:	bf00      	nop
 8004456:	e7fe      	b.n	8004456 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	3318      	adds	r3, #24
 800445c:	4618      	mov	r0, r3
 800445e:	f7fe fe49 	bl	80030f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004462:	4b1e      	ldr	r3, [pc, #120]	; (80044dc <xTaskRemoveFromEventList+0xb0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d11d      	bne.n	80044a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	3304      	adds	r3, #4
 800446e:	4618      	mov	r0, r3
 8004470:	f7fe fe40 	bl	80030f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004478:	4b19      	ldr	r3, [pc, #100]	; (80044e0 <xTaskRemoveFromEventList+0xb4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	429a      	cmp	r2, r3
 800447e:	d903      	bls.n	8004488 <xTaskRemoveFromEventList+0x5c>
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	4a16      	ldr	r2, [pc, #88]	; (80044e0 <xTaskRemoveFromEventList+0xb4>)
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800448c:	4613      	mov	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4a13      	ldr	r2, [pc, #76]	; (80044e4 <xTaskRemoveFromEventList+0xb8>)
 8004496:	441a      	add	r2, r3
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	3304      	adds	r3, #4
 800449c:	4619      	mov	r1, r3
 800449e:	4610      	mov	r0, r2
 80044a0:	f7fe fdcb 	bl	800303a <vListInsertEnd>
 80044a4:	e005      	b.n	80044b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	3318      	adds	r3, #24
 80044aa:	4619      	mov	r1, r3
 80044ac:	480e      	ldr	r0, [pc, #56]	; (80044e8 <xTaskRemoveFromEventList+0xbc>)
 80044ae:	f7fe fdc4 	bl	800303a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b6:	4b0d      	ldr	r3, [pc, #52]	; (80044ec <xTaskRemoveFromEventList+0xc0>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	429a      	cmp	r2, r3
 80044be:	d905      	bls.n	80044cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80044c0:	2301      	movs	r3, #1
 80044c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80044c4:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <xTaskRemoveFromEventList+0xc4>)
 80044c6:	2201      	movs	r2, #1
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	e001      	b.n	80044d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80044d0:	697b      	ldr	r3, [r7, #20]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20000de8 	.word	0x20000de8
 80044e0:	20000dc8 	.word	0x20000dc8
 80044e4:	200008f0 	.word	0x200008f0
 80044e8:	20000d80 	.word	0x20000d80
 80044ec:	200008ec 	.word	0x200008ec
 80044f0:	20000dd4 	.word	0x20000dd4

080044f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044fc:	4b06      	ldr	r3, [pc, #24]	; (8004518 <vTaskInternalSetTimeOutState+0x24>)
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <vTaskInternalSetTimeOutState+0x28>)
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	605a      	str	r2, [r3, #4]
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	20000dd8 	.word	0x20000dd8
 800451c:	20000dc4 	.word	0x20000dc4

08004520 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10a      	bne.n	8004546 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	613b      	str	r3, [r7, #16]
}
 8004542:	bf00      	nop
 8004544:	e7fe      	b.n	8004544 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10a      	bne.n	8004562 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	60fb      	str	r3, [r7, #12]
}
 800455e:	bf00      	nop
 8004560:	e7fe      	b.n	8004560 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004562:	f000 fe7f 	bl	8005264 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004566:	4b1d      	ldr	r3, [pc, #116]	; (80045dc <xTaskCheckForTimeOut+0xbc>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800457e:	d102      	bne.n	8004586 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004580:	2300      	movs	r3, #0
 8004582:	61fb      	str	r3, [r7, #28]
 8004584:	e023      	b.n	80045ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	4b15      	ldr	r3, [pc, #84]	; (80045e0 <xTaskCheckForTimeOut+0xc0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d007      	beq.n	80045a2 <xTaskCheckForTimeOut+0x82>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	429a      	cmp	r2, r3
 800459a:	d302      	bcc.n	80045a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800459c:	2301      	movs	r3, #1
 800459e:	61fb      	str	r3, [r7, #28]
 80045a0:	e015      	b.n	80045ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d20b      	bcs.n	80045c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	1ad2      	subs	r2, r2, r3
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff ff9b 	bl	80044f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80045be:	2300      	movs	r3, #0
 80045c0:	61fb      	str	r3, [r7, #28]
 80045c2:	e004      	b.n	80045ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	2200      	movs	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80045ca:	2301      	movs	r3, #1
 80045cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80045ce:	f000 fe79 	bl	80052c4 <vPortExitCritical>

	return xReturn;
 80045d2:	69fb      	ldr	r3, [r7, #28]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3720      	adds	r7, #32
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	20000dc4 	.word	0x20000dc4
 80045e0:	20000dd8 	.word	0x20000dd8

080045e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80045e8:	4b03      	ldr	r3, [pc, #12]	; (80045f8 <vTaskMissedYield+0x14>)
 80045ea:	2201      	movs	r2, #1
 80045ec:	601a      	str	r2, [r3, #0]
}
 80045ee:	bf00      	nop
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	20000dd4 	.word	0x20000dd4

080045fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004604:	f000 f852 	bl	80046ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004608:	4b06      	ldr	r3, [pc, #24]	; (8004624 <prvIdleTask+0x28>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d9f9      	bls.n	8004604 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004610:	4b05      	ldr	r3, [pc, #20]	; (8004628 <prvIdleTask+0x2c>)
 8004612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004620:	e7f0      	b.n	8004604 <prvIdleTask+0x8>
 8004622:	bf00      	nop
 8004624:	200008f0 	.word	0x200008f0
 8004628:	e000ed04 	.word	0xe000ed04

0800462c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004632:	2300      	movs	r3, #0
 8004634:	607b      	str	r3, [r7, #4]
 8004636:	e00c      	b.n	8004652 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	4613      	mov	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4a12      	ldr	r2, [pc, #72]	; (800468c <prvInitialiseTaskLists+0x60>)
 8004644:	4413      	add	r3, r2
 8004646:	4618      	mov	r0, r3
 8004648:	f7fe fcca 	bl	8002fe0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3301      	adds	r3, #1
 8004650:	607b      	str	r3, [r7, #4]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b37      	cmp	r3, #55	; 0x37
 8004656:	d9ef      	bls.n	8004638 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004658:	480d      	ldr	r0, [pc, #52]	; (8004690 <prvInitialiseTaskLists+0x64>)
 800465a:	f7fe fcc1 	bl	8002fe0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800465e:	480d      	ldr	r0, [pc, #52]	; (8004694 <prvInitialiseTaskLists+0x68>)
 8004660:	f7fe fcbe 	bl	8002fe0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004664:	480c      	ldr	r0, [pc, #48]	; (8004698 <prvInitialiseTaskLists+0x6c>)
 8004666:	f7fe fcbb 	bl	8002fe0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800466a:	480c      	ldr	r0, [pc, #48]	; (800469c <prvInitialiseTaskLists+0x70>)
 800466c:	f7fe fcb8 	bl	8002fe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004670:	480b      	ldr	r0, [pc, #44]	; (80046a0 <prvInitialiseTaskLists+0x74>)
 8004672:	f7fe fcb5 	bl	8002fe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004676:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <prvInitialiseTaskLists+0x78>)
 8004678:	4a05      	ldr	r2, [pc, #20]	; (8004690 <prvInitialiseTaskLists+0x64>)
 800467a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800467c:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <prvInitialiseTaskLists+0x7c>)
 800467e:	4a05      	ldr	r2, [pc, #20]	; (8004694 <prvInitialiseTaskLists+0x68>)
 8004680:	601a      	str	r2, [r3, #0]
}
 8004682:	bf00      	nop
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	200008f0 	.word	0x200008f0
 8004690:	20000d50 	.word	0x20000d50
 8004694:	20000d64 	.word	0x20000d64
 8004698:	20000d80 	.word	0x20000d80
 800469c:	20000d94 	.word	0x20000d94
 80046a0:	20000dac 	.word	0x20000dac
 80046a4:	20000d78 	.word	0x20000d78
 80046a8:	20000d7c 	.word	0x20000d7c

080046ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046b2:	e019      	b.n	80046e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80046b4:	f000 fdd6 	bl	8005264 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046b8:	4b10      	ldr	r3, [pc, #64]	; (80046fc <prvCheckTasksWaitingTermination+0x50>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3304      	adds	r3, #4
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7fe fd15 	bl	80030f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80046ca:	4b0d      	ldr	r3, [pc, #52]	; (8004700 <prvCheckTasksWaitingTermination+0x54>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	4a0b      	ldr	r2, [pc, #44]	; (8004700 <prvCheckTasksWaitingTermination+0x54>)
 80046d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80046d4:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <prvCheckTasksWaitingTermination+0x58>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	3b01      	subs	r3, #1
 80046da:	4a0a      	ldr	r2, [pc, #40]	; (8004704 <prvCheckTasksWaitingTermination+0x58>)
 80046dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80046de:	f000 fdf1 	bl	80052c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f810 	bl	8004708 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046e8:	4b06      	ldr	r3, [pc, #24]	; (8004704 <prvCheckTasksWaitingTermination+0x58>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e1      	bne.n	80046b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80046f0:	bf00      	nop
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	20000d94 	.word	0x20000d94
 8004700:	20000dc0 	.word	0x20000dc0
 8004704:	20000da8 	.word	0x20000da8

08004708 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3354      	adds	r3, #84	; 0x54
 8004714:	4618      	mov	r0, r3
 8004716:	f001 f8b9 	bl	800588c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004720:	2b00      	cmp	r3, #0
 8004722:	d108      	bne.n	8004736 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004728:	4618      	mov	r0, r3
 800472a:	f000 ff89 	bl	8005640 <vPortFree>
				vPortFree( pxTCB );
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 ff86 	bl	8005640 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004734:	e018      	b.n	8004768 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800473c:	2b01      	cmp	r3, #1
 800473e:	d103      	bne.n	8004748 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 ff7d 	bl	8005640 <vPortFree>
	}
 8004746:	e00f      	b.n	8004768 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800474e:	2b02      	cmp	r3, #2
 8004750:	d00a      	beq.n	8004768 <prvDeleteTCB+0x60>
	__asm volatile
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	60fb      	str	r3, [r7, #12]
}
 8004764:	bf00      	nop
 8004766:	e7fe      	b.n	8004766 <prvDeleteTCB+0x5e>
	}
 8004768:	bf00      	nop
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004776:	4b0c      	ldr	r3, [pc, #48]	; (80047a8 <prvResetNextTaskUnblockTime+0x38>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d104      	bne.n	800478a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004780:	4b0a      	ldr	r3, [pc, #40]	; (80047ac <prvResetNextTaskUnblockTime+0x3c>)
 8004782:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004786:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004788:	e008      	b.n	800479c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800478a:	4b07      	ldr	r3, [pc, #28]	; (80047a8 <prvResetNextTaskUnblockTime+0x38>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	4a04      	ldr	r2, [pc, #16]	; (80047ac <prvResetNextTaskUnblockTime+0x3c>)
 800479a:	6013      	str	r3, [r2, #0]
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	20000d78 	.word	0x20000d78
 80047ac:	20000de0 	.word	0x20000de0

080047b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80047b6:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <xTaskGetSchedulerState+0x34>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d102      	bne.n	80047c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80047be:	2301      	movs	r3, #1
 80047c0:	607b      	str	r3, [r7, #4]
 80047c2:	e008      	b.n	80047d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047c4:	4b08      	ldr	r3, [pc, #32]	; (80047e8 <xTaskGetSchedulerState+0x38>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d102      	bne.n	80047d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80047cc:	2302      	movs	r3, #2
 80047ce:	607b      	str	r3, [r7, #4]
 80047d0:	e001      	b.n	80047d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80047d2:	2300      	movs	r3, #0
 80047d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80047d6:	687b      	ldr	r3, [r7, #4]
	}
 80047d8:	4618      	mov	r0, r3
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	20000dcc 	.word	0x20000dcc
 80047e8:	20000de8 	.word	0x20000de8

080047ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80047f8:	2300      	movs	r3, #0
 80047fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d056      	beq.n	80048b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004802:	4b2e      	ldr	r3, [pc, #184]	; (80048bc <xTaskPriorityDisinherit+0xd0>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	429a      	cmp	r2, r3
 800480a:	d00a      	beq.n	8004822 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800480c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004810:	f383 8811 	msr	BASEPRI, r3
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	60fb      	str	r3, [r7, #12]
}
 800481e:	bf00      	nop
 8004820:	e7fe      	b.n	8004820 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10a      	bne.n	8004840 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800482a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482e:	f383 8811 	msr	BASEPRI, r3
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	60bb      	str	r3, [r7, #8]
}
 800483c:	bf00      	nop
 800483e:	e7fe      	b.n	800483e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004844:	1e5a      	subs	r2, r3, #1
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004852:	429a      	cmp	r2, r3
 8004854:	d02c      	beq.n	80048b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800485a:	2b00      	cmp	r3, #0
 800485c:	d128      	bne.n	80048b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	3304      	adds	r3, #4
 8004862:	4618      	mov	r0, r3
 8004864:	f7fe fc46 	bl	80030f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004874:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004880:	4b0f      	ldr	r3, [pc, #60]	; (80048c0 <xTaskPriorityDisinherit+0xd4>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	429a      	cmp	r2, r3
 8004886:	d903      	bls.n	8004890 <xTaskPriorityDisinherit+0xa4>
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488c:	4a0c      	ldr	r2, [pc, #48]	; (80048c0 <xTaskPriorityDisinherit+0xd4>)
 800488e:	6013      	str	r3, [r2, #0]
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004894:	4613      	mov	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4a09      	ldr	r2, [pc, #36]	; (80048c4 <xTaskPriorityDisinherit+0xd8>)
 800489e:	441a      	add	r2, r3
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	3304      	adds	r3, #4
 80048a4:	4619      	mov	r1, r3
 80048a6:	4610      	mov	r0, r2
 80048a8:	f7fe fbc7 	bl	800303a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80048ac:	2301      	movs	r3, #1
 80048ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80048b0:	697b      	ldr	r3, [r7, #20]
	}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	200008ec 	.word	0x200008ec
 80048c0:	20000dc8 	.word	0x20000dc8
 80048c4:	200008f0 	.word	0x200008f0

080048c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80048d2:	4b21      	ldr	r3, [pc, #132]	; (8004958 <prvAddCurrentTaskToDelayedList+0x90>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048d8:	4b20      	ldr	r3, [pc, #128]	; (800495c <prvAddCurrentTaskToDelayedList+0x94>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3304      	adds	r3, #4
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fe fc08 	bl	80030f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048ea:	d10a      	bne.n	8004902 <prvAddCurrentTaskToDelayedList+0x3a>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d007      	beq.n	8004902 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048f2:	4b1a      	ldr	r3, [pc, #104]	; (800495c <prvAddCurrentTaskToDelayedList+0x94>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3304      	adds	r3, #4
 80048f8:	4619      	mov	r1, r3
 80048fa:	4819      	ldr	r0, [pc, #100]	; (8004960 <prvAddCurrentTaskToDelayedList+0x98>)
 80048fc:	f7fe fb9d 	bl	800303a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004900:	e026      	b.n	8004950 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4413      	add	r3, r2
 8004908:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800490a:	4b14      	ldr	r3, [pc, #80]	; (800495c <prvAddCurrentTaskToDelayedList+0x94>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	429a      	cmp	r2, r3
 8004918:	d209      	bcs.n	800492e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800491a:	4b12      	ldr	r3, [pc, #72]	; (8004964 <prvAddCurrentTaskToDelayedList+0x9c>)
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	4b0f      	ldr	r3, [pc, #60]	; (800495c <prvAddCurrentTaskToDelayedList+0x94>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3304      	adds	r3, #4
 8004924:	4619      	mov	r1, r3
 8004926:	4610      	mov	r0, r2
 8004928:	f7fe fbab 	bl	8003082 <vListInsert>
}
 800492c:	e010      	b.n	8004950 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800492e:	4b0e      	ldr	r3, [pc, #56]	; (8004968 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	4b0a      	ldr	r3, [pc, #40]	; (800495c <prvAddCurrentTaskToDelayedList+0x94>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3304      	adds	r3, #4
 8004938:	4619      	mov	r1, r3
 800493a:	4610      	mov	r0, r2
 800493c:	f7fe fba1 	bl	8003082 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004940:	4b0a      	ldr	r3, [pc, #40]	; (800496c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	429a      	cmp	r2, r3
 8004948:	d202      	bcs.n	8004950 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800494a:	4a08      	ldr	r2, [pc, #32]	; (800496c <prvAddCurrentTaskToDelayedList+0xa4>)
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	6013      	str	r3, [r2, #0]
}
 8004950:	bf00      	nop
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	20000dc4 	.word	0x20000dc4
 800495c:	200008ec 	.word	0x200008ec
 8004960:	20000dac 	.word	0x20000dac
 8004964:	20000d7c 	.word	0x20000d7c
 8004968:	20000d78 	.word	0x20000d78
 800496c:	20000de0 	.word	0x20000de0

08004970 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b08a      	sub	sp, #40	; 0x28
 8004974:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004976:	2300      	movs	r3, #0
 8004978:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800497a:	f000 fb07 	bl	8004f8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800497e:	4b1c      	ldr	r3, [pc, #112]	; (80049f0 <xTimerCreateTimerTask+0x80>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d021      	beq.n	80049ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004986:	2300      	movs	r3, #0
 8004988:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800498a:	2300      	movs	r3, #0
 800498c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800498e:	1d3a      	adds	r2, r7, #4
 8004990:	f107 0108 	add.w	r1, r7, #8
 8004994:	f107 030c 	add.w	r3, r7, #12
 8004998:	4618      	mov	r0, r3
 800499a:	f7fe fb07 	bl	8002fac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	9202      	str	r2, [sp, #8]
 80049a6:	9301      	str	r3, [sp, #4]
 80049a8:	2302      	movs	r3, #2
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	2300      	movs	r3, #0
 80049ae:	460a      	mov	r2, r1
 80049b0:	4910      	ldr	r1, [pc, #64]	; (80049f4 <xTimerCreateTimerTask+0x84>)
 80049b2:	4811      	ldr	r0, [pc, #68]	; (80049f8 <xTimerCreateTimerTask+0x88>)
 80049b4:	f7ff f8b4 	bl	8003b20 <xTaskCreateStatic>
 80049b8:	4603      	mov	r3, r0
 80049ba:	4a10      	ldr	r2, [pc, #64]	; (80049fc <xTimerCreateTimerTask+0x8c>)
 80049bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80049be:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <xTimerCreateTimerTask+0x8c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80049c6:	2301      	movs	r3, #1
 80049c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10a      	bne.n	80049e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80049d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	613b      	str	r3, [r7, #16]
}
 80049e2:	bf00      	nop
 80049e4:	e7fe      	b.n	80049e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80049e6:	697b      	ldr	r3, [r7, #20]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	20000e1c 	.word	0x20000e1c
 80049f4:	08005aa4 	.word	0x08005aa4
 80049f8:	08004b35 	.word	0x08004b35
 80049fc:	20000e20 	.word	0x20000e20

08004a00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b08a      	sub	sp, #40	; 0x28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10a      	bne.n	8004a2e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	623b      	str	r3, [r7, #32]
}
 8004a2a:	bf00      	nop
 8004a2c:	e7fe      	b.n	8004a2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004a2e:	4b1a      	ldr	r3, [pc, #104]	; (8004a98 <xTimerGenericCommand+0x98>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d02a      	beq.n	8004a8c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2b05      	cmp	r3, #5
 8004a46:	dc18      	bgt.n	8004a7a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004a48:	f7ff feb2 	bl	80047b0 <xTaskGetSchedulerState>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d109      	bne.n	8004a66 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a52:	4b11      	ldr	r3, [pc, #68]	; (8004a98 <xTimerGenericCommand+0x98>)
 8004a54:	6818      	ldr	r0, [r3, #0]
 8004a56:	f107 0110 	add.w	r1, r7, #16
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a5e:	f7fe fc77 	bl	8003350 <xQueueGenericSend>
 8004a62:	6278      	str	r0, [r7, #36]	; 0x24
 8004a64:	e012      	b.n	8004a8c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004a66:	4b0c      	ldr	r3, [pc, #48]	; (8004a98 <xTimerGenericCommand+0x98>)
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	f107 0110 	add.w	r1, r7, #16
 8004a6e:	2300      	movs	r3, #0
 8004a70:	2200      	movs	r2, #0
 8004a72:	f7fe fc6d 	bl	8003350 <xQueueGenericSend>
 8004a76:	6278      	str	r0, [r7, #36]	; 0x24
 8004a78:	e008      	b.n	8004a8c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a7a:	4b07      	ldr	r3, [pc, #28]	; (8004a98 <xTimerGenericCommand+0x98>)
 8004a7c:	6818      	ldr	r0, [r3, #0]
 8004a7e:	f107 0110 	add.w	r1, r7, #16
 8004a82:	2300      	movs	r3, #0
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	f7fe fd61 	bl	800354c <xQueueGenericSendFromISR>
 8004a8a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3728      	adds	r7, #40	; 0x28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	20000e1c 	.word	0x20000e1c

08004a9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b088      	sub	sp, #32
 8004aa0:	af02      	add	r7, sp, #8
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aa6:	4b22      	ldr	r3, [pc, #136]	; (8004b30 <prvProcessExpiredTimer+0x94>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fe fb1d 	bl	80030f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d022      	beq.n	8004b0e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	699a      	ldr	r2, [r3, #24]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	18d1      	adds	r1, r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	6978      	ldr	r0, [r7, #20]
 8004ad6:	f000 f8d1 	bl	8004c7c <prvInsertTimerInActiveList>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d01f      	beq.n	8004b20 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	2100      	movs	r1, #0
 8004aea:	6978      	ldr	r0, [r7, #20]
 8004aec:	f7ff ff88 	bl	8004a00 <xTimerGenericCommand>
 8004af0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d113      	bne.n	8004b20 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afc:	f383 8811 	msr	BASEPRI, r3
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	60fb      	str	r3, [r7, #12]
}
 8004b0a:	bf00      	nop
 8004b0c:	e7fe      	b.n	8004b0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b14:	f023 0301 	bic.w	r3, r3, #1
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	6978      	ldr	r0, [r7, #20]
 8004b26:	4798      	blx	r3
}
 8004b28:	bf00      	nop
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	20000e14 	.word	0x20000e14

08004b34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b3c:	f107 0308 	add.w	r3, r7, #8
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 f857 	bl	8004bf4 <prvGetNextExpireTime>
 8004b46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 f803 	bl	8004b58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004b52:	f000 f8d5 	bl	8004d00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b56:	e7f1      	b.n	8004b3c <prvTimerTask+0x8>

08004b58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004b62:	f7ff fa39 	bl	8003fd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b66:	f107 0308 	add.w	r3, r7, #8
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 f866 	bl	8004c3c <prvSampleTimeNow>
 8004b70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d130      	bne.n	8004bda <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10a      	bne.n	8004b94 <prvProcessTimerOrBlockTask+0x3c>
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d806      	bhi.n	8004b94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004b86:	f7ff fa35 	bl	8003ff4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b8a:	68f9      	ldr	r1, [r7, #12]
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7ff ff85 	bl	8004a9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004b92:	e024      	b.n	8004bde <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d008      	beq.n	8004bac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b9a:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <prvProcessTimerOrBlockTask+0x90>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <prvProcessTimerOrBlockTask+0x50>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e000      	b.n	8004baa <prvProcessTimerOrBlockTask+0x52>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004bac:	4b0f      	ldr	r3, [pc, #60]	; (8004bec <prvProcessTimerOrBlockTask+0x94>)
 8004bae:	6818      	ldr	r0, [r3, #0]
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	4619      	mov	r1, r3
 8004bba:	f7fe ff7d 	bl	8003ab8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004bbe:	f7ff fa19 	bl	8003ff4 <xTaskResumeAll>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10a      	bne.n	8004bde <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004bc8:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <prvProcessTimerOrBlockTask+0x98>)
 8004bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	f3bf 8f6f 	isb	sy
}
 8004bd8:	e001      	b.n	8004bde <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004bda:	f7ff fa0b 	bl	8003ff4 <xTaskResumeAll>
}
 8004bde:	bf00      	nop
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	20000e18 	.word	0x20000e18
 8004bec:	20000e1c 	.word	0x20000e1c
 8004bf0:	e000ed04 	.word	0xe000ed04

08004bf4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004bfc:	4b0e      	ldr	r3, [pc, #56]	; (8004c38 <prvGetNextExpireTime+0x44>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <prvGetNextExpireTime+0x16>
 8004c06:	2201      	movs	r2, #1
 8004c08:	e000      	b.n	8004c0c <prvGetNextExpireTime+0x18>
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d105      	bne.n	8004c24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c18:	4b07      	ldr	r3, [pc, #28]	; (8004c38 <prvGetNextExpireTime+0x44>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	e001      	b.n	8004c28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004c28:	68fb      	ldr	r3, [r7, #12]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	20000e14 	.word	0x20000e14

08004c3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004c44:	f7ff fa74 	bl	8004130 <xTaskGetTickCount>
 8004c48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004c4a:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <prvSampleTimeNow+0x3c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d205      	bcs.n	8004c60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004c54:	f000 f936 	bl	8004ec4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	e002      	b.n	8004c66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004c66:	4a04      	ldr	r2, [pc, #16]	; (8004c78 <prvSampleTimeNow+0x3c>)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	20000e24 	.word	0x20000e24

08004c7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d812      	bhi.n	8004cc8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	1ad2      	subs	r2, r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d302      	bcc.n	8004cb6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	617b      	str	r3, [r7, #20]
 8004cb4:	e01b      	b.n	8004cee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004cb6:	4b10      	ldr	r3, [pc, #64]	; (8004cf8 <prvInsertTimerInActiveList+0x7c>)
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	f7fe f9de 	bl	8003082 <vListInsert>
 8004cc6:	e012      	b.n	8004cee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d206      	bcs.n	8004cde <prvInsertTimerInActiveList+0x62>
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d302      	bcc.n	8004cde <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	e007      	b.n	8004cee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cde:	4b07      	ldr	r3, [pc, #28]	; (8004cfc <prvInsertTimerInActiveList+0x80>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4610      	mov	r0, r2
 8004cea:	f7fe f9ca 	bl	8003082 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004cee:	697b      	ldr	r3, [r7, #20]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3718      	adds	r7, #24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	20000e18 	.word	0x20000e18
 8004cfc:	20000e14 	.word	0x20000e14

08004d00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b08e      	sub	sp, #56	; 0x38
 8004d04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d06:	e0ca      	b.n	8004e9e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	da18      	bge.n	8004d40 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004d0e:	1d3b      	adds	r3, r7, #4
 8004d10:	3304      	adds	r3, #4
 8004d12:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10a      	bne.n	8004d30 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	61fb      	str	r3, [r7, #28]
}
 8004d2c:	bf00      	nop
 8004d2e:	e7fe      	b.n	8004d2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d36:	6850      	ldr	r0, [r2, #4]
 8004d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d3a:	6892      	ldr	r2, [r2, #8]
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f2c0 80ab 	blt.w	8004e9e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d004      	beq.n	8004d5e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d56:	3304      	adds	r3, #4
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7fe f9cb 	bl	80030f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d5e:	463b      	mov	r3, r7
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff ff6b 	bl	8004c3c <prvSampleTimeNow>
 8004d66:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b09      	cmp	r3, #9
 8004d6c:	f200 8096 	bhi.w	8004e9c <prvProcessReceivedCommands+0x19c>
 8004d70:	a201      	add	r2, pc, #4	; (adr r2, 8004d78 <prvProcessReceivedCommands+0x78>)
 8004d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d76:	bf00      	nop
 8004d78:	08004da1 	.word	0x08004da1
 8004d7c:	08004da1 	.word	0x08004da1
 8004d80:	08004da1 	.word	0x08004da1
 8004d84:	08004e15 	.word	0x08004e15
 8004d88:	08004e29 	.word	0x08004e29
 8004d8c:	08004e73 	.word	0x08004e73
 8004d90:	08004da1 	.word	0x08004da1
 8004d94:	08004da1 	.word	0x08004da1
 8004d98:	08004e15 	.word	0x08004e15
 8004d9c:	08004e29 	.word	0x08004e29
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004da6:	f043 0301 	orr.w	r3, r3, #1
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	18d1      	adds	r1, r2, r3
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dc0:	f7ff ff5c 	bl	8004c7c <prvInsertTimerInActiveList>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d069      	beq.n	8004e9e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dd0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d05e      	beq.n	8004e9e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	441a      	add	r2, r3
 8004de8:	2300      	movs	r3, #0
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	2300      	movs	r3, #0
 8004dee:	2100      	movs	r1, #0
 8004df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004df2:	f7ff fe05 	bl	8004a00 <xTimerGenericCommand>
 8004df6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d14f      	bne.n	8004e9e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	61bb      	str	r3, [r7, #24]
}
 8004e10:	bf00      	nop
 8004e12:	e7fe      	b.n	8004e12 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e1a:	f023 0301 	bic.w	r3, r3, #1
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004e26:	e03a      	b.n	8004e9e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e2e:	f043 0301 	orr.w	r3, r3, #1
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10a      	bne.n	8004e5e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	617b      	str	r3, [r7, #20]
}
 8004e5a:	bf00      	nop
 8004e5c:	e7fe      	b.n	8004e5c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e60:	699a      	ldr	r2, [r3, #24]
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	18d1      	adds	r1, r2, r3
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e6c:	f7ff ff06 	bl	8004c7c <prvInsertTimerInActiveList>
					break;
 8004e70:	e015      	b.n	8004e9e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d103      	bne.n	8004e88 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004e80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e82:	f000 fbdd 	bl	8005640 <vPortFree>
 8004e86:	e00a      	b.n	8004e9e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e8e:	f023 0301 	bic.w	r3, r3, #1
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004e9a:	e000      	b.n	8004e9e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004e9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e9e:	4b08      	ldr	r3, [pc, #32]	; (8004ec0 <prvProcessReceivedCommands+0x1c0>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	1d39      	adds	r1, r7, #4
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fe fbec 	bl	8003684 <xQueueReceive>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f47f af2a 	bne.w	8004d08 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004eb4:	bf00      	nop
 8004eb6:	bf00      	nop
 8004eb8:	3730      	adds	r7, #48	; 0x30
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20000e1c 	.word	0x20000e1c

08004ec4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004eca:	e048      	b.n	8004f5e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ecc:	4b2d      	ldr	r3, [pc, #180]	; (8004f84 <prvSwitchTimerLists+0xc0>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ed6:	4b2b      	ldr	r3, [pc, #172]	; (8004f84 <prvSwitchTimerLists+0xc0>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7fe f905 	bl	80030f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d02e      	beq.n	8004f5e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	4413      	add	r3, r2
 8004f08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d90e      	bls.n	8004f30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f1e:	4b19      	ldr	r3, [pc, #100]	; (8004f84 <prvSwitchTimerLists+0xc0>)
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3304      	adds	r3, #4
 8004f26:	4619      	mov	r1, r3
 8004f28:	4610      	mov	r0, r2
 8004f2a:	f7fe f8aa 	bl	8003082 <vListInsert>
 8004f2e:	e016      	b.n	8004f5e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f30:	2300      	movs	r3, #0
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	2300      	movs	r3, #0
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	2100      	movs	r1, #0
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f7ff fd60 	bl	8004a00 <xTimerGenericCommand>
 8004f40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10a      	bne.n	8004f5e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	603b      	str	r3, [r7, #0]
}
 8004f5a:	bf00      	nop
 8004f5c:	e7fe      	b.n	8004f5c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f5e:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <prvSwitchTimerLists+0xc0>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1b1      	bne.n	8004ecc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004f68:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <prvSwitchTimerLists+0xc0>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004f6e:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <prvSwitchTimerLists+0xc4>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a04      	ldr	r2, [pc, #16]	; (8004f84 <prvSwitchTimerLists+0xc0>)
 8004f74:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004f76:	4a04      	ldr	r2, [pc, #16]	; (8004f88 <prvSwitchTimerLists+0xc4>)
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	6013      	str	r3, [r2, #0]
}
 8004f7c:	bf00      	nop
 8004f7e:	3718      	adds	r7, #24
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	20000e14 	.word	0x20000e14
 8004f88:	20000e18 	.word	0x20000e18

08004f8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004f92:	f000 f967 	bl	8005264 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004f96:	4b15      	ldr	r3, [pc, #84]	; (8004fec <prvCheckForValidListAndQueue+0x60>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d120      	bne.n	8004fe0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004f9e:	4814      	ldr	r0, [pc, #80]	; (8004ff0 <prvCheckForValidListAndQueue+0x64>)
 8004fa0:	f7fe f81e 	bl	8002fe0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004fa4:	4813      	ldr	r0, [pc, #76]	; (8004ff4 <prvCheckForValidListAndQueue+0x68>)
 8004fa6:	f7fe f81b 	bl	8002fe0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004faa:	4b13      	ldr	r3, [pc, #76]	; (8004ff8 <prvCheckForValidListAndQueue+0x6c>)
 8004fac:	4a10      	ldr	r2, [pc, #64]	; (8004ff0 <prvCheckForValidListAndQueue+0x64>)
 8004fae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004fb0:	4b12      	ldr	r3, [pc, #72]	; (8004ffc <prvCheckForValidListAndQueue+0x70>)
 8004fb2:	4a10      	ldr	r2, [pc, #64]	; (8004ff4 <prvCheckForValidListAndQueue+0x68>)
 8004fb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	4b11      	ldr	r3, [pc, #68]	; (8005000 <prvCheckForValidListAndQueue+0x74>)
 8004fbc:	4a11      	ldr	r2, [pc, #68]	; (8005004 <prvCheckForValidListAndQueue+0x78>)
 8004fbe:	2110      	movs	r1, #16
 8004fc0:	200a      	movs	r0, #10
 8004fc2:	f7fe f929 	bl	8003218 <xQueueGenericCreateStatic>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	4a08      	ldr	r2, [pc, #32]	; (8004fec <prvCheckForValidListAndQueue+0x60>)
 8004fca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004fcc:	4b07      	ldr	r3, [pc, #28]	; (8004fec <prvCheckForValidListAndQueue+0x60>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d005      	beq.n	8004fe0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004fd4:	4b05      	ldr	r3, [pc, #20]	; (8004fec <prvCheckForValidListAndQueue+0x60>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	490b      	ldr	r1, [pc, #44]	; (8005008 <prvCheckForValidListAndQueue+0x7c>)
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fe fd42 	bl	8003a64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fe0:	f000 f970 	bl	80052c4 <vPortExitCritical>
}
 8004fe4:	bf00      	nop
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	20000e1c 	.word	0x20000e1c
 8004ff0:	20000dec 	.word	0x20000dec
 8004ff4:	20000e00 	.word	0x20000e00
 8004ff8:	20000e14 	.word	0x20000e14
 8004ffc:	20000e18 	.word	0x20000e18
 8005000:	20000ec8 	.word	0x20000ec8
 8005004:	20000e28 	.word	0x20000e28
 8005008:	08005aac 	.word	0x08005aac

0800500c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	3b04      	subs	r3, #4
 800501c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005024:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3b04      	subs	r3, #4
 800502a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f023 0201 	bic.w	r2, r3, #1
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	3b04      	subs	r3, #4
 800503a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800503c:	4a0c      	ldr	r2, [pc, #48]	; (8005070 <pxPortInitialiseStack+0x64>)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	3b14      	subs	r3, #20
 8005046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	3b04      	subs	r3, #4
 8005052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f06f 0202 	mvn.w	r2, #2
 800505a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	3b20      	subs	r3, #32
 8005060:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005062:	68fb      	ldr	r3, [r7, #12]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	08005075 	.word	0x08005075

08005074 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800507a:	2300      	movs	r3, #0
 800507c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800507e:	4b12      	ldr	r3, [pc, #72]	; (80050c8 <prvTaskExitError+0x54>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005086:	d00a      	beq.n	800509e <prvTaskExitError+0x2a>
	__asm volatile
 8005088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508c:	f383 8811 	msr	BASEPRI, r3
 8005090:	f3bf 8f6f 	isb	sy
 8005094:	f3bf 8f4f 	dsb	sy
 8005098:	60fb      	str	r3, [r7, #12]
}
 800509a:	bf00      	nop
 800509c:	e7fe      	b.n	800509c <prvTaskExitError+0x28>
	__asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	60bb      	str	r3, [r7, #8]
}
 80050b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050b2:	bf00      	nop
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0fc      	beq.n	80050b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050ba:	bf00      	nop
 80050bc:	bf00      	nop
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	2000003c 	.word	0x2000003c
 80050cc:	00000000 	.word	0x00000000

080050d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80050d0:	4b07      	ldr	r3, [pc, #28]	; (80050f0 <pxCurrentTCBConst2>)
 80050d2:	6819      	ldr	r1, [r3, #0]
 80050d4:	6808      	ldr	r0, [r1, #0]
 80050d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050da:	f380 8809 	msr	PSP, r0
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f04f 0000 	mov.w	r0, #0
 80050e6:	f380 8811 	msr	BASEPRI, r0
 80050ea:	4770      	bx	lr
 80050ec:	f3af 8000 	nop.w

080050f0 <pxCurrentTCBConst2>:
 80050f0:	200008ec 	.word	0x200008ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop

080050f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80050f8:	4808      	ldr	r0, [pc, #32]	; (800511c <prvPortStartFirstTask+0x24>)
 80050fa:	6800      	ldr	r0, [r0, #0]
 80050fc:	6800      	ldr	r0, [r0, #0]
 80050fe:	f380 8808 	msr	MSP, r0
 8005102:	f04f 0000 	mov.w	r0, #0
 8005106:	f380 8814 	msr	CONTROL, r0
 800510a:	b662      	cpsie	i
 800510c:	b661      	cpsie	f
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	df00      	svc	0
 8005118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800511a:	bf00      	nop
 800511c:	e000ed08 	.word	0xe000ed08

08005120 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005126:	4b46      	ldr	r3, [pc, #280]	; (8005240 <xPortStartScheduler+0x120>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a46      	ldr	r2, [pc, #280]	; (8005244 <xPortStartScheduler+0x124>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d10a      	bne.n	8005146 <xPortStartScheduler+0x26>
	__asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	613b      	str	r3, [r7, #16]
}
 8005142:	bf00      	nop
 8005144:	e7fe      	b.n	8005144 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005146:	4b3e      	ldr	r3, [pc, #248]	; (8005240 <xPortStartScheduler+0x120>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a3f      	ldr	r2, [pc, #252]	; (8005248 <xPortStartScheduler+0x128>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d10a      	bne.n	8005166 <xPortStartScheduler+0x46>
	__asm volatile
 8005150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	60fb      	str	r3, [r7, #12]
}
 8005162:	bf00      	nop
 8005164:	e7fe      	b.n	8005164 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005166:	4b39      	ldr	r3, [pc, #228]	; (800524c <xPortStartScheduler+0x12c>)
 8005168:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	b2db      	uxtb	r3, r3
 8005170:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	22ff      	movs	r2, #255	; 0xff
 8005176:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	b2db      	uxtb	r3, r3
 800517e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005180:	78fb      	ldrb	r3, [r7, #3]
 8005182:	b2db      	uxtb	r3, r3
 8005184:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005188:	b2da      	uxtb	r2, r3
 800518a:	4b31      	ldr	r3, [pc, #196]	; (8005250 <xPortStartScheduler+0x130>)
 800518c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800518e:	4b31      	ldr	r3, [pc, #196]	; (8005254 <xPortStartScheduler+0x134>)
 8005190:	2207      	movs	r2, #7
 8005192:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005194:	e009      	b.n	80051aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005196:	4b2f      	ldr	r3, [pc, #188]	; (8005254 <xPortStartScheduler+0x134>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3b01      	subs	r3, #1
 800519c:	4a2d      	ldr	r2, [pc, #180]	; (8005254 <xPortStartScheduler+0x134>)
 800519e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051aa:	78fb      	ldrb	r3, [r7, #3]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b2:	2b80      	cmp	r3, #128	; 0x80
 80051b4:	d0ef      	beq.n	8005196 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051b6:	4b27      	ldr	r3, [pc, #156]	; (8005254 <xPortStartScheduler+0x134>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f1c3 0307 	rsb	r3, r3, #7
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d00a      	beq.n	80051d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80051c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	60bb      	str	r3, [r7, #8]
}
 80051d4:	bf00      	nop
 80051d6:	e7fe      	b.n	80051d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051d8:	4b1e      	ldr	r3, [pc, #120]	; (8005254 <xPortStartScheduler+0x134>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	021b      	lsls	r3, r3, #8
 80051de:	4a1d      	ldr	r2, [pc, #116]	; (8005254 <xPortStartScheduler+0x134>)
 80051e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051e2:	4b1c      	ldr	r3, [pc, #112]	; (8005254 <xPortStartScheduler+0x134>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051ea:	4a1a      	ldr	r2, [pc, #104]	; (8005254 <xPortStartScheduler+0x134>)
 80051ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051f6:	4b18      	ldr	r3, [pc, #96]	; (8005258 <xPortStartScheduler+0x138>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a17      	ldr	r2, [pc, #92]	; (8005258 <xPortStartScheduler+0x138>)
 80051fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005200:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005202:	4b15      	ldr	r3, [pc, #84]	; (8005258 <xPortStartScheduler+0x138>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a14      	ldr	r2, [pc, #80]	; (8005258 <xPortStartScheduler+0x138>)
 8005208:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800520c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800520e:	f000 f8dd 	bl	80053cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005212:	4b12      	ldr	r3, [pc, #72]	; (800525c <xPortStartScheduler+0x13c>)
 8005214:	2200      	movs	r2, #0
 8005216:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005218:	f000 f8fc 	bl	8005414 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800521c:	4b10      	ldr	r3, [pc, #64]	; (8005260 <xPortStartScheduler+0x140>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a0f      	ldr	r2, [pc, #60]	; (8005260 <xPortStartScheduler+0x140>)
 8005222:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005226:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005228:	f7ff ff66 	bl	80050f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800522c:	f7ff f84a 	bl	80042c4 <vTaskSwitchContext>
	prvTaskExitError();
 8005230:	f7ff ff20 	bl	8005074 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	e000ed00 	.word	0xe000ed00
 8005244:	410fc271 	.word	0x410fc271
 8005248:	410fc270 	.word	0x410fc270
 800524c:	e000e400 	.word	0xe000e400
 8005250:	20000f18 	.word	0x20000f18
 8005254:	20000f1c 	.word	0x20000f1c
 8005258:	e000ed20 	.word	0xe000ed20
 800525c:	2000003c 	.word	0x2000003c
 8005260:	e000ef34 	.word	0xe000ef34

08005264 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	607b      	str	r3, [r7, #4]
}
 800527c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800527e:	4b0f      	ldr	r3, [pc, #60]	; (80052bc <vPortEnterCritical+0x58>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3301      	adds	r3, #1
 8005284:	4a0d      	ldr	r2, [pc, #52]	; (80052bc <vPortEnterCritical+0x58>)
 8005286:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005288:	4b0c      	ldr	r3, [pc, #48]	; (80052bc <vPortEnterCritical+0x58>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d10f      	bne.n	80052b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005290:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <vPortEnterCritical+0x5c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00a      	beq.n	80052b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800529a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529e:	f383 8811 	msr	BASEPRI, r3
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	603b      	str	r3, [r7, #0]
}
 80052ac:	bf00      	nop
 80052ae:	e7fe      	b.n	80052ae <vPortEnterCritical+0x4a>
	}
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	2000003c 	.word	0x2000003c
 80052c0:	e000ed04 	.word	0xe000ed04

080052c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80052ca:	4b12      	ldr	r3, [pc, #72]	; (8005314 <vPortExitCritical+0x50>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10a      	bne.n	80052e8 <vPortExitCritical+0x24>
	__asm volatile
 80052d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	607b      	str	r3, [r7, #4]
}
 80052e4:	bf00      	nop
 80052e6:	e7fe      	b.n	80052e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80052e8:	4b0a      	ldr	r3, [pc, #40]	; (8005314 <vPortExitCritical+0x50>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3b01      	subs	r3, #1
 80052ee:	4a09      	ldr	r2, [pc, #36]	; (8005314 <vPortExitCritical+0x50>)
 80052f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80052f2:	4b08      	ldr	r3, [pc, #32]	; (8005314 <vPortExitCritical+0x50>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d105      	bne.n	8005306 <vPortExitCritical+0x42>
 80052fa:	2300      	movs	r3, #0
 80052fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	f383 8811 	msr	BASEPRI, r3
}
 8005304:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	2000003c 	.word	0x2000003c
	...

08005320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005320:	f3ef 8009 	mrs	r0, PSP
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	4b15      	ldr	r3, [pc, #84]	; (8005380 <pxCurrentTCBConst>)
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	f01e 0f10 	tst.w	lr, #16
 8005330:	bf08      	it	eq
 8005332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800533a:	6010      	str	r0, [r2, #0]
 800533c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005340:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005344:	f380 8811 	msr	BASEPRI, r0
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f7fe ffb8 	bl	80042c4 <vTaskSwitchContext>
 8005354:	f04f 0000 	mov.w	r0, #0
 8005358:	f380 8811 	msr	BASEPRI, r0
 800535c:	bc09      	pop	{r0, r3}
 800535e:	6819      	ldr	r1, [r3, #0]
 8005360:	6808      	ldr	r0, [r1, #0]
 8005362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005366:	f01e 0f10 	tst.w	lr, #16
 800536a:	bf08      	it	eq
 800536c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005370:	f380 8809 	msr	PSP, r0
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	f3af 8000 	nop.w

08005380 <pxCurrentTCBConst>:
 8005380:	200008ec 	.word	0x200008ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005384:	bf00      	nop
 8005386:	bf00      	nop

08005388 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	607b      	str	r3, [r7, #4]
}
 80053a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80053a2:	f7fe fed5 	bl	8004150 <xTaskIncrementTick>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053ac:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <xPortSysTickHandler+0x40>)
 80053ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	2300      	movs	r3, #0
 80053b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	f383 8811 	msr	BASEPRI, r3
}
 80053be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80053c0:	bf00      	nop
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	e000ed04 	.word	0xe000ed04

080053cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80053cc:	b480      	push	{r7}
 80053ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053d0:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <vPortSetupTimerInterrupt+0x34>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053d6:	4b0b      	ldr	r3, [pc, #44]	; (8005404 <vPortSetupTimerInterrupt+0x38>)
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053dc:	4b0a      	ldr	r3, [pc, #40]	; (8005408 <vPortSetupTimerInterrupt+0x3c>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a0a      	ldr	r2, [pc, #40]	; (800540c <vPortSetupTimerInterrupt+0x40>)
 80053e2:	fba2 2303 	umull	r2, r3, r2, r3
 80053e6:	099b      	lsrs	r3, r3, #6
 80053e8:	4a09      	ldr	r2, [pc, #36]	; (8005410 <vPortSetupTimerInterrupt+0x44>)
 80053ea:	3b01      	subs	r3, #1
 80053ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053ee:	4b04      	ldr	r3, [pc, #16]	; (8005400 <vPortSetupTimerInterrupt+0x34>)
 80053f0:	2207      	movs	r2, #7
 80053f2:	601a      	str	r2, [r3, #0]
}
 80053f4:	bf00      	nop
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	e000e010 	.word	0xe000e010
 8005404:	e000e018 	.word	0xe000e018
 8005408:	20000030 	.word	0x20000030
 800540c:	10624dd3 	.word	0x10624dd3
 8005410:	e000e014 	.word	0xe000e014

08005414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005414:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005424 <vPortEnableVFP+0x10>
 8005418:	6801      	ldr	r1, [r0, #0]
 800541a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800541e:	6001      	str	r1, [r0, #0]
 8005420:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005422:	bf00      	nop
 8005424:	e000ed88 	.word	0xe000ed88

08005428 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800542e:	f3ef 8305 	mrs	r3, IPSR
 8005432:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b0f      	cmp	r3, #15
 8005438:	d914      	bls.n	8005464 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800543a:	4a17      	ldr	r2, [pc, #92]	; (8005498 <vPortValidateInterruptPriority+0x70>)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4413      	add	r3, r2
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005444:	4b15      	ldr	r3, [pc, #84]	; (800549c <vPortValidateInterruptPriority+0x74>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	7afa      	ldrb	r2, [r7, #11]
 800544a:	429a      	cmp	r2, r3
 800544c:	d20a      	bcs.n	8005464 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	607b      	str	r3, [r7, #4]
}
 8005460:	bf00      	nop
 8005462:	e7fe      	b.n	8005462 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005464:	4b0e      	ldr	r3, [pc, #56]	; (80054a0 <vPortValidateInterruptPriority+0x78>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800546c:	4b0d      	ldr	r3, [pc, #52]	; (80054a4 <vPortValidateInterruptPriority+0x7c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	429a      	cmp	r2, r3
 8005472:	d90a      	bls.n	800548a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	603b      	str	r3, [r7, #0]
}
 8005486:	bf00      	nop
 8005488:	e7fe      	b.n	8005488 <vPortValidateInterruptPriority+0x60>
	}
 800548a:	bf00      	nop
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	e000e3f0 	.word	0xe000e3f0
 800549c:	20000f18 	.word	0x20000f18
 80054a0:	e000ed0c 	.word	0xe000ed0c
 80054a4:	20000f1c 	.word	0x20000f1c

080054a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08a      	sub	sp, #40	; 0x28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80054b0:	2300      	movs	r3, #0
 80054b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80054b4:	f7fe fd90 	bl	8003fd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80054b8:	4b5b      	ldr	r3, [pc, #364]	; (8005628 <pvPortMalloc+0x180>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80054c0:	f000 f920 	bl	8005704 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80054c4:	4b59      	ldr	r3, [pc, #356]	; (800562c <pvPortMalloc+0x184>)
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4013      	ands	r3, r2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f040 8093 	bne.w	80055f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d01d      	beq.n	8005514 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80054d8:	2208      	movs	r2, #8
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4413      	add	r3, r2
 80054de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d014      	beq.n	8005514 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f023 0307 	bic.w	r3, r3, #7
 80054f0:	3308      	adds	r3, #8
 80054f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <pvPortMalloc+0x6c>
	__asm volatile
 80054fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	617b      	str	r3, [r7, #20]
}
 8005510:	bf00      	nop
 8005512:	e7fe      	b.n	8005512 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d06e      	beq.n	80055f8 <pvPortMalloc+0x150>
 800551a:	4b45      	ldr	r3, [pc, #276]	; (8005630 <pvPortMalloc+0x188>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	429a      	cmp	r2, r3
 8005522:	d869      	bhi.n	80055f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005524:	4b43      	ldr	r3, [pc, #268]	; (8005634 <pvPortMalloc+0x18c>)
 8005526:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005528:	4b42      	ldr	r3, [pc, #264]	; (8005634 <pvPortMalloc+0x18c>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800552e:	e004      	b.n	800553a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	429a      	cmp	r2, r3
 8005542:	d903      	bls.n	800554c <pvPortMalloc+0xa4>
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1f1      	bne.n	8005530 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800554c:	4b36      	ldr	r3, [pc, #216]	; (8005628 <pvPortMalloc+0x180>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005552:	429a      	cmp	r2, r3
 8005554:	d050      	beq.n	80055f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2208      	movs	r2, #8
 800555c:	4413      	add	r3, r2
 800555e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	1ad2      	subs	r2, r2, r3
 8005570:	2308      	movs	r3, #8
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	429a      	cmp	r2, r3
 8005576:	d91f      	bls.n	80055b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4413      	add	r3, r2
 800557e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	f003 0307 	and.w	r3, r3, #7
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <pvPortMalloc+0xf8>
	__asm volatile
 800558a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558e:	f383 8811 	msr	BASEPRI, r3
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	613b      	str	r3, [r7, #16]
}
 800559c:	bf00      	nop
 800559e:	e7fe      	b.n	800559e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	1ad2      	subs	r2, r2, r3
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055b2:	69b8      	ldr	r0, [r7, #24]
 80055b4:	f000 f908 	bl	80057c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80055b8:	4b1d      	ldr	r3, [pc, #116]	; (8005630 <pvPortMalloc+0x188>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	4a1b      	ldr	r2, [pc, #108]	; (8005630 <pvPortMalloc+0x188>)
 80055c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055c6:	4b1a      	ldr	r3, [pc, #104]	; (8005630 <pvPortMalloc+0x188>)
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	4b1b      	ldr	r3, [pc, #108]	; (8005638 <pvPortMalloc+0x190>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d203      	bcs.n	80055da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80055d2:	4b17      	ldr	r3, [pc, #92]	; (8005630 <pvPortMalloc+0x188>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a18      	ldr	r2, [pc, #96]	; (8005638 <pvPortMalloc+0x190>)
 80055d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	4b13      	ldr	r3, [pc, #76]	; (800562c <pvPortMalloc+0x184>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	431a      	orrs	r2, r3
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	2200      	movs	r2, #0
 80055ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80055ee:	4b13      	ldr	r3, [pc, #76]	; (800563c <pvPortMalloc+0x194>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3301      	adds	r3, #1
 80055f4:	4a11      	ldr	r2, [pc, #68]	; (800563c <pvPortMalloc+0x194>)
 80055f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80055f8:	f7fe fcfc 	bl	8003ff4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <pvPortMalloc+0x174>
	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	60fb      	str	r3, [r7, #12]
}
 8005618:	bf00      	nop
 800561a:	e7fe      	b.n	800561a <pvPortMalloc+0x172>
	return pvReturn;
 800561c:	69fb      	ldr	r3, [r7, #28]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3728      	adds	r7, #40	; 0x28
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	20004b28 	.word	0x20004b28
 800562c:	20004b3c 	.word	0x20004b3c
 8005630:	20004b2c 	.word	0x20004b2c
 8005634:	20004b20 	.word	0x20004b20
 8005638:	20004b30 	.word	0x20004b30
 800563c:	20004b34 	.word	0x20004b34

08005640 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d04d      	beq.n	80056ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005652:	2308      	movs	r3, #8
 8005654:	425b      	negs	r3, r3
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4413      	add	r3, r2
 800565a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	4b24      	ldr	r3, [pc, #144]	; (80056f8 <vPortFree+0xb8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4013      	ands	r3, r2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10a      	bne.n	8005684 <vPortFree+0x44>
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	60fb      	str	r3, [r7, #12]
}
 8005680:	bf00      	nop
 8005682:	e7fe      	b.n	8005682 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00a      	beq.n	80056a2 <vPortFree+0x62>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	60bb      	str	r3, [r7, #8]
}
 800569e:	bf00      	nop
 80056a0:	e7fe      	b.n	80056a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	4b14      	ldr	r3, [pc, #80]	; (80056f8 <vPortFree+0xb8>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4013      	ands	r3, r2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d01e      	beq.n	80056ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d11a      	bne.n	80056ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	4b0e      	ldr	r3, [pc, #56]	; (80056f8 <vPortFree+0xb8>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	43db      	mvns	r3, r3
 80056c2:	401a      	ands	r2, r3
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80056c8:	f7fe fc86 	bl	8003fd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	4b0a      	ldr	r3, [pc, #40]	; (80056fc <vPortFree+0xbc>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4413      	add	r3, r2
 80056d6:	4a09      	ldr	r2, [pc, #36]	; (80056fc <vPortFree+0xbc>)
 80056d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80056da:	6938      	ldr	r0, [r7, #16]
 80056dc:	f000 f874 	bl	80057c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80056e0:	4b07      	ldr	r3, [pc, #28]	; (8005700 <vPortFree+0xc0>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3301      	adds	r3, #1
 80056e6:	4a06      	ldr	r2, [pc, #24]	; (8005700 <vPortFree+0xc0>)
 80056e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80056ea:	f7fe fc83 	bl	8003ff4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80056ee:	bf00      	nop
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20004b3c 	.word	0x20004b3c
 80056fc:	20004b2c 	.word	0x20004b2c
 8005700:	20004b38 	.word	0x20004b38

08005704 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800570a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800570e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005710:	4b27      	ldr	r3, [pc, #156]	; (80057b0 <prvHeapInit+0xac>)
 8005712:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00c      	beq.n	8005738 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	3307      	adds	r3, #7
 8005722:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0307 	bic.w	r3, r3, #7
 800572a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	4a1f      	ldr	r2, [pc, #124]	; (80057b0 <prvHeapInit+0xac>)
 8005734:	4413      	add	r3, r2
 8005736:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800573c:	4a1d      	ldr	r2, [pc, #116]	; (80057b4 <prvHeapInit+0xb0>)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005742:	4b1c      	ldr	r3, [pc, #112]	; (80057b4 <prvHeapInit+0xb0>)
 8005744:	2200      	movs	r2, #0
 8005746:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	4413      	add	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005750:	2208      	movs	r2, #8
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	1a9b      	subs	r3, r3, r2
 8005756:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0307 	bic.w	r3, r3, #7
 800575e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4a15      	ldr	r2, [pc, #84]	; (80057b8 <prvHeapInit+0xb4>)
 8005764:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005766:	4b14      	ldr	r3, [pc, #80]	; (80057b8 <prvHeapInit+0xb4>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2200      	movs	r2, #0
 800576c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800576e:	4b12      	ldr	r3, [pc, #72]	; (80057b8 <prvHeapInit+0xb4>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	1ad2      	subs	r2, r2, r3
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005784:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <prvHeapInit+0xb4>)
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	4a0a      	ldr	r2, [pc, #40]	; (80057bc <prvHeapInit+0xb8>)
 8005792:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	4a09      	ldr	r2, [pc, #36]	; (80057c0 <prvHeapInit+0xbc>)
 800579a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800579c:	4b09      	ldr	r3, [pc, #36]	; (80057c4 <prvHeapInit+0xc0>)
 800579e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80057a2:	601a      	str	r2, [r3, #0]
}
 80057a4:	bf00      	nop
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	20000f20 	.word	0x20000f20
 80057b4:	20004b20 	.word	0x20004b20
 80057b8:	20004b28 	.word	0x20004b28
 80057bc:	20004b30 	.word	0x20004b30
 80057c0:	20004b2c 	.word	0x20004b2c
 80057c4:	20004b3c 	.word	0x20004b3c

080057c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80057d0:	4b28      	ldr	r3, [pc, #160]	; (8005874 <prvInsertBlockIntoFreeList+0xac>)
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	e002      	b.n	80057dc <prvInsertBlockIntoFreeList+0x14>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d8f7      	bhi.n	80057d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	4413      	add	r3, r2
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d108      	bne.n	800580a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	441a      	add	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	441a      	add	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	429a      	cmp	r2, r3
 800581c:	d118      	bne.n	8005850 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	4b15      	ldr	r3, [pc, #84]	; (8005878 <prvInsertBlockIntoFreeList+0xb0>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	429a      	cmp	r2, r3
 8005828:	d00d      	beq.n	8005846 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	441a      	add	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	e008      	b.n	8005858 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005846:	4b0c      	ldr	r3, [pc, #48]	; (8005878 <prvInsertBlockIntoFreeList+0xb0>)
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	601a      	str	r2, [r3, #0]
 800584e:	e003      	b.n	8005858 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	429a      	cmp	r2, r3
 800585e:	d002      	beq.n	8005866 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005866:	bf00      	nop
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	20004b20 	.word	0x20004b20
 8005878:	20004b28 	.word	0x20004b28

0800587c <memset>:
 800587c:	4402      	add	r2, r0
 800587e:	4603      	mov	r3, r0
 8005880:	4293      	cmp	r3, r2
 8005882:	d100      	bne.n	8005886 <memset+0xa>
 8005884:	4770      	bx	lr
 8005886:	f803 1b01 	strb.w	r1, [r3], #1
 800588a:	e7f9      	b.n	8005880 <memset+0x4>

0800588c <_reclaim_reent>:
 800588c:	4b29      	ldr	r3, [pc, #164]	; (8005934 <_reclaim_reent+0xa8>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4283      	cmp	r3, r0
 8005892:	b570      	push	{r4, r5, r6, lr}
 8005894:	4604      	mov	r4, r0
 8005896:	d04b      	beq.n	8005930 <_reclaim_reent+0xa4>
 8005898:	69c3      	ldr	r3, [r0, #28]
 800589a:	b143      	cbz	r3, 80058ae <_reclaim_reent+0x22>
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d144      	bne.n	800592c <_reclaim_reent+0xa0>
 80058a2:	69e3      	ldr	r3, [r4, #28]
 80058a4:	6819      	ldr	r1, [r3, #0]
 80058a6:	b111      	cbz	r1, 80058ae <_reclaim_reent+0x22>
 80058a8:	4620      	mov	r0, r4
 80058aa:	f000 f879 	bl	80059a0 <_free_r>
 80058ae:	6961      	ldr	r1, [r4, #20]
 80058b0:	b111      	cbz	r1, 80058b8 <_reclaim_reent+0x2c>
 80058b2:	4620      	mov	r0, r4
 80058b4:	f000 f874 	bl	80059a0 <_free_r>
 80058b8:	69e1      	ldr	r1, [r4, #28]
 80058ba:	b111      	cbz	r1, 80058c2 <_reclaim_reent+0x36>
 80058bc:	4620      	mov	r0, r4
 80058be:	f000 f86f 	bl	80059a0 <_free_r>
 80058c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80058c4:	b111      	cbz	r1, 80058cc <_reclaim_reent+0x40>
 80058c6:	4620      	mov	r0, r4
 80058c8:	f000 f86a 	bl	80059a0 <_free_r>
 80058cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058ce:	b111      	cbz	r1, 80058d6 <_reclaim_reent+0x4a>
 80058d0:	4620      	mov	r0, r4
 80058d2:	f000 f865 	bl	80059a0 <_free_r>
 80058d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80058d8:	b111      	cbz	r1, 80058e0 <_reclaim_reent+0x54>
 80058da:	4620      	mov	r0, r4
 80058dc:	f000 f860 	bl	80059a0 <_free_r>
 80058e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80058e2:	b111      	cbz	r1, 80058ea <_reclaim_reent+0x5e>
 80058e4:	4620      	mov	r0, r4
 80058e6:	f000 f85b 	bl	80059a0 <_free_r>
 80058ea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80058ec:	b111      	cbz	r1, 80058f4 <_reclaim_reent+0x68>
 80058ee:	4620      	mov	r0, r4
 80058f0:	f000 f856 	bl	80059a0 <_free_r>
 80058f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80058f6:	b111      	cbz	r1, 80058fe <_reclaim_reent+0x72>
 80058f8:	4620      	mov	r0, r4
 80058fa:	f000 f851 	bl	80059a0 <_free_r>
 80058fe:	6a23      	ldr	r3, [r4, #32]
 8005900:	b1b3      	cbz	r3, 8005930 <_reclaim_reent+0xa4>
 8005902:	4620      	mov	r0, r4
 8005904:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005908:	4718      	bx	r3
 800590a:	5949      	ldr	r1, [r1, r5]
 800590c:	b941      	cbnz	r1, 8005920 <_reclaim_reent+0x94>
 800590e:	3504      	adds	r5, #4
 8005910:	69e3      	ldr	r3, [r4, #28]
 8005912:	2d80      	cmp	r5, #128	; 0x80
 8005914:	68d9      	ldr	r1, [r3, #12]
 8005916:	d1f8      	bne.n	800590a <_reclaim_reent+0x7e>
 8005918:	4620      	mov	r0, r4
 800591a:	f000 f841 	bl	80059a0 <_free_r>
 800591e:	e7c0      	b.n	80058a2 <_reclaim_reent+0x16>
 8005920:	680e      	ldr	r6, [r1, #0]
 8005922:	4620      	mov	r0, r4
 8005924:	f000 f83c 	bl	80059a0 <_free_r>
 8005928:	4631      	mov	r1, r6
 800592a:	e7ef      	b.n	800590c <_reclaim_reent+0x80>
 800592c:	2500      	movs	r5, #0
 800592e:	e7ef      	b.n	8005910 <_reclaim_reent+0x84>
 8005930:	bd70      	pop	{r4, r5, r6, pc}
 8005932:	bf00      	nop
 8005934:	2000008c 	.word	0x2000008c

08005938 <__libc_init_array>:
 8005938:	b570      	push	{r4, r5, r6, lr}
 800593a:	4d0d      	ldr	r5, [pc, #52]	; (8005970 <__libc_init_array+0x38>)
 800593c:	4c0d      	ldr	r4, [pc, #52]	; (8005974 <__libc_init_array+0x3c>)
 800593e:	1b64      	subs	r4, r4, r5
 8005940:	10a4      	asrs	r4, r4, #2
 8005942:	2600      	movs	r6, #0
 8005944:	42a6      	cmp	r6, r4
 8005946:	d109      	bne.n	800595c <__libc_init_array+0x24>
 8005948:	4d0b      	ldr	r5, [pc, #44]	; (8005978 <__libc_init_array+0x40>)
 800594a:	4c0c      	ldr	r4, [pc, #48]	; (800597c <__libc_init_array+0x44>)
 800594c:	f000 f880 	bl	8005a50 <_init>
 8005950:	1b64      	subs	r4, r4, r5
 8005952:	10a4      	asrs	r4, r4, #2
 8005954:	2600      	movs	r6, #0
 8005956:	42a6      	cmp	r6, r4
 8005958:	d105      	bne.n	8005966 <__libc_init_array+0x2e>
 800595a:	bd70      	pop	{r4, r5, r6, pc}
 800595c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005960:	4798      	blx	r3
 8005962:	3601      	adds	r6, #1
 8005964:	e7ee      	b.n	8005944 <__libc_init_array+0xc>
 8005966:	f855 3b04 	ldr.w	r3, [r5], #4
 800596a:	4798      	blx	r3
 800596c:	3601      	adds	r6, #1
 800596e:	e7f2      	b.n	8005956 <__libc_init_array+0x1e>
 8005970:	08005bac 	.word	0x08005bac
 8005974:	08005bac 	.word	0x08005bac
 8005978:	08005bac 	.word	0x08005bac
 800597c:	08005bb0 	.word	0x08005bb0

08005980 <__retarget_lock_acquire_recursive>:
 8005980:	4770      	bx	lr

08005982 <__retarget_lock_release_recursive>:
 8005982:	4770      	bx	lr

08005984 <memcpy>:
 8005984:	440a      	add	r2, r1
 8005986:	4291      	cmp	r1, r2
 8005988:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800598c:	d100      	bne.n	8005990 <memcpy+0xc>
 800598e:	4770      	bx	lr
 8005990:	b510      	push	{r4, lr}
 8005992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800599a:	4291      	cmp	r1, r2
 800599c:	d1f9      	bne.n	8005992 <memcpy+0xe>
 800599e:	bd10      	pop	{r4, pc}

080059a0 <_free_r>:
 80059a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059a2:	2900      	cmp	r1, #0
 80059a4:	d044      	beq.n	8005a30 <_free_r+0x90>
 80059a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059aa:	9001      	str	r0, [sp, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f1a1 0404 	sub.w	r4, r1, #4
 80059b2:	bfb8      	it	lt
 80059b4:	18e4      	addlt	r4, r4, r3
 80059b6:	f000 f83f 	bl	8005a38 <__malloc_lock>
 80059ba:	4a1e      	ldr	r2, [pc, #120]	; (8005a34 <_free_r+0x94>)
 80059bc:	9801      	ldr	r0, [sp, #4]
 80059be:	6813      	ldr	r3, [r2, #0]
 80059c0:	b933      	cbnz	r3, 80059d0 <_free_r+0x30>
 80059c2:	6063      	str	r3, [r4, #4]
 80059c4:	6014      	str	r4, [r2, #0]
 80059c6:	b003      	add	sp, #12
 80059c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059cc:	f000 b83a 	b.w	8005a44 <__malloc_unlock>
 80059d0:	42a3      	cmp	r3, r4
 80059d2:	d908      	bls.n	80059e6 <_free_r+0x46>
 80059d4:	6825      	ldr	r5, [r4, #0]
 80059d6:	1961      	adds	r1, r4, r5
 80059d8:	428b      	cmp	r3, r1
 80059da:	bf01      	itttt	eq
 80059dc:	6819      	ldreq	r1, [r3, #0]
 80059de:	685b      	ldreq	r3, [r3, #4]
 80059e0:	1949      	addeq	r1, r1, r5
 80059e2:	6021      	streq	r1, [r4, #0]
 80059e4:	e7ed      	b.n	80059c2 <_free_r+0x22>
 80059e6:	461a      	mov	r2, r3
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	b10b      	cbz	r3, 80059f0 <_free_r+0x50>
 80059ec:	42a3      	cmp	r3, r4
 80059ee:	d9fa      	bls.n	80059e6 <_free_r+0x46>
 80059f0:	6811      	ldr	r1, [r2, #0]
 80059f2:	1855      	adds	r5, r2, r1
 80059f4:	42a5      	cmp	r5, r4
 80059f6:	d10b      	bne.n	8005a10 <_free_r+0x70>
 80059f8:	6824      	ldr	r4, [r4, #0]
 80059fa:	4421      	add	r1, r4
 80059fc:	1854      	adds	r4, r2, r1
 80059fe:	42a3      	cmp	r3, r4
 8005a00:	6011      	str	r1, [r2, #0]
 8005a02:	d1e0      	bne.n	80059c6 <_free_r+0x26>
 8005a04:	681c      	ldr	r4, [r3, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	6053      	str	r3, [r2, #4]
 8005a0a:	440c      	add	r4, r1
 8005a0c:	6014      	str	r4, [r2, #0]
 8005a0e:	e7da      	b.n	80059c6 <_free_r+0x26>
 8005a10:	d902      	bls.n	8005a18 <_free_r+0x78>
 8005a12:	230c      	movs	r3, #12
 8005a14:	6003      	str	r3, [r0, #0]
 8005a16:	e7d6      	b.n	80059c6 <_free_r+0x26>
 8005a18:	6825      	ldr	r5, [r4, #0]
 8005a1a:	1961      	adds	r1, r4, r5
 8005a1c:	428b      	cmp	r3, r1
 8005a1e:	bf04      	itt	eq
 8005a20:	6819      	ldreq	r1, [r3, #0]
 8005a22:	685b      	ldreq	r3, [r3, #4]
 8005a24:	6063      	str	r3, [r4, #4]
 8005a26:	bf04      	itt	eq
 8005a28:	1949      	addeq	r1, r1, r5
 8005a2a:	6021      	streq	r1, [r4, #0]
 8005a2c:	6054      	str	r4, [r2, #4]
 8005a2e:	e7ca      	b.n	80059c6 <_free_r+0x26>
 8005a30:	b003      	add	sp, #12
 8005a32:	bd30      	pop	{r4, r5, pc}
 8005a34:	20004c7c 	.word	0x20004c7c

08005a38 <__malloc_lock>:
 8005a38:	4801      	ldr	r0, [pc, #4]	; (8005a40 <__malloc_lock+0x8>)
 8005a3a:	f7ff bfa1 	b.w	8005980 <__retarget_lock_acquire_recursive>
 8005a3e:	bf00      	nop
 8005a40:	20004c78 	.word	0x20004c78

08005a44 <__malloc_unlock>:
 8005a44:	4801      	ldr	r0, [pc, #4]	; (8005a4c <__malloc_unlock+0x8>)
 8005a46:	f7ff bf9c 	b.w	8005982 <__retarget_lock_release_recursive>
 8005a4a:	bf00      	nop
 8005a4c:	20004c78 	.word	0x20004c78

08005a50 <_init>:
 8005a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a52:	bf00      	nop
 8005a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a56:	bc08      	pop	{r3}
 8005a58:	469e      	mov	lr, r3
 8005a5a:	4770      	bx	lr

08005a5c <_fini>:
 8005a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5e:	bf00      	nop
 8005a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a62:	bc08      	pop	{r3}
 8005a64:	469e      	mov	lr, r3
 8005a66:	4770      	bx	lr
