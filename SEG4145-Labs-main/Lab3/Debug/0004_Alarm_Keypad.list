
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007810  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021a0  080079e0  080079e0  000179e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b80  08009b80  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009b80  08009b80  00019b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b88  08009b88  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b88  08009b88  00019b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b8c  08009b8c  00019b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009b90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005064  20000074  08009c04  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200050d8  08009c04  000250d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c544  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c30  00000000  00000000  0003c62b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001838  00000000  00000000  00040260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012fa  00000000  00000000  00041a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002475c  00000000  00000000  00042d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cd25  00000000  00000000  000674ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de5a8  00000000  00000000  00084213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c4c  00000000  00000000  001627bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  00169408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080079c8 	.word	0x080079c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080079c8 	.word	0x080079c8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
	int done=1;
 80005c2:	2301      	movs	r3, #1
 80005c4:	607b      	str	r3, [r7, #4]
	while(done)
 80005c6:	e19b      	b.n	8000900 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 80005c8:	2201      	movs	r2, #1
 80005ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ce:	48b3      	ldr	r0, [pc, #716]	; (800089c <Get_Key+0x2e0>)
 80005d0:	f001 fc46 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 80005d4:	2200      	movs	r2, #0
 80005d6:	2110      	movs	r1, #16
 80005d8:	48b0      	ldr	r0, [pc, #704]	; (800089c <Get_Key+0x2e0>)
 80005da:	f001 fc41 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80005de:	2200      	movs	r2, #0
 80005e0:	2120      	movs	r1, #32
 80005e2:	48ae      	ldr	r0, [pc, #696]	; (800089c <Get_Key+0x2e0>)
 80005e4:	f001 fc3c 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80005e8:	2200      	movs	r2, #0
 80005ea:	2108      	movs	r1, #8
 80005ec:	48ab      	ldr	r0, [pc, #684]	; (800089c <Get_Key+0x2e0>)
 80005ee:	f001 fc37 	bl	8001e60 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80005f2:	2140      	movs	r1, #64	; 0x40
 80005f4:	48a9      	ldr	r0, [pc, #676]	; (800089c <Get_Key+0x2e0>)
 80005f6:	f001 fc1b 	bl	8001e30 <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d00b      	beq.n	8000618 <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000600:	bf00      	nop
 8000602:	2140      	movs	r1, #64	; 0x40
 8000604:	48a5      	ldr	r0, [pc, #660]	; (800089c <Get_Key+0x2e0>)
 8000606:	f001 fc13 	bl	8001e30 <HAL_GPIO_ReadPin>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d1f8      	bne.n	8000602 <Get_Key+0x46>
		key='1';
 8000610:	4ba3      	ldr	r3, [pc, #652]	; (80008a0 <Get_Key+0x2e4>)
 8000612:	2231      	movs	r2, #49	; 0x31
 8000614:	701a      	strb	r2, [r3, #0]
		break;
 8000616:	e177      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	48a2      	ldr	r0, [pc, #648]	; (80008a4 <Get_Key+0x2e8>)
 800061c:	f001 fc08 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d00b      	beq.n	800063e <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000626:	bf00      	nop
 8000628:	2180      	movs	r1, #128	; 0x80
 800062a:	489e      	ldr	r0, [pc, #632]	; (80008a4 <Get_Key+0x2e8>)
 800062c:	f001 fc00 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d1f8      	bne.n	8000628 <Get_Key+0x6c>
		key='4';
 8000636:	4b9a      	ldr	r3, [pc, #616]	; (80008a0 <Get_Key+0x2e4>)
 8000638:	2234      	movs	r2, #52	; 0x34
 800063a:	701a      	strb	r2, [r3, #0]
		break;
 800063c:	e164      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800063e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000642:	4899      	ldr	r0, [pc, #612]	; (80008a8 <Get_Key+0x2ec>)
 8000644:	f001 fbf4 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d00c      	beq.n	8000668 <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800064e:	bf00      	nop
 8000650:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000654:	4894      	ldr	r0, [pc, #592]	; (80008a8 <Get_Key+0x2ec>)
 8000656:	f001 fbeb 	bl	8001e30 <HAL_GPIO_ReadPin>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d1f7      	bne.n	8000650 <Get_Key+0x94>
		key='7';
 8000660:	4b8f      	ldr	r3, [pc, #572]	; (80008a0 <Get_Key+0x2e4>)
 8000662:	2237      	movs	r2, #55	; 0x37
 8000664:	701a      	strb	r2, [r3, #0]
		break;
 8000666:	e14f      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066c:	488e      	ldr	r0, [pc, #568]	; (80008a8 <Get_Key+0x2ec>)
 800066e:	f001 fbdf 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d00c      	beq.n	8000692 <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000678:	bf00      	nop
 800067a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067e:	488a      	ldr	r0, [pc, #552]	; (80008a8 <Get_Key+0x2ec>)
 8000680:	f001 fbd6 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1f7      	bne.n	800067a <Get_Key+0xbe>
		key='*';
 800068a:	4b85      	ldr	r3, [pc, #532]	; (80008a0 <Get_Key+0x2e4>)
 800068c:	222a      	movs	r2, #42	; 0x2a
 800068e:	701a      	strb	r2, [r3, #0]
		break;
 8000690:	e13a      	b.n	8000908 <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000698:	4880      	ldr	r0, [pc, #512]	; (800089c <Get_Key+0x2e0>)
 800069a:	f001 fbe1 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 800069e:	2201      	movs	r2, #1
 80006a0:	2110      	movs	r1, #16
 80006a2:	487e      	ldr	r0, [pc, #504]	; (800089c <Get_Key+0x2e0>)
 80006a4:	f001 fbdc 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80006a8:	2200      	movs	r2, #0
 80006aa:	2120      	movs	r1, #32
 80006ac:	487b      	ldr	r0, [pc, #492]	; (800089c <Get_Key+0x2e0>)
 80006ae:	f001 fbd7 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80006b2:	2200      	movs	r2, #0
 80006b4:	2108      	movs	r1, #8
 80006b6:	4879      	ldr	r0, [pc, #484]	; (800089c <Get_Key+0x2e0>)
 80006b8:	f001 fbd2 	bl	8001e60 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006bc:	2140      	movs	r1, #64	; 0x40
 80006be:	4877      	ldr	r0, [pc, #476]	; (800089c <Get_Key+0x2e0>)
 80006c0:	f001 fbb6 	bl	8001e30 <HAL_GPIO_ReadPin>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d00b      	beq.n	80006e2 <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80006ca:	bf00      	nop
 80006cc:	2140      	movs	r1, #64	; 0x40
 80006ce:	4873      	ldr	r0, [pc, #460]	; (800089c <Get_Key+0x2e0>)
 80006d0:	f001 fbae 	bl	8001e30 <HAL_GPIO_ReadPin>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d1f8      	bne.n	80006cc <Get_Key+0x110>
		key='2';
 80006da:	4b71      	ldr	r3, [pc, #452]	; (80008a0 <Get_Key+0x2e4>)
 80006dc:	2232      	movs	r2, #50	; 0x32
 80006de:	701a      	strb	r2, [r3, #0]
		break;
 80006e0:	e112      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80006e2:	2180      	movs	r1, #128	; 0x80
 80006e4:	486f      	ldr	r0, [pc, #444]	; (80008a4 <Get_Key+0x2e8>)
 80006e6:	f001 fba3 	bl	8001e30 <HAL_GPIO_ReadPin>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d00b      	beq.n	8000708 <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80006f0:	bf00      	nop
 80006f2:	2180      	movs	r1, #128	; 0x80
 80006f4:	486b      	ldr	r0, [pc, #428]	; (80008a4 <Get_Key+0x2e8>)
 80006f6:	f001 fb9b 	bl	8001e30 <HAL_GPIO_ReadPin>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d1f8      	bne.n	80006f2 <Get_Key+0x136>
		key='5';
 8000700:	4b67      	ldr	r3, [pc, #412]	; (80008a0 <Get_Key+0x2e4>)
 8000702:	2235      	movs	r2, #53	; 0x35
 8000704:	701a      	strb	r2, [r3, #0]
		break;
 8000706:	e0ff      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000708:	f44f 7100 	mov.w	r1, #512	; 0x200
 800070c:	4866      	ldr	r0, [pc, #408]	; (80008a8 <Get_Key+0x2ec>)
 800070e:	f001 fb8f 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d00c      	beq.n	8000732 <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000718:	bf00      	nop
 800071a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071e:	4862      	ldr	r0, [pc, #392]	; (80008a8 <Get_Key+0x2ec>)
 8000720:	f001 fb86 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d1f7      	bne.n	800071a <Get_Key+0x15e>
		key='8';
 800072a:	4b5d      	ldr	r3, [pc, #372]	; (80008a0 <Get_Key+0x2e4>)
 800072c:	2238      	movs	r2, #56	; 0x38
 800072e:	701a      	strb	r2, [r3, #0]
		break;
 8000730:	e0ea      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000732:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000736:	485c      	ldr	r0, [pc, #368]	; (80008a8 <Get_Key+0x2ec>)
 8000738:	f001 fb7a 	bl	8001e30 <HAL_GPIO_ReadPin>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d00c      	beq.n	800075c <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000742:	bf00      	nop
 8000744:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000748:	4857      	ldr	r0, [pc, #348]	; (80008a8 <Get_Key+0x2ec>)
 800074a:	f001 fb71 	bl	8001e30 <HAL_GPIO_ReadPin>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d1f7      	bne.n	8000744 <Get_Key+0x188>
		key='0';
 8000754:	4b52      	ldr	r3, [pc, #328]	; (80008a0 <Get_Key+0x2e4>)
 8000756:	2230      	movs	r2, #48	; 0x30
 8000758:	701a      	strb	r2, [r3, #0]
		break;
 800075a:	e0d5      	b.n	8000908 <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000762:	484e      	ldr	r0, [pc, #312]	; (800089c <Get_Key+0x2e0>)
 8000764:	f001 fb7c 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 8000768:	2200      	movs	r2, #0
 800076a:	2110      	movs	r1, #16
 800076c:	484b      	ldr	r0, [pc, #300]	; (800089c <Get_Key+0x2e0>)
 800076e:	f001 fb77 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 8000772:	2201      	movs	r2, #1
 8000774:	2120      	movs	r1, #32
 8000776:	4849      	ldr	r0, [pc, #292]	; (800089c <Get_Key+0x2e0>)
 8000778:	f001 fb72 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 800077c:	2200      	movs	r2, #0
 800077e:	2108      	movs	r1, #8
 8000780:	4846      	ldr	r0, [pc, #280]	; (800089c <Get_Key+0x2e0>)
 8000782:	f001 fb6d 	bl	8001e60 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000786:	2140      	movs	r1, #64	; 0x40
 8000788:	4844      	ldr	r0, [pc, #272]	; (800089c <Get_Key+0x2e0>)
 800078a:	f001 fb51 	bl	8001e30 <HAL_GPIO_ReadPin>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d00b      	beq.n	80007ac <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000794:	bf00      	nop
 8000796:	2140      	movs	r1, #64	; 0x40
 8000798:	4840      	ldr	r0, [pc, #256]	; (800089c <Get_Key+0x2e0>)
 800079a:	f001 fb49 	bl	8001e30 <HAL_GPIO_ReadPin>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d1f8      	bne.n	8000796 <Get_Key+0x1da>
		key='3';
 80007a4:	4b3e      	ldr	r3, [pc, #248]	; (80008a0 <Get_Key+0x2e4>)
 80007a6:	2233      	movs	r2, #51	; 0x33
 80007a8:	701a      	strb	r2, [r3, #0]
		break;
 80007aa:	e0ad      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007ac:	2180      	movs	r1, #128	; 0x80
 80007ae:	483d      	ldr	r0, [pc, #244]	; (80008a4 <Get_Key+0x2e8>)
 80007b0:	f001 fb3e 	bl	8001e30 <HAL_GPIO_ReadPin>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d00b      	beq.n	80007d2 <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007ba:	bf00      	nop
 80007bc:	2180      	movs	r1, #128	; 0x80
 80007be:	4839      	ldr	r0, [pc, #228]	; (80008a4 <Get_Key+0x2e8>)
 80007c0:	f001 fb36 	bl	8001e30 <HAL_GPIO_ReadPin>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d1f8      	bne.n	80007bc <Get_Key+0x200>
		key='6';
 80007ca:	4b35      	ldr	r3, [pc, #212]	; (80008a0 <Get_Key+0x2e4>)
 80007cc:	2236      	movs	r2, #54	; 0x36
 80007ce:	701a      	strb	r2, [r3, #0]
		break;
 80007d0:	e09a      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80007d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d6:	4834      	ldr	r0, [pc, #208]	; (80008a8 <Get_Key+0x2ec>)
 80007d8:	f001 fb2a 	bl	8001e30 <HAL_GPIO_ReadPin>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d00c      	beq.n	80007fc <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80007e2:	bf00      	nop
 80007e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e8:	482f      	ldr	r0, [pc, #188]	; (80008a8 <Get_Key+0x2ec>)
 80007ea:	f001 fb21 	bl	8001e30 <HAL_GPIO_ReadPin>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d1f7      	bne.n	80007e4 <Get_Key+0x228>
		key='9';
 80007f4:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <Get_Key+0x2e4>)
 80007f6:	2239      	movs	r2, #57	; 0x39
 80007f8:	701a      	strb	r2, [r3, #0]
		break;
 80007fa:	e085      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80007fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000800:	4829      	ldr	r0, [pc, #164]	; (80008a8 <Get_Key+0x2ec>)
 8000802:	f001 fb15 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d00c      	beq.n	8000826 <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800080c:	bf00      	nop
 800080e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000812:	4825      	ldr	r0, [pc, #148]	; (80008a8 <Get_Key+0x2ec>)
 8000814:	f001 fb0c 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1f7      	bne.n	800080e <Get_Key+0x252>
		key='#';
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <Get_Key+0x2e4>)
 8000820:	2223      	movs	r2, #35	; 0x23
 8000822:	701a      	strb	r2, [r3, #0]
		break;
 8000824:	e070      	b.n	8000908 <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800082c:	481b      	ldr	r0, [pc, #108]	; (800089c <Get_Key+0x2e0>)
 800082e:	f001 fb17 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000832:	2200      	movs	r2, #0
 8000834:	2110      	movs	r1, #16
 8000836:	4819      	ldr	r0, [pc, #100]	; (800089c <Get_Key+0x2e0>)
 8000838:	f001 fb12 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 800083c:	2200      	movs	r2, #0
 800083e:	2120      	movs	r1, #32
 8000840:	4816      	ldr	r0, [pc, #88]	; (800089c <Get_Key+0x2e0>)
 8000842:	f001 fb0d 	bl	8001e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 8000846:	2201      	movs	r2, #1
 8000848:	2108      	movs	r1, #8
 800084a:	4814      	ldr	r0, [pc, #80]	; (800089c <Get_Key+0x2e0>)
 800084c:	f001 fb08 	bl	8001e60 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000850:	2140      	movs	r1, #64	; 0x40
 8000852:	4812      	ldr	r0, [pc, #72]	; (800089c <Get_Key+0x2e0>)
 8000854:	f001 faec 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d00b      	beq.n	8000876 <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 800085e:	bf00      	nop
 8000860:	2140      	movs	r1, #64	; 0x40
 8000862:	480e      	ldr	r0, [pc, #56]	; (800089c <Get_Key+0x2e0>)
 8000864:	f001 fae4 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1f8      	bne.n	8000860 <Get_Key+0x2a4>
		key='A';
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <Get_Key+0x2e4>)
 8000870:	2241      	movs	r2, #65	; 0x41
 8000872:	701a      	strb	r2, [r3, #0]
		break;
 8000874:	e048      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000876:	2180      	movs	r1, #128	; 0x80
 8000878:	480a      	ldr	r0, [pc, #40]	; (80008a4 <Get_Key+0x2e8>)
 800087a:	f001 fad9 	bl	8001e30 <HAL_GPIO_ReadPin>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d013      	beq.n	80008ac <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000884:	bf00      	nop
 8000886:	2180      	movs	r1, #128	; 0x80
 8000888:	4806      	ldr	r0, [pc, #24]	; (80008a4 <Get_Key+0x2e8>)
 800088a:	f001 fad1 	bl	8001e30 <HAL_GPIO_ReadPin>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d1f8      	bne.n	8000886 <Get_Key+0x2ca>
		key='B';
 8000894:	4b02      	ldr	r3, [pc, #8]	; (80008a0 <Get_Key+0x2e4>)
 8000896:	2242      	movs	r2, #66	; 0x42
 8000898:	701a      	strb	r2, [r3, #0]
		break;
 800089a:	e035      	b.n	8000908 <Get_Key+0x34c>
 800089c:	40020400 	.word	0x40020400
 80008a0:	20000090 	.word	0x20000090
 80008a4:	40020800 	.word	0x40020800
 80008a8:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80008ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b0:	481a      	ldr	r0, [pc, #104]	; (800091c <Get_Key+0x360>)
 80008b2:	f001 fabd 	bl	8001e30 <HAL_GPIO_ReadPin>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d00c      	beq.n	80008d6 <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80008bc:	bf00      	nop
 80008be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c2:	4816      	ldr	r0, [pc, #88]	; (800091c <Get_Key+0x360>)
 80008c4:	f001 fab4 	bl	8001e30 <HAL_GPIO_ReadPin>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d1f7      	bne.n	80008be <Get_Key+0x302>
		key='C';
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <Get_Key+0x364>)
 80008d0:	2243      	movs	r2, #67	; 0x43
 80008d2:	701a      	strb	r2, [r3, #0]
		break;
 80008d4:	e018      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80008d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008da:	4810      	ldr	r0, [pc, #64]	; (800091c <Get_Key+0x360>)
 80008dc:	f001 faa8 	bl	8001e30 <HAL_GPIO_ReadPin>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d00c      	beq.n	8000900 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80008e6:	bf00      	nop
 80008e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ec:	480b      	ldr	r0, [pc, #44]	; (800091c <Get_Key+0x360>)
 80008ee:	f001 fa9f 	bl	8001e30 <HAL_GPIO_ReadPin>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1f7      	bne.n	80008e8 <Get_Key+0x32c>
		key='D';
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <Get_Key+0x364>)
 80008fa:	2244      	movs	r2, #68	; 0x44
 80008fc:	701a      	strb	r2, [r3, #0]
		break;
 80008fe:	e003      	b.n	8000908 <Get_Key+0x34c>
	while(done)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	f47f ae60 	bne.w	80005c8 <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000908:	2120      	movs	r1, #32
 800090a:	4804      	ldr	r0, [pc, #16]	; (800091c <Get_Key+0x360>)
 800090c:	f001 fac1 	bl	8001e92 <HAL_GPIO_TogglePin>
	return(key);
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <Get_Key+0x364>)
 8000912:	781b      	ldrb	r3, [r3, #0]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40020000 	.word	0x40020000
 8000920:	20000090 	.word	0x20000090

08000924 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000928:	f000 ffa6 	bl	8001878 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800092c:	f000 f842 	bl	80009b4 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000930:	f000 f906 	bl	8000b40 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 8000934:	f000 f8da 	bl	8000aec <MX_USART2_UART_Init>
    MX_I2C1_Init();
 8000938:	f000 f8aa 	bl	8000a90 <MX_I2C1_Init>
    /* USER CODE BEGIN 2 */
    /* USER CODE BEGIN 2 */
    SSD1306_Init();
 800093c:	f000 fb12 	bl	8000f64 <SSD1306_Init>
    SSD1306_GotoXY(0, 0);
 8000940:	2100      	movs	r1, #0
 8000942:	2000      	movs	r0, #0
 8000944:	f000 fc78 	bl	8001238 <SSD1306_GotoXY>
    //SSD1306_Puts ("Voltage:", &Font_11x18, 1);
    SSD1306_Puts("Enter Code:", &Font_11x18, 1);
 8000948:	2201      	movs	r2, #1
 800094a:	4912      	ldr	r1, [pc, #72]	; (8000994 <main+0x70>)
 800094c:	4812      	ldr	r0, [pc, #72]	; (8000998 <main+0x74>)
 800094e:	f000 fd09 	bl	8001364 <SSD1306_Puts>
    SSD1306_GotoXY(0, 30);
 8000952:	211e      	movs	r1, #30
 8000954:	2000      	movs	r0, #0
 8000956:	f000 fc6f 	bl	8001238 <SSD1306_GotoXY>
    SSD1306_UpdateScreen();
 800095a:	f000 fbc7 	bl	80010ec <SSD1306_UpdateScreen>
    SSD1306_UpdateScreen();
 800095e:	f000 fbc5 	bl	80010ec <SSD1306_UpdateScreen>
    HAL_Delay(500);
 8000962:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000966:	f000 ffc9 	bl	80018fc <HAL_Delay>

    /* USER CODE END 2 */

    /* Init scheduler */
    osKernelInitialize();
 800096a:	f003 fd85 	bl	8004478 <osKernelInitialize>
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* creation of keypadTask */
    keypadTaskHandle = osThreadNew(StartKeypadTask, NULL, &keypadTask_attributes);
 800096e:	4a0b      	ldr	r2, [pc, #44]	; (800099c <main+0x78>)
 8000970:	2100      	movs	r1, #0
 8000972:	480b      	ldr	r0, [pc, #44]	; (80009a0 <main+0x7c>)
 8000974:	f003 fdca 	bl	800450c <osThreadNew>
 8000978:	4603      	mov	r3, r0
 800097a:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <main+0x80>)
 800097c:	6013      	str	r3, [r2, #0]

    /* creation of oledTask */
    oledTaskHandle = osThreadNew(StartOledTask, NULL, &oledTask_attributes);
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <main+0x84>)
 8000980:	2100      	movs	r1, #0
 8000982:	480a      	ldr	r0, [pc, #40]	; (80009ac <main+0x88>)
 8000984:	f003 fdc2 	bl	800450c <osThreadNew>
 8000988:	4603      	mov	r3, r0
 800098a:	4a09      	ldr	r2, [pc, #36]	; (80009b0 <main+0x8c>)
 800098c:	6013      	str	r3, [r2, #0]
    /* USER CODE BEGIN RTOS_EVENTS */
    /* add events, ... */
    /* USER CODE END RTOS_EVENTS */

    /* Start scheduler */
    osKernelStart();
 800098e:	f003 fd97 	bl	80044c0 <osKernelStart>

    /* We should never get here as control is now taken by the scheduler */
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
 8000992:	e7fe      	b.n	8000992 <main+0x6e>
 8000994:	20000000 	.word	0x20000000
 8000998:	080079f8 	.word	0x080079f8
 800099c:	08009aec 	.word	0x08009aec
 80009a0:	08000cb5 	.word	0x08000cb5
 80009a4:	20000130 	.word	0x20000130
 80009a8:	08009b10 	.word	0x08009b10
 80009ac:	08000e2d 	.word	0x08000e2d
 80009b0:	20000134 	.word	0x20000134

080009b4 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b094      	sub	sp, #80	; 0x50
 80009b8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	2234      	movs	r2, #52	; 0x34
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f006 fb26 	bl	8007014 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c8:	f107 0308 	add.w	r3, r7, #8
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 80009d8:	2300      	movs	r3, #0
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	4b2a      	ldr	r3, [pc, #168]	; (8000a88 <SystemClock_Config+0xd4>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	4a29      	ldr	r2, [pc, #164]	; (8000a88 <SystemClock_Config+0xd4>)
 80009e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e6:	6413      	str	r3, [r2, #64]	; 0x40
 80009e8:	4b27      	ldr	r3, [pc, #156]	; (8000a88 <SystemClock_Config+0xd4>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009f4:	2300      	movs	r3, #0
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	4b24      	ldr	r3, [pc, #144]	; (8000a8c <SystemClock_Config+0xd8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a00:	4a22      	ldr	r2, [pc, #136]	; (8000a8c <SystemClock_Config+0xd8>)
 8000a02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a06:	6013      	str	r3, [r2, #0]
 8000a08:	4b20      	ldr	r3, [pc, #128]	; (8000a8c <SystemClock_Config+0xd8>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	683b      	ldr	r3, [r7, #0]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a1c:	2310      	movs	r3, #16
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a20:	2302      	movs	r3, #2
 8000a22:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a24:	2300      	movs	r3, #0
 8000a26:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 16;
 8000a28:	2310      	movs	r3, #16
 8000a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 336;
 8000a2c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a30:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a32:	2304      	movs	r3, #4
 8000a34:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a36:	2302      	movs	r3, #2
 8000a38:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4618      	mov	r0, r3
 8000a44:	f002 fb88 	bl	8003158 <HAL_RCC_OscConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0x9e>
        Error_Handler();
 8000a4e:	f000 fa83 	bl	8000f58 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a52:	230f      	movs	r3, #15
 8000a54:	60bb      	str	r3, [r7, #8]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a56:	2302      	movs	r3, #2
 8000a58:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a62:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 fff6 	bl	8002a60 <HAL_RCC_ClockConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0xca>
        Error_Handler();
 8000a7a:	f000 fa6d 	bl	8000f58 <Error_Handler>
    }
}
 8000a7e:	bf00      	nop
 8000a80:	3750      	adds	r7, #80	; 0x50
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40007000 	.word	0x40007000

08000a90 <MX_I2C1_Init>:
/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <MX_I2C1_Init+0x50>)
 8000a96:	4a13      	ldr	r2, [pc, #76]	; (8000ae4 <MX_I2C1_Init+0x54>)
 8000a98:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 400000;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_I2C1_Init+0x50>)
 8000a9c:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <MX_I2C1_Init+0x58>)
 8000a9e:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <MX_I2C1_Init+0x50>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_I2C1_Init+0x50>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_I2C1_Init+0x50>)
 8000aae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ab2:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <MX_I2C1_Init+0x50>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_I2C1_Init+0x50>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac0:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <MX_I2C1_Init+0x50>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_I2C1_Init+0x50>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000acc:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <MX_I2C1_Init+0x50>)
 8000ace:	f001 f9fb 	bl	8001ec8 <HAL_I2C_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_I2C1_Init+0x4c>
        Error_Handler();
 8000ad8:	f000 fa3e 	bl	8000f58 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000094 	.word	0x20000094
 8000ae4:	40005400 	.word	0x40005400
 8000ae8:	00061a80 	.word	0x00061a80

08000aec <MX_USART2_UART_Init>:
/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000af2:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <MX_USART2_UART_Init+0x50>)
 8000af4:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 9600;
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000af8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000afc:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000b12:	220c      	movs	r2, #12
 8000b14:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000b24:	f003 f858 	bl	8003bd8 <HAL_UART_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USART2_UART_Init+0x46>
        Error_Handler();
 8000b2e:	f000 fa13 	bl	8000f58 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200000e8 	.word	0x200000e8
 8000b3c:	40004400 	.word	0x40004400

08000b40 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	4b44      	ldr	r3, [pc, #272]	; (8000c6c <MX_GPIO_Init+0x12c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a43      	ldr	r2, [pc, #268]	; (8000c6c <MX_GPIO_Init+0x12c>)
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b41      	ldr	r3, [pc, #260]	; (8000c6c <MX_GPIO_Init+0x12c>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0304 	and.w	r3, r3, #4
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b3d      	ldr	r3, [pc, #244]	; (8000c6c <MX_GPIO_Init+0x12c>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a3c      	ldr	r2, [pc, #240]	; (8000c6c <MX_GPIO_Init+0x12c>)
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b3a      	ldr	r3, [pc, #232]	; (8000c6c <MX_GPIO_Init+0x12c>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	4b36      	ldr	r3, [pc, #216]	; (8000c6c <MX_GPIO_Init+0x12c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a35      	ldr	r2, [pc, #212]	; (8000c6c <MX_GPIO_Init+0x12c>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b33      	ldr	r3, [pc, #204]	; (8000c6c <MX_GPIO_Init+0x12c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	4b2f      	ldr	r3, [pc, #188]	; (8000c6c <MX_GPIO_Init+0x12c>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a2e      	ldr	r2, [pc, #184]	; (8000c6c <MX_GPIO_Init+0x12c>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b2c      	ldr	r3, [pc, #176]	; (8000c6c <MX_GPIO_Init+0x12c>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_10, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
 8000bcc:	4828      	ldr	r0, [pc, #160]	; (8000c70 <MX_GPIO_Init+0x130>)
 8000bce:	f001 f947 	bl	8001e60 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, KC0_Pin | KC3_Pin | KC1_Pin | KC2_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000bd8:	4826      	ldr	r0, [pc, #152]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000bda:	f001 f941 	bl	8001e60 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : PA5 PA7 PA10 */
    GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_10;
 8000bde:	f44f 6394 	mov.w	r3, #1184	; 0x4a0
 8000be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	481e      	ldr	r0, [pc, #120]	; (8000c70 <MX_GPIO_Init+0x130>)
 8000bf8:	f000 ff86 	bl	8001b08 <HAL_GPIO_Init>

    /*Configure GPIO pins : KC0_Pin KC3_Pin KC1_Pin KC2_Pin */
    GPIO_InitStruct.Pin = KC0_Pin | KC3_Pin | KC1_Pin | KC2_Pin;
 8000bfc:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	4817      	ldr	r0, [pc, #92]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000c16:	f000 ff77 	bl	8001b08 <HAL_GPIO_Init>

    /*Configure GPIO pin : KR1_Pin */
    GPIO_InitStruct.Pin = KR1_Pin;
 8000c1a:	2380      	movs	r3, #128	; 0x80
 8000c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c22:	2302      	movs	r3, #2
 8000c24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4812      	ldr	r0, [pc, #72]	; (8000c78 <MX_GPIO_Init+0x138>)
 8000c2e:	f000 ff6b 	bl	8001b08 <HAL_GPIO_Init>

    /*Configure GPIO pins : KR3_Pin KR2_Pin */
    GPIO_InitStruct.Pin = KR3_Pin | KR2_Pin;
 8000c32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	480a      	ldr	r0, [pc, #40]	; (8000c70 <MX_GPIO_Init+0x130>)
 8000c48:	f000 ff5e 	bl	8001b08 <HAL_GPIO_Init>

    /*Configure GPIO pin : KR0_Pin */
    GPIO_InitStruct.Pin = KR0_Pin;
 8000c4c:	2340      	movs	r3, #64	; 0x40
 8000c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c54:	2302      	movs	r3, #2
 8000c56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_GPIO_Init+0x134>)
 8000c60:	f000 ff52 	bl	8001b08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c64:	bf00      	nop
 8000c66:	3728      	adds	r7, #40	; 0x28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020000 	.word	0x40020000
 8000c74:	40020400 	.word	0x40020400
 8000c78:	40020800 	.word	0x40020800

08000c7c <setNStars>:

/* USER CODE BEGIN 4 */
void setNStars(char *str, int n) {
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < n; i++) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	e007      	b.n	8000c9c <setNStars+0x20>
        str[i] = '*';
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	222a      	movs	r2, #42	; 0x2a
 8000c94:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; i++) {
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fa      	ldr	r2, [r7, #12]
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	dbf3      	blt.n	8000c8c <setNStars+0x10>
    }
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
	...

08000cb4 <StartKeypadTask>:
  * @brief  Function implementing the keypadTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartKeypadTask */
void StartKeypadTask(void *argument) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;) {
        /* D10 to D7 as input pins for row 0 to row 3. D6 to D3 as output for column pins C1 to C3*/
        key = Get_Key();
 8000cbc:	f7ff fc7e 	bl	80005bc <Get_Key>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4b4f      	ldr	r3, [pc, #316]	; (8000e04 <StartKeypadTask+0x150>)
 8000cc6:	701a      	strb	r2, [r3, #0]
        sprintf(hold, "%c", key);
 8000cc8:	4b4e      	ldr	r3, [pc, #312]	; (8000e04 <StartKeypadTask+0x150>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	494e      	ldr	r1, [pc, #312]	; (8000e08 <StartKeypadTask+0x154>)
 8000cd0:	484e      	ldr	r0, [pc, #312]	; (8000e0c <StartKeypadTask+0x158>)
 8000cd2:	f006 f97f 	bl	8006fd4 <siprintf>
        code[codeIndex] = key;
 8000cd6:	4b4e      	ldr	r3, [pc, #312]	; (8000e10 <StartKeypadTask+0x15c>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4b49      	ldr	r3, [pc, #292]	; (8000e04 <StartKeypadTask+0x150>)
 8000cde:	7819      	ldrb	r1, [r3, #0]
 8000ce0:	4b4c      	ldr	r3, [pc, #304]	; (8000e14 <StartKeypadTask+0x160>)
 8000ce2:	5499      	strb	r1, [r3, r2]

        // Save the code if the config mode is activated
        if (configMode == 1 && codeIndex > 4) {
 8000ce4:	4b4c      	ldr	r3, [pc, #304]	; (8000e18 <StartKeypadTask+0x164>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d12b      	bne.n	8000d44 <StartKeypadTask+0x90>
 8000cec:	4b48      	ldr	r3, [pc, #288]	; (8000e10 <StartKeypadTask+0x15c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b04      	cmp	r3, #4
 8000cf2:	d927      	bls.n	8000d44 <StartKeypadTask+0x90>
            configMode = 0;
 8000cf4:	4b48      	ldr	r3, [pc, #288]	; (8000e18 <StartKeypadTask+0x164>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < strlen(code); i++) {
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	e00b      	b.n	8000d18 <StartKeypadTask+0x64>
                savedCode[i] = code[i];
 8000d00:	4a44      	ldr	r2, [pc, #272]	; (8000e14 <StartKeypadTask+0x160>)
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	4413      	add	r3, r2
 8000d06:	7819      	ldrb	r1, [r3, #0]
 8000d08:	4a44      	ldr	r2, [pc, #272]	; (8000e1c <StartKeypadTask+0x168>)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	460a      	mov	r2, r1
 8000d10:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < strlen(code); i++) {
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	3301      	adds	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	483e      	ldr	r0, [pc, #248]	; (8000e14 <StartKeypadTask+0x160>)
 8000d1a:	f7ff fa79 	bl	8000210 <strlen>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d8ec      	bhi.n	8000d00 <StartKeypadTask+0x4c>
            }
            codeIndex = 0;
 8000d26:	4b3a      	ldr	r3, [pc, #232]	; (8000e10 <StartKeypadTask+0x15c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d32:	483b      	ldr	r0, [pc, #236]	; (8000e20 <StartKeypadTask+0x16c>)
 8000d34:	f001 f894 	bl	8001e60 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2180      	movs	r1, #128	; 0x80
 8000d3c:	4838      	ldr	r0, [pc, #224]	; (8000e20 <StartKeypadTask+0x16c>)
 8000d3e:	f001 f88f 	bl	8001e60 <HAL_GPIO_WritePin>
 8000d42:	e050      	b.n	8000de6 <StartKeypadTask+0x132>
        } else if (configMode == 0 && codeIndex > 4) {
 8000d44:	4b34      	ldr	r3, [pc, #208]	; (8000e18 <StartKeypadTask+0x164>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d146      	bne.n	8000dda <StartKeypadTask+0x126>
 8000d4c:	4b30      	ldr	r3, [pc, #192]	; (8000e10 <StartKeypadTask+0x15c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b04      	cmp	r3, #4
 8000d52:	d942      	bls.n	8000dda <StartKeypadTask+0x126>
            // Check if code is the same for each item in array
            uint8_t sameCode = 1;
 8000d54:	2301      	movs	r3, #1
 8000d56:	74fb      	strb	r3, [r7, #19]
            for (int i = 0; i < strlen(code); i++) {
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	e00e      	b.n	8000d7c <StartKeypadTask+0xc8>
                if (code[i] != savedCode[i]) {
 8000d5e:	4a2d      	ldr	r2, [pc, #180]	; (8000e14 <StartKeypadTask+0x160>)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4413      	add	r3, r2
 8000d64:	781a      	ldrb	r2, [r3, #0]
 8000d66:	492d      	ldr	r1, [pc, #180]	; (8000e1c <StartKeypadTask+0x168>)
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	440b      	add	r3, r1
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d001      	beq.n	8000d76 <StartKeypadTask+0xc2>
                    sameCode = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	74fb      	strb	r3, [r7, #19]
            for (int i = 0; i < strlen(code); i++) {
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	4825      	ldr	r0, [pc, #148]	; (8000e14 <StartKeypadTask+0x160>)
 8000d7e:	f7ff fa47 	bl	8000210 <strlen>
 8000d82:	4602      	mov	r2, r0
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d8e9      	bhi.n	8000d5e <StartKeypadTask+0xaa>
                }
            }
            // If the code is the same arm/disarm system
            if (sameCode == 1) {
 8000d8a:	7cfb      	ldrb	r3, [r7, #19]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d120      	bne.n	8000dd2 <StartKeypadTask+0x11e>
                if (armed == 1) {
 8000d90:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <StartKeypadTask+0x170>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d10e      	bne.n	8000db6 <StartKeypadTask+0x102>
                    armed = 0;
 8000d98:	4b22      	ldr	r3, [pc, #136]	; (8000e24 <StartKeypadTask+0x170>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da4:	481e      	ldr	r0, [pc, #120]	; (8000e20 <StartKeypadTask+0x16c>)
 8000da6:	f001 f85b 	bl	8001e60 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2180      	movs	r1, #128	; 0x80
 8000dae:	481c      	ldr	r0, [pc, #112]	; (8000e20 <StartKeypadTask+0x16c>)
 8000db0:	f001 f856 	bl	8001e60 <HAL_GPIO_WritePin>
 8000db4:	e00d      	b.n	8000dd2 <StartKeypadTask+0x11e>
                } else {
                    armed = 1;
 8000db6:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <StartKeypadTask+0x170>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dc2:	4817      	ldr	r0, [pc, #92]	; (8000e20 <StartKeypadTask+0x16c>)
 8000dc4:	f001 f84c 	bl	8001e60 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2180      	movs	r1, #128	; 0x80
 8000dcc:	4814      	ldr	r0, [pc, #80]	; (8000e20 <StartKeypadTask+0x16c>)
 8000dce:	f001 f847 	bl	8001e60 <HAL_GPIO_WritePin>
                }
            }
            codeIndex = 0;
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <StartKeypadTask+0x15c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	701a      	strb	r2, [r3, #0]
        } else if (configMode == 0 && codeIndex > 4) {
 8000dd8:	e005      	b.n	8000de6 <StartKeypadTask+0x132>
        } else {
            codeIndex = codeIndex + 1;
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <StartKeypadTask+0x15c>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	3301      	adds	r3, #1
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <StartKeypadTask+0x15c>)
 8000de4:	701a      	strb	r2, [r3, #0]
        }

        HAL_UART_Transmit(&huart2, (uint8_t *) hold, strlen(hold), 100);
 8000de6:	4809      	ldr	r0, [pc, #36]	; (8000e0c <StartKeypadTask+0x158>)
 8000de8:	f7ff fa12 	bl	8000210 <strlen>
 8000dec:	4603      	mov	r3, r0
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	2364      	movs	r3, #100	; 0x64
 8000df2:	4906      	ldr	r1, [pc, #24]	; (8000e0c <StartKeypadTask+0x158>)
 8000df4:	480c      	ldr	r0, [pc, #48]	; (8000e28 <StartKeypadTask+0x174>)
 8000df6:	f002 ff3f 	bl	8003c78 <HAL_UART_Transmit>
        HAL_Delay(500);
 8000dfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dfe:	f000 fd7d 	bl	80018fc <HAL_Delay>
        key = Get_Key();
 8000e02:	e75b      	b.n	8000cbc <StartKeypadTask+0x8>
 8000e04:	20000090 	.word	0x20000090
 8000e08:	08007a04 	.word	0x08007a04
 8000e0c:	20000138 	.word	0x20000138
 8000e10:	2000014c 	.word	0x2000014c
 8000e14:	2000013c 	.word	0x2000013c
 8000e18:	20000010 	.word	0x20000010
 8000e1c:	20000144 	.word	0x20000144
 8000e20:	40020000 	.word	0x40020000
 8000e24:	2000014d 	.word	0x2000014d
 8000e28:	200000e8 	.word	0x200000e8

08000e2c <StartOledTask>:
* @brief Function implementing the oledTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOledTask */
void StartOledTask(void *argument) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartOledTask */
    /* Infinite loop */
    for (;;) {
        if (codeIndex > 0) {
 8000e34:	4b37      	ldr	r3, [pc, #220]	; (8000f14 <StartOledTask+0xe8>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d038      	beq.n	8000eae <StartOledTask+0x82>
        	if (codeIndex == 1) {
 8000e3c:	4b35      	ldr	r3, [pc, #212]	; (8000f14 <StartOledTask+0xe8>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d10a      	bne.n	8000e5a <StartOledTask+0x2e>
        		SSD1306_GotoXY(0, 30);
 8000e44:	211e      	movs	r1, #30
 8000e46:	2000      	movs	r0, #0
 8000e48:	f000 f9f6 	bl	8001238 <SSD1306_GotoXY>
        		SSD1306_UpdateScreen();
 8000e4c:	f000 f94e 	bl	80010ec <SSD1306_UpdateScreen>
        		SSD1306_Puts("           ", &Font_16x26, 1);
 8000e50:	2201      	movs	r2, #1
 8000e52:	4931      	ldr	r1, [pc, #196]	; (8000f18 <StartOledTask+0xec>)
 8000e54:	4831      	ldr	r0, [pc, #196]	; (8000f1c <StartOledTask+0xf0>)
 8000e56:	f000 fa85 	bl	8001364 <SSD1306_Puts>
        	}
            char str[10] = "";
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
 8000e5e:	f107 0320 	add.w	r3, r7, #32
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	809a      	strh	r2, [r3, #4]
            char str2[8] = "";
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61bb      	str	r3, [r7, #24]
            setNStars(str2, codeIndex);
 8000e70:	4b28      	ldr	r3, [pc, #160]	; (8000f14 <StartOledTask+0xe8>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fefd 	bl	8000c7c <setNStars>
            snprintf(str, sizeof(str2), str2);
 8000e82:	f107 0214 	add.w	r2, r7, #20
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	2108      	movs	r1, #8
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f006 f86d 	bl	8006f6c <sniprintf>
            SSD1306_GotoXY(0, 30);
 8000e92:	211e      	movs	r1, #30
 8000e94:	2000      	movs	r0, #0
 8000e96:	f000 f9cf 	bl	8001238 <SSD1306_GotoXY>
            SSD1306_UpdateScreen();
 8000e9a:	f000 f927 	bl	80010ec <SSD1306_UpdateScreen>
            SSD1306_Puts(str2, &Font_16x26, 1);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	491c      	ldr	r1, [pc, #112]	; (8000f18 <StartOledTask+0xec>)
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 fa5c 	bl	8001364 <SSD1306_Puts>
 8000eac:	e02a      	b.n	8000f04 <StartOledTask+0xd8>
        } else if (configMode == 0) {
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <StartOledTask+0xf4>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d126      	bne.n	8000f04 <StartOledTask+0xd8>
            char str[10] = "";
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	f107 030c 	add.w	r3, r7, #12
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	809a      	strh	r2, [r3, #4]
            if (armed == 1) {
 8000ec4:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <StartOledTask+0xf8>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d107      	bne.n	8000edc <StartOledTask+0xb0>
                snprintf(str, sizeof(str), "ARME      ");
 8000ecc:	f107 0308 	add.w	r3, r7, #8
 8000ed0:	4a15      	ldr	r2, [pc, #84]	; (8000f28 <StartOledTask+0xfc>)
 8000ed2:	210a      	movs	r1, #10
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f006 f849 	bl	8006f6c <sniprintf>
 8000eda:	e006      	b.n	8000eea <StartOledTask+0xbe>
            } else {
                snprintf(str, sizeof(str), "NON ARME  ");
 8000edc:	f107 0308 	add.w	r3, r7, #8
 8000ee0:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <StartOledTask+0x100>)
 8000ee2:	210a      	movs	r1, #10
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f006 f841 	bl	8006f6c <sniprintf>
            }
            SSD1306_GotoXY(0, 30);
 8000eea:	211e      	movs	r1, #30
 8000eec:	2000      	movs	r0, #0
 8000eee:	f000 f9a3 	bl	8001238 <SSD1306_GotoXY>
            SSD1306_UpdateScreen();
 8000ef2:	f000 f8fb 	bl	80010ec <SSD1306_UpdateScreen>
            SSD1306_Puts(str, &Font_11x18, 1);
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	2201      	movs	r2, #1
 8000efc:	490c      	ldr	r1, [pc, #48]	; (8000f30 <StartOledTask+0x104>)
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fa30 	bl	8001364 <SSD1306_Puts>
        }
        SSD1306_UpdateScreen();
 8000f04:	f000 f8f2 	bl	80010ec <SSD1306_UpdateScreen>
        osDelay(300);
 8000f08:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f0c:	f003 fb90 	bl	8004630 <osDelay>
        if (codeIndex > 0) {
 8000f10:	e790      	b.n	8000e34 <StartOledTask+0x8>
 8000f12:	bf00      	nop
 8000f14:	2000014c 	.word	0x2000014c
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	08007a08 	.word	0x08007a08
 8000f20:	20000010 	.word	0x20000010
 8000f24:	2000014d 	.word	0x2000014d
 8000f28:	08007a14 	.word	0x08007a14
 8000f2c:	08007a20 	.word	0x08007a20
 8000f30:	20000000 	.word	0x20000000

08000f34 <HAL_TIM_PeriodElapsedCallback>:
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */

    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM6) {
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d101      	bne.n	8000f4a <HAL_TIM_PeriodElapsedCallback+0x16>
        HAL_IncTick();
 8000f46:	f000 fcb9 	bl	80018bc <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */

    /* USER CODE END Callback 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40001000 	.word	0x40001000

08000f58 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f5c:	b672      	cpsid	i
}
 8000f5e:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000f60:	e7fe      	b.n	8000f60 <Error_Handler+0x8>
	...

08000f64 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000f6a:	f000 fa21 	bl	80013b0 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000f6e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000f72:	2201      	movs	r2, #1
 8000f74:	2178      	movs	r1, #120	; 0x78
 8000f76:	485b      	ldr	r0, [pc, #364]	; (80010e4 <SSD1306_Init+0x180>)
 8000f78:	f001 f9e8 	bl	800234c <HAL_I2C_IsDeviceReady>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e0a9      	b.n	80010da <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000f86:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000f8a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f8c:	e002      	b.n	8000f94 <SSD1306_Init+0x30>
		p--;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3b01      	subs	r3, #1
 8000f92:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f9      	bne.n	8000f8e <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000f9a:	22ae      	movs	r2, #174	; 0xae
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2078      	movs	r0, #120	; 0x78
 8000fa0:	f000 fa82 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000fa4:	2220      	movs	r2, #32
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	2078      	movs	r0, #120	; 0x78
 8000faa:	f000 fa7d 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000fae:	2210      	movs	r2, #16
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2078      	movs	r0, #120	; 0x78
 8000fb4:	f000 fa78 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000fb8:	22b0      	movs	r2, #176	; 0xb0
 8000fba:	2100      	movs	r1, #0
 8000fbc:	2078      	movs	r0, #120	; 0x78
 8000fbe:	f000 fa73 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000fc2:	22c8      	movs	r2, #200	; 0xc8
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2078      	movs	r0, #120	; 0x78
 8000fc8:	f000 fa6e 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2078      	movs	r0, #120	; 0x78
 8000fd2:	f000 fa69 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000fd6:	2210      	movs	r2, #16
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2078      	movs	r0, #120	; 0x78
 8000fdc:	f000 fa64 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000fe0:	2240      	movs	r2, #64	; 0x40
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2078      	movs	r0, #120	; 0x78
 8000fe6:	f000 fa5f 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000fea:	2281      	movs	r2, #129	; 0x81
 8000fec:	2100      	movs	r1, #0
 8000fee:	2078      	movs	r0, #120	; 0x78
 8000ff0:	f000 fa5a 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000ff4:	22ff      	movs	r2, #255	; 0xff
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2078      	movs	r0, #120	; 0x78
 8000ffa:	f000 fa55 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000ffe:	22a1      	movs	r2, #161	; 0xa1
 8001000:	2100      	movs	r1, #0
 8001002:	2078      	movs	r0, #120	; 0x78
 8001004:	f000 fa50 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001008:	22a6      	movs	r2, #166	; 0xa6
 800100a:	2100      	movs	r1, #0
 800100c:	2078      	movs	r0, #120	; 0x78
 800100e:	f000 fa4b 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001012:	22a8      	movs	r2, #168	; 0xa8
 8001014:	2100      	movs	r1, #0
 8001016:	2078      	movs	r0, #120	; 0x78
 8001018:	f000 fa46 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800101c:	223f      	movs	r2, #63	; 0x3f
 800101e:	2100      	movs	r1, #0
 8001020:	2078      	movs	r0, #120	; 0x78
 8001022:	f000 fa41 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001026:	22a4      	movs	r2, #164	; 0xa4
 8001028:	2100      	movs	r1, #0
 800102a:	2078      	movs	r0, #120	; 0x78
 800102c:	f000 fa3c 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001030:	22d3      	movs	r2, #211	; 0xd3
 8001032:	2100      	movs	r1, #0
 8001034:	2078      	movs	r0, #120	; 0x78
 8001036:	f000 fa37 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	2078      	movs	r0, #120	; 0x78
 8001040:	f000 fa32 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001044:	22d5      	movs	r2, #213	; 0xd5
 8001046:	2100      	movs	r1, #0
 8001048:	2078      	movs	r0, #120	; 0x78
 800104a:	f000 fa2d 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800104e:	22f0      	movs	r2, #240	; 0xf0
 8001050:	2100      	movs	r1, #0
 8001052:	2078      	movs	r0, #120	; 0x78
 8001054:	f000 fa28 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001058:	22d9      	movs	r2, #217	; 0xd9
 800105a:	2100      	movs	r1, #0
 800105c:	2078      	movs	r0, #120	; 0x78
 800105e:	f000 fa23 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001062:	2222      	movs	r2, #34	; 0x22
 8001064:	2100      	movs	r1, #0
 8001066:	2078      	movs	r0, #120	; 0x78
 8001068:	f000 fa1e 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800106c:	22da      	movs	r2, #218	; 0xda
 800106e:	2100      	movs	r1, #0
 8001070:	2078      	movs	r0, #120	; 0x78
 8001072:	f000 fa19 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001076:	2212      	movs	r2, #18
 8001078:	2100      	movs	r1, #0
 800107a:	2078      	movs	r0, #120	; 0x78
 800107c:	f000 fa14 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001080:	22db      	movs	r2, #219	; 0xdb
 8001082:	2100      	movs	r1, #0
 8001084:	2078      	movs	r0, #120	; 0x78
 8001086:	f000 fa0f 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800108a:	2220      	movs	r2, #32
 800108c:	2100      	movs	r1, #0
 800108e:	2078      	movs	r0, #120	; 0x78
 8001090:	f000 fa0a 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001094:	228d      	movs	r2, #141	; 0x8d
 8001096:	2100      	movs	r1, #0
 8001098:	2078      	movs	r0, #120	; 0x78
 800109a:	f000 fa05 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800109e:	2214      	movs	r2, #20
 80010a0:	2100      	movs	r1, #0
 80010a2:	2078      	movs	r0, #120	; 0x78
 80010a4:	f000 fa00 	bl	80014a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80010a8:	22af      	movs	r2, #175	; 0xaf
 80010aa:	2100      	movs	r1, #0
 80010ac:	2078      	movs	r0, #120	; 0x78
 80010ae:	f000 f9fb 	bl	80014a8 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80010b2:	222e      	movs	r2, #46	; 0x2e
 80010b4:	2100      	movs	r1, #0
 80010b6:	2078      	movs	r0, #120	; 0x78
 80010b8:	f000 f9f6 	bl	80014a8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80010bc:	2000      	movs	r0, #0
 80010be:	f000 f843 	bl	8001148 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80010c2:	f000 f813 	bl	80010ec <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <SSD1306_Init+0x184>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <SSD1306_Init+0x184>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80010d2:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <SSD1306_Init+0x184>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80010d8:	2301      	movs	r3, #1
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000094 	.word	0x20000094
 80010e8:	20000550 	.word	0x20000550

080010ec <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80010f2:	2300      	movs	r3, #0
 80010f4:	71fb      	strb	r3, [r7, #7]
 80010f6:	e01d      	b.n	8001134 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	3b50      	subs	r3, #80	; 0x50
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	461a      	mov	r2, r3
 8001100:	2100      	movs	r1, #0
 8001102:	2078      	movs	r0, #120	; 0x78
 8001104:	f000 f9d0 	bl	80014a8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001108:	2200      	movs	r2, #0
 800110a:	2100      	movs	r1, #0
 800110c:	2078      	movs	r0, #120	; 0x78
 800110e:	f000 f9cb 	bl	80014a8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001112:	2210      	movs	r2, #16
 8001114:	2100      	movs	r1, #0
 8001116:	2078      	movs	r0, #120	; 0x78
 8001118:	f000 f9c6 	bl	80014a8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	01db      	lsls	r3, r3, #7
 8001120:	4a08      	ldr	r2, [pc, #32]	; (8001144 <SSD1306_UpdateScreen+0x58>)
 8001122:	441a      	add	r2, r3
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	2140      	movs	r1, #64	; 0x40
 8001128:	2078      	movs	r0, #120	; 0x78
 800112a:	f000 f957 	bl	80013dc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	3301      	adds	r3, #1
 8001132:	71fb      	strb	r3, [r7, #7]
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	2b07      	cmp	r3, #7
 8001138:	d9de      	bls.n	80010f8 <SSD1306_UpdateScreen+0xc>
	}
}
 800113a:	bf00      	nop
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000150 	.word	0x20000150

08001148 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d101      	bne.n	800115c <SSD1306_Fill+0x14>
 8001158:	2300      	movs	r3, #0
 800115a:	e000      	b.n	800115e <SSD1306_Fill+0x16>
 800115c:	23ff      	movs	r3, #255	; 0xff
 800115e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001162:	4619      	mov	r1, r3
 8001164:	4803      	ldr	r0, [pc, #12]	; (8001174 <SSD1306_Fill+0x2c>)
 8001166:	f005 ff55 	bl	8007014 <memset>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000150 	.word	0x20000150

08001178 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	80fb      	strh	r3, [r7, #6]
 8001182:	460b      	mov	r3, r1
 8001184:	80bb      	strh	r3, [r7, #4]
 8001186:	4613      	mov	r3, r2
 8001188:	70fb      	strb	r3, [r7, #3]
	if (
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	2b7f      	cmp	r3, #127	; 0x7f
 800118e:	d848      	bhi.n	8001222 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001190:	88bb      	ldrh	r3, [r7, #4]
 8001192:	2b3f      	cmp	r3, #63	; 0x3f
 8001194:	d845      	bhi.n	8001222 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001196:	4b26      	ldr	r3, [pc, #152]	; (8001230 <SSD1306_DrawPixel+0xb8>)
 8001198:	791b      	ldrb	r3, [r3, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d006      	beq.n	80011ac <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800119e:	78fb      	ldrb	r3, [r7, #3]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	bf0c      	ite	eq
 80011a4:	2301      	moveq	r3, #1
 80011a6:	2300      	movne	r3, #0
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d11a      	bne.n	80011e8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80011b2:	88fa      	ldrh	r2, [r7, #6]
 80011b4:	88bb      	ldrh	r3, [r7, #4]
 80011b6:	08db      	lsrs	r3, r3, #3
 80011b8:	b298      	uxth	r0, r3
 80011ba:	4603      	mov	r3, r0
 80011bc:	01db      	lsls	r3, r3, #7
 80011be:	4413      	add	r3, r2
 80011c0:	4a1c      	ldr	r2, [pc, #112]	; (8001234 <SSD1306_DrawPixel+0xbc>)
 80011c2:	5cd3      	ldrb	r3, [r2, r3]
 80011c4:	b25a      	sxtb	r2, r3
 80011c6:	88bb      	ldrh	r3, [r7, #4]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	2101      	movs	r1, #1
 80011ce:	fa01 f303 	lsl.w	r3, r1, r3
 80011d2:	b25b      	sxtb	r3, r3
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b259      	sxtb	r1, r3
 80011d8:	88fa      	ldrh	r2, [r7, #6]
 80011da:	4603      	mov	r3, r0
 80011dc:	01db      	lsls	r3, r3, #7
 80011de:	4413      	add	r3, r2
 80011e0:	b2c9      	uxtb	r1, r1
 80011e2:	4a14      	ldr	r2, [pc, #80]	; (8001234 <SSD1306_DrawPixel+0xbc>)
 80011e4:	54d1      	strb	r1, [r2, r3]
 80011e6:	e01d      	b.n	8001224 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80011e8:	88fa      	ldrh	r2, [r7, #6]
 80011ea:	88bb      	ldrh	r3, [r7, #4]
 80011ec:	08db      	lsrs	r3, r3, #3
 80011ee:	b298      	uxth	r0, r3
 80011f0:	4603      	mov	r3, r0
 80011f2:	01db      	lsls	r3, r3, #7
 80011f4:	4413      	add	r3, r2
 80011f6:	4a0f      	ldr	r2, [pc, #60]	; (8001234 <SSD1306_DrawPixel+0xbc>)
 80011f8:	5cd3      	ldrb	r3, [r2, r3]
 80011fa:	b25a      	sxtb	r2, r3
 80011fc:	88bb      	ldrh	r3, [r7, #4]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	2101      	movs	r1, #1
 8001204:	fa01 f303 	lsl.w	r3, r1, r3
 8001208:	b25b      	sxtb	r3, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	b25b      	sxtb	r3, r3
 800120e:	4013      	ands	r3, r2
 8001210:	b259      	sxtb	r1, r3
 8001212:	88fa      	ldrh	r2, [r7, #6]
 8001214:	4603      	mov	r3, r0
 8001216:	01db      	lsls	r3, r3, #7
 8001218:	4413      	add	r3, r2
 800121a:	b2c9      	uxtb	r1, r1
 800121c:	4a05      	ldr	r2, [pc, #20]	; (8001234 <SSD1306_DrawPixel+0xbc>)
 800121e:	54d1      	strb	r1, [r2, r3]
 8001220:	e000      	b.n	8001224 <SSD1306_DrawPixel+0xac>
		return;
 8001222:	bf00      	nop
	}
}
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000550 	.word	0x20000550
 8001234:	20000150 	.word	0x20000150

08001238 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	460a      	mov	r2, r1
 8001242:	80fb      	strh	r3, [r7, #6]
 8001244:	4613      	mov	r3, r2
 8001246:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001248:	4a05      	ldr	r2, [pc, #20]	; (8001260 <SSD1306_GotoXY+0x28>)
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800124e:	4a04      	ldr	r2, [pc, #16]	; (8001260 <SSD1306_GotoXY+0x28>)
 8001250:	88bb      	ldrh	r3, [r7, #4]
 8001252:	8053      	strh	r3, [r2, #2]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	20000550 	.word	0x20000550

08001264 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	71fb      	strb	r3, [r7, #7]
 8001270:	4613      	mov	r3, r2
 8001272:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001274:	4b3a      	ldr	r3, [pc, #232]	; (8001360 <SSD1306_Putc+0xfc>)
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	4413      	add	r3, r2
	if (
 8001280:	2b7f      	cmp	r3, #127	; 0x7f
 8001282:	dc07      	bgt.n	8001294 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001284:	4b36      	ldr	r3, [pc, #216]	; (8001360 <SSD1306_Putc+0xfc>)
 8001286:	885b      	ldrh	r3, [r3, #2]
 8001288:	461a      	mov	r2, r3
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	785b      	ldrb	r3, [r3, #1]
 800128e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001290:	2b3f      	cmp	r3, #63	; 0x3f
 8001292:	dd01      	ble.n	8001298 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001294:	2300      	movs	r3, #0
 8001296:	e05e      	b.n	8001356 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	e04b      	b.n	8001336 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	3b20      	subs	r3, #32
 80012a6:	6839      	ldr	r1, [r7, #0]
 80012a8:	7849      	ldrb	r1, [r1, #1]
 80012aa:	fb01 f303 	mul.w	r3, r1, r3
 80012ae:	4619      	mov	r1, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	440b      	add	r3, r1
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	4413      	add	r3, r2
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	e030      	b.n	8001324 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d010      	beq.n	80012f4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80012d2:	4b23      	ldr	r3, [pc, #140]	; (8001360 <SSD1306_Putc+0xfc>)
 80012d4:	881a      	ldrh	r2, [r3, #0]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	b29b      	uxth	r3, r3
 80012da:	4413      	add	r3, r2
 80012dc:	b298      	uxth	r0, r3
 80012de:	4b20      	ldr	r3, [pc, #128]	; (8001360 <SSD1306_Putc+0xfc>)
 80012e0:	885a      	ldrh	r2, [r3, #2]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	4413      	add	r3, r2
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	79ba      	ldrb	r2, [r7, #6]
 80012ec:	4619      	mov	r1, r3
 80012ee:	f7ff ff43 	bl	8001178 <SSD1306_DrawPixel>
 80012f2:	e014      	b.n	800131e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <SSD1306_Putc+0xfc>)
 80012f6:	881a      	ldrh	r2, [r3, #0]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4413      	add	r3, r2
 80012fe:	b298      	uxth	r0, r3
 8001300:	4b17      	ldr	r3, [pc, #92]	; (8001360 <SSD1306_Putc+0xfc>)
 8001302:	885a      	ldrh	r2, [r3, #2]
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	b29b      	uxth	r3, r3
 8001308:	4413      	add	r3, r2
 800130a:	b299      	uxth	r1, r3
 800130c:	79bb      	ldrb	r3, [r7, #6]
 800130e:	2b00      	cmp	r3, #0
 8001310:	bf0c      	ite	eq
 8001312:	2301      	moveq	r3, #1
 8001314:	2300      	movne	r3, #0
 8001316:	b2db      	uxtb	r3, r3
 8001318:	461a      	mov	r2, r3
 800131a:	f7ff ff2d 	bl	8001178 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	3301      	adds	r3, #1
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	4293      	cmp	r3, r2
 800132e:	d3c8      	bcc.n	80012c2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	3301      	adds	r3, #1
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	785b      	ldrb	r3, [r3, #1]
 800133a:	461a      	mov	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	4293      	cmp	r3, r2
 8001340:	d3ad      	bcc.n	800129e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <SSD1306_Putc+0xfc>)
 8001344:	881a      	ldrh	r2, [r3, #0]
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b29b      	uxth	r3, r3
 800134c:	4413      	add	r3, r2
 800134e:	b29a      	uxth	r2, r3
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <SSD1306_Putc+0xfc>)
 8001352:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001354:	79fb      	ldrb	r3, [r7, #7]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000550 	.word	0x20000550

08001364 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	4613      	mov	r3, r2
 8001370:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001372:	e012      	b.n	800139a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	79fa      	ldrb	r2, [r7, #7]
 800137a:	68b9      	ldr	r1, [r7, #8]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff71 	bl	8001264 <SSD1306_Putc>
 8001382:	4603      	mov	r3, r0
 8001384:	461a      	mov	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	d002      	beq.n	8001394 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	e008      	b.n	80013a6 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	3301      	adds	r3, #1
 8001398:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1e8      	bne.n	8001374 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	781b      	ldrb	r3, [r3, #0]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <ssd1306_I2C_Init+0x28>)
 80013b8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013ba:	e002      	b.n	80013c2 <ssd1306_I2C_Init+0x12>
		p--;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1f9      	bne.n	80013bc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	0003d090 	.word	0x0003d090

080013dc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80013dc:	b590      	push	{r4, r7, lr}
 80013de:	b0c7      	sub	sp, #284	; 0x11c
 80013e0:	af02      	add	r7, sp, #8
 80013e2:	4604      	mov	r4, r0
 80013e4:	4608      	mov	r0, r1
 80013e6:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80013ea:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80013ee:	600a      	str	r2, [r1, #0]
 80013f0:	4619      	mov	r1, r3
 80013f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013f6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80013fa:	4622      	mov	r2, r4
 80013fc:	701a      	strb	r2, [r3, #0]
 80013fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001402:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001406:	4602      	mov	r2, r0
 8001408:	701a      	strb	r2, [r3, #0]
 800140a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800140e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001412:	460a      	mov	r2, r1
 8001414:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001416:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800141a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800141e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001422:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001426:	7812      	ldrb	r2, [r2, #0]
 8001428:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800142a:	2300      	movs	r3, #0
 800142c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001430:	e015      	b.n	800145e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001432:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001436:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800143a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800143e:	6812      	ldr	r2, [r2, #0]
 8001440:	441a      	add	r2, r3
 8001442:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001446:	3301      	adds	r3, #1
 8001448:	7811      	ldrb	r1, [r2, #0]
 800144a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800144e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001452:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001454:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001458:	3301      	adds	r3, #1
 800145a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800145e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001462:	b29b      	uxth	r3, r3
 8001464:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001468:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800146c:	8812      	ldrh	r2, [r2, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	d8df      	bhi.n	8001432 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001472:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001476:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	b299      	uxth	r1, r3
 800147e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001482:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	3301      	adds	r3, #1
 800148a:	b29b      	uxth	r3, r3
 800148c:	f107 020c 	add.w	r2, r7, #12
 8001490:	200a      	movs	r0, #10
 8001492:	9000      	str	r0, [sp, #0]
 8001494:	4803      	ldr	r0, [pc, #12]	; (80014a4 <ssd1306_I2C_WriteMulti+0xc8>)
 8001496:	f000 fe5b 	bl	8002150 <HAL_I2C_Master_Transmit>
}
 800149a:	bf00      	nop
 800149c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd90      	pop	{r4, r7, pc}
 80014a4:	20000094 	.word	0x20000094

080014a8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af02      	add	r7, sp, #8
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
 80014b2:	460b      	mov	r3, r1
 80014b4:	71bb      	strb	r3, [r7, #6]
 80014b6:	4613      	mov	r3, r2
 80014b8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80014ba:	79bb      	ldrb	r3, [r7, #6]
 80014bc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80014be:	797b      	ldrb	r3, [r7, #5]
 80014c0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	b299      	uxth	r1, r3
 80014c6:	f107 020c 	add.w	r2, r7, #12
 80014ca:	230a      	movs	r3, #10
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	2302      	movs	r3, #2
 80014d0:	4803      	ldr	r0, [pc, #12]	; (80014e0 <ssd1306_I2C_Write+0x38>)
 80014d2:	f000 fe3d 	bl	8002150 <HAL_I2C_Master_Transmit>
}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000094 	.word	0x20000094

080014e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_MspInit+0x54>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	4a11      	ldr	r2, [pc, #68]	; (8001538 <HAL_MspInit+0x54>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f8:	6453      	str	r3, [r2, #68]	; 0x44
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <HAL_MspInit+0x54>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <HAL_MspInit+0x54>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <HAL_MspInit+0x54>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001514:	6413      	str	r3, [r2, #64]	; 0x40
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <HAL_MspInit+0x54>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	210f      	movs	r1, #15
 8001526:	f06f 0001 	mvn.w	r0, #1
 800152a:	f000 fac3 	bl	8001ab4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800

0800153c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a19      	ldr	r2, [pc, #100]	; (80015c0 <HAL_I2C_MspInit+0x84>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d12c      	bne.n	80015b8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a17      	ldr	r2, [pc, #92]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800157a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800157e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001580:	2312      	movs	r3, #18
 8001582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001588:	2303      	movs	r3, #3
 800158a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800158c:	2304      	movs	r3, #4
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	480c      	ldr	r0, [pc, #48]	; (80015c8 <HAL_I2C_MspInit+0x8c>)
 8001598:	f000 fab6 	bl	8001b08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	4a07      	ldr	r2, [pc, #28]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 80015a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015aa:	6413      	str	r3, [r2, #64]	; 0x40
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <HAL_I2C_MspInit+0x88>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015b8:	bf00      	nop
 80015ba:	3728      	adds	r7, #40	; 0x28
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40005400 	.word	0x40005400
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020400 	.word	0x40020400

080015cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	; 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a19      	ldr	r2, [pc, #100]	; (8001650 <HAL_UART_MspInit+0x84>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d12b      	bne.n	8001646 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	4b18      	ldr	r3, [pc, #96]	; (8001654 <HAL_UART_MspInit+0x88>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	4a17      	ldr	r2, [pc, #92]	; (8001654 <HAL_UART_MspInit+0x88>)
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fc:	6413      	str	r3, [r2, #64]	; 0x40
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <HAL_UART_MspInit+0x88>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <HAL_UART_MspInit+0x88>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a10      	ldr	r2, [pc, #64]	; (8001654 <HAL_UART_MspInit+0x88>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <HAL_UART_MspInit+0x88>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001626:	230c      	movs	r3, #12
 8001628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001632:	2303      	movs	r3, #3
 8001634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001636:	2307      	movs	r3, #7
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	4805      	ldr	r0, [pc, #20]	; (8001658 <HAL_UART_MspInit+0x8c>)
 8001642:	f000 fa61 	bl	8001b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001646:	bf00      	nop
 8001648:	3728      	adds	r7, #40	; 0x28
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40004400 	.word	0x40004400
 8001654:	40023800 	.word	0x40023800
 8001658:	40020000 	.word	0x40020000

0800165c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08e      	sub	sp, #56	; 0x38
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001668:	2300      	movs	r3, #0
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	4b33      	ldr	r3, [pc, #204]	; (8001740 <HAL_InitTick+0xe4>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	4a32      	ldr	r2, [pc, #200]	; (8001740 <HAL_InitTick+0xe4>)
 8001676:	f043 0310 	orr.w	r3, r3, #16
 800167a:	6413      	str	r3, [r2, #64]	; 0x40
 800167c:	4b30      	ldr	r3, [pc, #192]	; (8001740 <HAL_InitTick+0xe4>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	f003 0310 	and.w	r3, r3, #16
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001688:	f107 0210 	add.w	r2, r7, #16
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4611      	mov	r1, r2
 8001692:	4618      	mov	r0, r3
 8001694:	f001 fafe 	bl	8002c94 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800169c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d103      	bne.n	80016aa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016a2:	f001 facf 	bl	8002c44 <HAL_RCC_GetPCLK1Freq>
 80016a6:	6378      	str	r0, [r7, #52]	; 0x34
 80016a8:	e004      	b.n	80016b4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016aa:	f001 facb 	bl	8002c44 <HAL_RCC_GetPCLK1Freq>
 80016ae:	4603      	mov	r3, r0
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b6:	4a23      	ldr	r2, [pc, #140]	; (8001744 <HAL_InitTick+0xe8>)
 80016b8:	fba2 2303 	umull	r2, r3, r2, r3
 80016bc:	0c9b      	lsrs	r3, r3, #18
 80016be:	3b01      	subs	r3, #1
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016c2:	4b21      	ldr	r3, [pc, #132]	; (8001748 <HAL_InitTick+0xec>)
 80016c4:	4a21      	ldr	r2, [pc, #132]	; (800174c <HAL_InitTick+0xf0>)
 80016c6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016c8:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <HAL_InitTick+0xec>)
 80016ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016ce:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016d0:	4a1d      	ldr	r2, [pc, #116]	; (8001748 <HAL_InitTick+0xec>)
 80016d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016d6:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <HAL_InitTick+0xec>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016dc:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <HAL_InitTick+0xec>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e2:	4b19      	ldr	r3, [pc, #100]	; (8001748 <HAL_InitTick+0xec>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80016e8:	4817      	ldr	r0, [pc, #92]	; (8001748 <HAL_InitTick+0xec>)
 80016ea:	f001 ffd3 	bl	8003694 <HAL_TIM_Base_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80016f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d11b      	bne.n	8001734 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016fc:	4812      	ldr	r0, [pc, #72]	; (8001748 <HAL_InitTick+0xec>)
 80016fe:	f002 f823 	bl	8003748 <HAL_TIM_Base_Start_IT>
 8001702:	4603      	mov	r3, r0
 8001704:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001708:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800170c:	2b00      	cmp	r3, #0
 800170e:	d111      	bne.n	8001734 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001710:	2036      	movs	r0, #54	; 0x36
 8001712:	f000 f9eb 	bl	8001aec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b0f      	cmp	r3, #15
 800171a:	d808      	bhi.n	800172e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800171c:	2200      	movs	r2, #0
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	2036      	movs	r0, #54	; 0x36
 8001722:	f000 f9c7 	bl	8001ab4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001726:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <HAL_InitTick+0xf4>)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	e002      	b.n	8001734 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001734:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001738:	4618      	mov	r0, r3
 800173a:	3738      	adds	r7, #56	; 0x38
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40023800 	.word	0x40023800
 8001744:	431bde83 	.word	0x431bde83
 8001748:	20000558 	.word	0x20000558
 800174c:	40001000 	.word	0x40001000
 8001750:	20000018 	.word	0x20000018

08001754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001758:	e7fe      	b.n	8001758 <NMI_Handler+0x4>

0800175a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <HardFault_Handler+0x4>

08001760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <MemManage_Handler+0x4>

08001766 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176a:	e7fe      	b.n	800176a <BusFault_Handler+0x4>

0800176c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <UsageFault_Handler+0x4>

08001772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <TIM6_DAC_IRQHandler+0x10>)
 8001786:	f002 f84f 	bl	8003828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000558 	.word	0x20000558

08001794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800179c:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <_sbrk+0x5c>)
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <_sbrk+0x60>)
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <_sbrk+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d102      	bne.n	80017b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <_sbrk+0x64>)
 80017b2:	4a12      	ldr	r2, [pc, #72]	; (80017fc <_sbrk+0x68>)
 80017b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d207      	bcs.n	80017d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c4:	f005 fc84 	bl	80070d0 <__errno>
 80017c8:	4603      	mov	r3, r0
 80017ca:	220c      	movs	r2, #12
 80017cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017d2:	e009      	b.n	80017e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <_sbrk+0x64>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017da:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <_sbrk+0x64>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <_sbrk+0x64>)
 80017e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017e6:	68fb      	ldr	r3, [r7, #12]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20020000 	.word	0x20020000
 80017f4:	00000400 	.word	0x00000400
 80017f8:	200005a0 	.word	0x200005a0
 80017fc:	200050d8 	.word	0x200050d8

08001800 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <SystemInit+0x20>)
 8001806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800180a:	4a05      	ldr	r2, [pc, #20]	; (8001820 <SystemInit+0x20>)
 800180c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001824:	f8df d034 	ldr.w	sp, [pc, #52]	; 800185c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001828:	f7ff ffea 	bl	8001800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800182e:	490d      	ldr	r1, [pc, #52]	; (8001864 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001830:	4a0d      	ldr	r2, [pc, #52]	; (8001868 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001834:	e002      	b.n	800183c <LoopCopyDataInit>

08001836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183a:	3304      	adds	r3, #4

0800183c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800183c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001840:	d3f9      	bcc.n	8001836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001842:	4a0a      	ldr	r2, [pc, #40]	; (800186c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001844:	4c0a      	ldr	r4, [pc, #40]	; (8001870 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001848:	e001      	b.n	800184e <LoopFillZerobss>

0800184a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800184c:	3204      	adds	r2, #4

0800184e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001850:	d3fb      	bcc.n	800184a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001852:	f005 fc43 	bl	80070dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001856:	f7ff f865 	bl	8000924 <main>
  bx  lr    
 800185a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800185c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001864:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001868:	08009b90 	.word	0x08009b90
  ldr r2, =_sbss
 800186c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001870:	200050d8 	.word	0x200050d8

08001874 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001874:	e7fe      	b.n	8001874 <ADC_IRQHandler>
	...

08001878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800187c:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_Init+0x40>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <HAL_Init+0x40>)
 8001882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001886:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_Init+0x40>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <HAL_Init+0x40>)
 800188e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001892:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_Init+0x40>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <HAL_Init+0x40>)
 800189a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a0:	2003      	movs	r0, #3
 80018a2:	f000 f8fc 	bl	8001a9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018a6:	2000      	movs	r0, #0
 80018a8:	f7ff fed8 	bl	800165c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018ac:	f7ff fe1a 	bl	80014e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023c00 	.word	0x40023c00

080018bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_IncTick+0x20>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_IncTick+0x24>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <HAL_IncTick+0x24>)
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	2000001c 	.word	0x2000001c
 80018e0:	200005a4 	.word	0x200005a4

080018e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return uwTick;
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <HAL_GetTick+0x14>)
 80018ea:	681b      	ldr	r3, [r3, #0]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	200005a4 	.word	0x200005a4

080018fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001904:	f7ff ffee 	bl	80018e4 <HAL_GetTick>
 8001908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001914:	d005      	beq.n	8001922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_Delay+0x44>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4413      	add	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001922:	bf00      	nop
 8001924:	f7ff ffde 	bl	80018e4 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	429a      	cmp	r2, r3
 8001932:	d8f7      	bhi.n	8001924 <HAL_Delay+0x28>
  {
  }
}
 8001934:	bf00      	nop
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	2000001c 	.word	0x2000001c

08001944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <__NVIC_SetPriorityGrouping+0x44>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001960:	4013      	ands	r3, r2
 8001962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800196c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001976:	4a04      	ldr	r2, [pc, #16]	; (8001988 <__NVIC_SetPriorityGrouping+0x44>)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	60d3      	str	r3, [r2, #12]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	0a1b      	lsrs	r3, r3, #8
 8001996:	f003 0307 	and.w	r3, r3, #7
}
 800199a:	4618      	mov	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	db0b      	blt.n	80019d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	f003 021f 	and.w	r2, r3, #31
 80019c0:	4907      	ldr	r1, [pc, #28]	; (80019e0 <__NVIC_EnableIRQ+0x38>)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	095b      	lsrs	r3, r3, #5
 80019c8:	2001      	movs	r0, #1
 80019ca:	fa00 f202 	lsl.w	r2, r0, r2
 80019ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000e100 	.word	0xe000e100

080019e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	6039      	str	r1, [r7, #0]
 80019ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	db0a      	blt.n	8001a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	490c      	ldr	r1, [pc, #48]	; (8001a30 <__NVIC_SetPriority+0x4c>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	0112      	lsls	r2, r2, #4
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	440b      	add	r3, r1
 8001a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a0c:	e00a      	b.n	8001a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	4908      	ldr	r1, [pc, #32]	; (8001a34 <__NVIC_SetPriority+0x50>)
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	3b04      	subs	r3, #4
 8001a1c:	0112      	lsls	r2, r2, #4
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	440b      	add	r3, r1
 8001a22:	761a      	strb	r2, [r3, #24]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000e100 	.word	0xe000e100
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f1c3 0307 	rsb	r3, r3, #7
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	bf28      	it	cs
 8001a56:	2304      	movcs	r3, #4
 8001a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d902      	bls.n	8001a68 <NVIC_EncodePriority+0x30>
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3b03      	subs	r3, #3
 8001a66:	e000      	b.n	8001a6a <NVIC_EncodePriority+0x32>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	43d9      	mvns	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	4313      	orrs	r3, r2
         );
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3724      	adds	r7, #36	; 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ff4c 	bl	8001944 <__NVIC_SetPriorityGrouping>
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac6:	f7ff ff61 	bl	800198c <__NVIC_GetPriorityGrouping>
 8001aca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	68b9      	ldr	r1, [r7, #8]
 8001ad0:	6978      	ldr	r0, [r7, #20]
 8001ad2:	f7ff ffb1 	bl	8001a38 <NVIC_EncodePriority>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001adc:	4611      	mov	r1, r2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff ff80 	bl	80019e4 <__NVIC_SetPriority>
}
 8001ae4:	bf00      	nop
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ff54 	bl	80019a8 <__NVIC_EnableIRQ>
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b089      	sub	sp, #36	; 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	e165      	b.n	8001df0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b24:	2201      	movs	r2, #1
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	f040 8154 	bne.w	8001dea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d005      	beq.n	8001b5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d130      	bne.n	8001bbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2203      	movs	r2, #3
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b90:	2201      	movs	r2, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f003 0201 	and.w	r2, r3, #1
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d017      	beq.n	8001bf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d123      	bne.n	8001c4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	08da      	lsrs	r2, r3, #3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3208      	adds	r2, #8
 8001c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	220f      	movs	r2, #15
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	08da      	lsrs	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3208      	adds	r2, #8
 8001c46:	69b9      	ldr	r1, [r7, #24]
 8001c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0203 	and.w	r2, r3, #3
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 80ae 	beq.w	8001dea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	4b5d      	ldr	r3, [pc, #372]	; (8001e08 <HAL_GPIO_Init+0x300>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	4a5c      	ldr	r2, [pc, #368]	; (8001e08 <HAL_GPIO_Init+0x300>)
 8001c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9e:	4b5a      	ldr	r3, [pc, #360]	; (8001e08 <HAL_GPIO_Init+0x300>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001caa:	4a58      	ldr	r2, [pc, #352]	; (8001e0c <HAL_GPIO_Init+0x304>)
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	089b      	lsrs	r3, r3, #2
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	220f      	movs	r2, #15
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4f      	ldr	r2, [pc, #316]	; (8001e10 <HAL_GPIO_Init+0x308>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d025      	beq.n	8001d22 <HAL_GPIO_Init+0x21a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4e      	ldr	r2, [pc, #312]	; (8001e14 <HAL_GPIO_Init+0x30c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d01f      	beq.n	8001d1e <HAL_GPIO_Init+0x216>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4d      	ldr	r2, [pc, #308]	; (8001e18 <HAL_GPIO_Init+0x310>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d019      	beq.n	8001d1a <HAL_GPIO_Init+0x212>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a4c      	ldr	r2, [pc, #304]	; (8001e1c <HAL_GPIO_Init+0x314>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d013      	beq.n	8001d16 <HAL_GPIO_Init+0x20e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a4b      	ldr	r2, [pc, #300]	; (8001e20 <HAL_GPIO_Init+0x318>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d00d      	beq.n	8001d12 <HAL_GPIO_Init+0x20a>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a4a      	ldr	r2, [pc, #296]	; (8001e24 <HAL_GPIO_Init+0x31c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d007      	beq.n	8001d0e <HAL_GPIO_Init+0x206>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a49      	ldr	r2, [pc, #292]	; (8001e28 <HAL_GPIO_Init+0x320>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d101      	bne.n	8001d0a <HAL_GPIO_Init+0x202>
 8001d06:	2306      	movs	r3, #6
 8001d08:	e00c      	b.n	8001d24 <HAL_GPIO_Init+0x21c>
 8001d0a:	2307      	movs	r3, #7
 8001d0c:	e00a      	b.n	8001d24 <HAL_GPIO_Init+0x21c>
 8001d0e:	2305      	movs	r3, #5
 8001d10:	e008      	b.n	8001d24 <HAL_GPIO_Init+0x21c>
 8001d12:	2304      	movs	r3, #4
 8001d14:	e006      	b.n	8001d24 <HAL_GPIO_Init+0x21c>
 8001d16:	2303      	movs	r3, #3
 8001d18:	e004      	b.n	8001d24 <HAL_GPIO_Init+0x21c>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e002      	b.n	8001d24 <HAL_GPIO_Init+0x21c>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <HAL_GPIO_Init+0x21c>
 8001d22:	2300      	movs	r3, #0
 8001d24:	69fa      	ldr	r2, [r7, #28]
 8001d26:	f002 0203 	and.w	r2, r2, #3
 8001d2a:	0092      	lsls	r2, r2, #2
 8001d2c:	4093      	lsls	r3, r2
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d34:	4935      	ldr	r1, [pc, #212]	; (8001e0c <HAL_GPIO_Init+0x304>)
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	089b      	lsrs	r3, r3, #2
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d42:	4b3a      	ldr	r3, [pc, #232]	; (8001e2c <HAL_GPIO_Init+0x324>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d66:	4a31      	ldr	r2, [pc, #196]	; (8001e2c <HAL_GPIO_Init+0x324>)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d6c:	4b2f      	ldr	r3, [pc, #188]	; (8001e2c <HAL_GPIO_Init+0x324>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d90:	4a26      	ldr	r2, [pc, #152]	; (8001e2c <HAL_GPIO_Init+0x324>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d96:	4b25      	ldr	r3, [pc, #148]	; (8001e2c <HAL_GPIO_Init+0x324>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dba:	4a1c      	ldr	r2, [pc, #112]	; (8001e2c <HAL_GPIO_Init+0x324>)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dc0:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <HAL_GPIO_Init+0x324>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001de4:	4a11      	ldr	r2, [pc, #68]	; (8001e2c <HAL_GPIO_Init+0x324>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3301      	adds	r3, #1
 8001dee:	61fb      	str	r3, [r7, #28]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	2b0f      	cmp	r3, #15
 8001df4:	f67f ae96 	bls.w	8001b24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	3724      	adds	r7, #36	; 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40013800 	.word	0x40013800
 8001e10:	40020000 	.word	0x40020000
 8001e14:	40020400 	.word	0x40020400
 8001e18:	40020800 	.word	0x40020800
 8001e1c:	40020c00 	.word	0x40020c00
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40021400 	.word	0x40021400
 8001e28:	40021800 	.word	0x40021800
 8001e2c:	40013c00 	.word	0x40013c00

08001e30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	887b      	ldrh	r3, [r7, #2]
 8001e42:	4013      	ands	r3, r2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
 8001e4c:	e001      	b.n	8001e52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	807b      	strh	r3, [r7, #2]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e70:	787b      	ldrb	r3, [r7, #1]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e76:	887a      	ldrh	r2, [r7, #2]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e7c:	e003      	b.n	8001e86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e7e:	887b      	ldrh	r3, [r7, #2]
 8001e80:	041a      	lsls	r2, r3, #16
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	619a      	str	r2, [r3, #24]
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b085      	sub	sp, #20
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ea4:	887a      	ldrh	r2, [r7, #2]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	041a      	lsls	r2, r3, #16
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	43d9      	mvns	r1, r3
 8001eb0:	887b      	ldrh	r3, [r7, #2]
 8001eb2:	400b      	ands	r3, r1
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	619a      	str	r2, [r3, #24]
}
 8001eba:	bf00      	nop
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e12b      	b.n	8002132 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d106      	bne.n	8001ef4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff fb24 	bl	800153c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2224      	movs	r2, #36	; 0x24
 8001ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0201 	bic.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f2c:	f000 fe8a 	bl	8002c44 <HAL_RCC_GetPCLK1Freq>
 8001f30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	4a81      	ldr	r2, [pc, #516]	; (800213c <HAL_I2C_Init+0x274>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d807      	bhi.n	8001f4c <HAL_I2C_Init+0x84>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4a80      	ldr	r2, [pc, #512]	; (8002140 <HAL_I2C_Init+0x278>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	bf94      	ite	ls
 8001f44:	2301      	movls	r3, #1
 8001f46:	2300      	movhi	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	e006      	b.n	8001f5a <HAL_I2C_Init+0x92>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4a7d      	ldr	r2, [pc, #500]	; (8002144 <HAL_I2C_Init+0x27c>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	bf94      	ite	ls
 8001f54:	2301      	movls	r3, #1
 8001f56:	2300      	movhi	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e0e7      	b.n	8002132 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4a78      	ldr	r2, [pc, #480]	; (8002148 <HAL_I2C_Init+0x280>)
 8001f66:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6a:	0c9b      	lsrs	r3, r3, #18
 8001f6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	4a6a      	ldr	r2, [pc, #424]	; (800213c <HAL_I2C_Init+0x274>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d802      	bhi.n	8001f9c <HAL_I2C_Init+0xd4>
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	e009      	b.n	8001fb0 <HAL_I2C_Init+0xe8>
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fa2:	fb02 f303 	mul.w	r3, r2, r3
 8001fa6:	4a69      	ldr	r2, [pc, #420]	; (800214c <HAL_I2C_Init+0x284>)
 8001fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fac:	099b      	lsrs	r3, r3, #6
 8001fae:	3301      	adds	r3, #1
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	430b      	orrs	r3, r1
 8001fb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001fc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	495c      	ldr	r1, [pc, #368]	; (800213c <HAL_I2C_Init+0x274>)
 8001fcc:	428b      	cmp	r3, r1
 8001fce:	d819      	bhi.n	8002004 <HAL_I2C_Init+0x13c>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	1e59      	subs	r1, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fde:	1c59      	adds	r1, r3, #1
 8001fe0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001fe4:	400b      	ands	r3, r1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00a      	beq.n	8002000 <HAL_I2C_Init+0x138>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1e59      	subs	r1, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ffe:	e051      	b.n	80020a4 <HAL_I2C_Init+0x1dc>
 8002000:	2304      	movs	r3, #4
 8002002:	e04f      	b.n	80020a4 <HAL_I2C_Init+0x1dc>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d111      	bne.n	8002030 <HAL_I2C_Init+0x168>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	1e58      	subs	r0, r3, #1
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6859      	ldr	r1, [r3, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	440b      	add	r3, r1
 800201a:	fbb0 f3f3 	udiv	r3, r0, r3
 800201e:	3301      	adds	r3, #1
 8002020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002024:	2b00      	cmp	r3, #0
 8002026:	bf0c      	ite	eq
 8002028:	2301      	moveq	r3, #1
 800202a:	2300      	movne	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	e012      	b.n	8002056 <HAL_I2C_Init+0x18e>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1e58      	subs	r0, r3, #1
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6859      	ldr	r1, [r3, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	0099      	lsls	r1, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	fbb0 f3f3 	udiv	r3, r0, r3
 8002046:	3301      	adds	r3, #1
 8002048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800204c:	2b00      	cmp	r3, #0
 800204e:	bf0c      	ite	eq
 8002050:	2301      	moveq	r3, #1
 8002052:	2300      	movne	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_I2C_Init+0x196>
 800205a:	2301      	movs	r3, #1
 800205c:	e022      	b.n	80020a4 <HAL_I2C_Init+0x1dc>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10e      	bne.n	8002084 <HAL_I2C_Init+0x1bc>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1e58      	subs	r0, r3, #1
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6859      	ldr	r1, [r3, #4]
 800206e:	460b      	mov	r3, r1
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	440b      	add	r3, r1
 8002074:	fbb0 f3f3 	udiv	r3, r0, r3
 8002078:	3301      	adds	r3, #1
 800207a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800207e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002082:	e00f      	b.n	80020a4 <HAL_I2C_Init+0x1dc>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	1e58      	subs	r0, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6859      	ldr	r1, [r3, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	0099      	lsls	r1, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	fbb0 f3f3 	udiv	r3, r0, r3
 800209a:	3301      	adds	r3, #1
 800209c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	6809      	ldr	r1, [r1, #0]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69da      	ldr	r2, [r3, #28]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6911      	ldr	r1, [r2, #16]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68d2      	ldr	r2, [r2, #12]
 80020de:	4311      	orrs	r1, r2
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	430b      	orrs	r3, r1
 80020e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695a      	ldr	r2, [r3, #20]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0201 	orr.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2220      	movs	r2, #32
 800211e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	000186a0 	.word	0x000186a0
 8002140:	001e847f 	.word	0x001e847f
 8002144:	003d08ff 	.word	0x003d08ff
 8002148:	431bde83 	.word	0x431bde83
 800214c:	10624dd3 	.word	0x10624dd3

08002150 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af02      	add	r7, sp, #8
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	461a      	mov	r2, r3
 800215c:	460b      	mov	r3, r1
 800215e:	817b      	strh	r3, [r7, #10]
 8002160:	4613      	mov	r3, r2
 8002162:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002164:	f7ff fbbe 	bl	80018e4 <HAL_GetTick>
 8002168:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b20      	cmp	r3, #32
 8002174:	f040 80e0 	bne.w	8002338 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2319      	movs	r3, #25
 800217e:	2201      	movs	r2, #1
 8002180:	4970      	ldr	r1, [pc, #448]	; (8002344 <HAL_I2C_Master_Transmit+0x1f4>)
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 fa92 	bl	80026ac <I2C_WaitOnFlagUntilTimeout>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800218e:	2302      	movs	r3, #2
 8002190:	e0d3      	b.n	800233a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002198:	2b01      	cmp	r3, #1
 800219a:	d101      	bne.n	80021a0 <HAL_I2C_Master_Transmit+0x50>
 800219c:	2302      	movs	r3, #2
 800219e:	e0cc      	b.n	800233a <HAL_I2C_Master_Transmit+0x1ea>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d007      	beq.n	80021c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f042 0201 	orr.w	r2, r2, #1
 80021c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2221      	movs	r2, #33	; 0x21
 80021da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2210      	movs	r2, #16
 80021e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	893a      	ldrh	r2, [r7, #8]
 80021f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4a50      	ldr	r2, [pc, #320]	; (8002348 <HAL_I2C_Master_Transmit+0x1f8>)
 8002206:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002208:	8979      	ldrh	r1, [r7, #10]
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	6a3a      	ldr	r2, [r7, #32]
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 f9ca 	bl	80025a8 <I2C_MasterRequestWrite>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e08d      	b.n	800233a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002234:	e066      	b.n	8002304 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	6a39      	ldr	r1, [r7, #32]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 fb50 	bl	80028e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00d      	beq.n	8002262 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	2b04      	cmp	r3, #4
 800224c:	d107      	bne.n	800225e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800225c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e06b      	b.n	800233a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	781a      	ldrb	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	1c5a      	adds	r2, r3, #1
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227c:	b29b      	uxth	r3, r3
 800227e:	3b01      	subs	r3, #1
 8002280:	b29a      	uxth	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228a:	3b01      	subs	r3, #1
 800228c:	b29a      	uxth	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b04      	cmp	r3, #4
 800229e:	d11b      	bne.n	80022d8 <HAL_I2C_Master_Transmit+0x188>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d017      	beq.n	80022d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	781a      	ldrb	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	6a39      	ldr	r1, [r7, #32]
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 fb47 	bl	8002970 <I2C_WaitOnBTFFlagUntilTimeout>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00d      	beq.n	8002304 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d107      	bne.n	8002300 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e01a      	b.n	800233a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002308:	2b00      	cmp	r3, #0
 800230a:	d194      	bne.n	8002236 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800231a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	e000      	b.n	800233a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002338:	2302      	movs	r3, #2
  }
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	00100002 	.word	0x00100002
 8002348:	ffff0000 	.word	0xffff0000

0800234c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08a      	sub	sp, #40	; 0x28
 8002350:	af02      	add	r7, sp, #8
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	460b      	mov	r3, r1
 800235a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800235c:	f7ff fac2 	bl	80018e4 <HAL_GetTick>
 8002360:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b20      	cmp	r3, #32
 8002370:	f040 8111 	bne.w	8002596 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	2319      	movs	r3, #25
 800237a:	2201      	movs	r2, #1
 800237c:	4988      	ldr	r1, [pc, #544]	; (80025a0 <HAL_I2C_IsDeviceReady+0x254>)
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 f994 	bl	80026ac <I2C_WaitOnFlagUntilTimeout>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800238a:	2302      	movs	r3, #2
 800238c:	e104      	b.n	8002598 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_I2C_IsDeviceReady+0x50>
 8002398:	2302      	movs	r3, #2
 800239a:	e0fd      	b.n	8002598 <HAL_I2C_IsDeviceReady+0x24c>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d007      	beq.n	80023c2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f042 0201 	orr.w	r2, r2, #1
 80023c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2224      	movs	r2, #36	; 0x24
 80023d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4a70      	ldr	r2, [pc, #448]	; (80025a4 <HAL_I2C_IsDeviceReady+0x258>)
 80023e4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023f4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 f952 	bl	80026ac <I2C_WaitOnFlagUntilTimeout>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00d      	beq.n	800242a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800241c:	d103      	bne.n	8002426 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002424:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e0b6      	b.n	8002598 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800242a:	897b      	ldrh	r3, [r7, #10]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	461a      	mov	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002438:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800243a:	f7ff fa53 	bl	80018e4 <HAL_GetTick>
 800243e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b02      	cmp	r3, #2
 800244c:	bf0c      	ite	eq
 800244e:	2301      	moveq	r3, #1
 8002450:	2300      	movne	r3, #0
 8002452:	b2db      	uxtb	r3, r3
 8002454:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002464:	bf0c      	ite	eq
 8002466:	2301      	moveq	r3, #1
 8002468:	2300      	movne	r3, #0
 800246a:	b2db      	uxtb	r3, r3
 800246c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800246e:	e025      	b.n	80024bc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002470:	f7ff fa38 	bl	80018e4 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d302      	bcc.n	8002486 <HAL_I2C_IsDeviceReady+0x13a>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d103      	bne.n	800248e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	22a0      	movs	r2, #160	; 0xa0
 800248a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b02      	cmp	r3, #2
 800249a:	bf0c      	ite	eq
 800249c:	2301      	moveq	r3, #1
 800249e:	2300      	movne	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b2:	bf0c      	ite	eq
 80024b4:	2301      	moveq	r3, #1
 80024b6:	2300      	movne	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2ba0      	cmp	r3, #160	; 0xa0
 80024c6:	d005      	beq.n	80024d4 <HAL_I2C_IsDeviceReady+0x188>
 80024c8:	7dfb      	ldrb	r3, [r7, #23]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d102      	bne.n	80024d4 <HAL_I2C_IsDeviceReady+0x188>
 80024ce:	7dbb      	ldrb	r3, [r7, #22]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0cd      	beq.n	8002470 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2220      	movs	r2, #32
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d129      	bne.n	800253e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024f8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	2319      	movs	r3, #25
 8002516:	2201      	movs	r2, #1
 8002518:	4921      	ldr	r1, [pc, #132]	; (80025a0 <HAL_I2C_IsDeviceReady+0x254>)
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f8c6 	bl	80026ac <I2C_WaitOnFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e036      	b.n	8002598 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2220      	movs	r2, #32
 800252e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	e02c      	b.n	8002598 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800254c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002556:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	2319      	movs	r3, #25
 800255e:	2201      	movs	r2, #1
 8002560:	490f      	ldr	r1, [pc, #60]	; (80025a0 <HAL_I2C_IsDeviceReady+0x254>)
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 f8a2 	bl	80026ac <I2C_WaitOnFlagUntilTimeout>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e012      	b.n	8002598 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	3301      	adds	r3, #1
 8002576:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	429a      	cmp	r2, r3
 800257e:	f4ff af32 	bcc.w	80023e6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2220      	movs	r2, #32
 8002586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002596:	2302      	movs	r3, #2
  }
}
 8002598:	4618      	mov	r0, r3
 800259a:	3720      	adds	r7, #32
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	00100002 	.word	0x00100002
 80025a4:	ffff0000 	.word	0xffff0000

080025a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	460b      	mov	r3, r1
 80025b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d006      	beq.n	80025d2 <I2C_MasterRequestWrite+0x2a>
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d003      	beq.n	80025d2 <I2C_MasterRequestWrite+0x2a>
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025d0:	d108      	bne.n	80025e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	e00b      	b.n	80025fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	2b12      	cmp	r3, #18
 80025ea:	d107      	bne.n	80025fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 f84f 	bl	80026ac <I2C_WaitOnFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00d      	beq.n	8002630 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002622:	d103      	bne.n	800262c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800262a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e035      	b.n	800269c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002638:	d108      	bne.n	800264c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800263a:	897b      	ldrh	r3, [r7, #10]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	461a      	mov	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002648:	611a      	str	r2, [r3, #16]
 800264a:	e01b      	b.n	8002684 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800264c:	897b      	ldrh	r3, [r7, #10]
 800264e:	11db      	asrs	r3, r3, #7
 8002650:	b2db      	uxtb	r3, r3
 8002652:	f003 0306 	and.w	r3, r3, #6
 8002656:	b2db      	uxtb	r3, r3
 8002658:	f063 030f 	orn	r3, r3, #15
 800265c:	b2da      	uxtb	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	490e      	ldr	r1, [pc, #56]	; (80026a4 <I2C_MasterRequestWrite+0xfc>)
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 f898 	bl	80027a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e010      	b.n	800269c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800267a:	897b      	ldrh	r3, [r7, #10]
 800267c:	b2da      	uxtb	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	4907      	ldr	r1, [pc, #28]	; (80026a8 <I2C_MasterRequestWrite+0x100>)
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f888 	bl	80027a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	00010008 	.word	0x00010008
 80026a8:	00010002 	.word	0x00010002

080026ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	4613      	mov	r3, r2
 80026ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026bc:	e048      	b.n	8002750 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026c4:	d044      	beq.n	8002750 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026c6:	f7ff f90d 	bl	80018e4 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d302      	bcc.n	80026dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d139      	bne.n	8002750 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	0c1b      	lsrs	r3, r3, #16
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d10d      	bne.n	8002702 <I2C_WaitOnFlagUntilTimeout+0x56>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	43da      	mvns	r2, r3
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	4013      	ands	r3, r2
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	bf0c      	ite	eq
 80026f8:	2301      	moveq	r3, #1
 80026fa:	2300      	movne	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	461a      	mov	r2, r3
 8002700:	e00c      	b.n	800271c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	43da      	mvns	r2, r3
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	4013      	ands	r3, r2
 800270e:	b29b      	uxth	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	bf0c      	ite	eq
 8002714:	2301      	moveq	r3, #1
 8002716:	2300      	movne	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	461a      	mov	r2, r3
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	429a      	cmp	r2, r3
 8002720:	d116      	bne.n	8002750 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2220      	movs	r2, #32
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	f043 0220 	orr.w	r2, r3, #32
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e023      	b.n	8002798 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	0c1b      	lsrs	r3, r3, #16
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b01      	cmp	r3, #1
 8002758:	d10d      	bne.n	8002776 <I2C_WaitOnFlagUntilTimeout+0xca>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	43da      	mvns	r2, r3
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	4013      	ands	r3, r2
 8002766:	b29b      	uxth	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	bf0c      	ite	eq
 800276c:	2301      	moveq	r3, #1
 800276e:	2300      	movne	r3, #0
 8002770:	b2db      	uxtb	r3, r3
 8002772:	461a      	mov	r2, r3
 8002774:	e00c      	b.n	8002790 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	43da      	mvns	r2, r3
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	4013      	ands	r3, r2
 8002782:	b29b      	uxth	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	bf0c      	ite	eq
 8002788:	2301      	moveq	r3, #1
 800278a:	2300      	movne	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	461a      	mov	r2, r3
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	429a      	cmp	r2, r3
 8002794:	d093      	beq.n	80026be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027ae:	e071      	b.n	8002894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027be:	d123      	bne.n	8002808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	f043 0204 	orr.w	r2, r3, #4
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e067      	b.n	80028d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800280e:	d041      	beq.n	8002894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002810:	f7ff f868 	bl	80018e4 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	429a      	cmp	r2, r3
 800281e:	d302      	bcc.n	8002826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d136      	bne.n	8002894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	0c1b      	lsrs	r3, r3, #16
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b01      	cmp	r3, #1
 800282e:	d10c      	bne.n	800284a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	43da      	mvns	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	4013      	ands	r3, r2
 800283c:	b29b      	uxth	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	bf14      	ite	ne
 8002842:	2301      	movne	r3, #1
 8002844:	2300      	moveq	r3, #0
 8002846:	b2db      	uxtb	r3, r3
 8002848:	e00b      	b.n	8002862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	43da      	mvns	r2, r3
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	4013      	ands	r3, r2
 8002856:	b29b      	uxth	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	bf14      	ite	ne
 800285c:	2301      	movne	r3, #1
 800285e:	2300      	moveq	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d016      	beq.n	8002894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	f043 0220 	orr.w	r2, r3, #32
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e021      	b.n	80028d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	0c1b      	lsrs	r3, r3, #16
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b01      	cmp	r3, #1
 800289c:	d10c      	bne.n	80028b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	43da      	mvns	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	4013      	ands	r3, r2
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	bf14      	ite	ne
 80028b0:	2301      	movne	r3, #1
 80028b2:	2300      	moveq	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	e00b      	b.n	80028d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	43da      	mvns	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	4013      	ands	r3, r2
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	bf14      	ite	ne
 80028ca:	2301      	movne	r3, #1
 80028cc:	2300      	moveq	r3, #0
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f47f af6d 	bne.w	80027b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028ec:	e034      	b.n	8002958 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f886 	bl	8002a00 <I2C_IsAcknowledgeFailed>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e034      	b.n	8002968 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002904:	d028      	beq.n	8002958 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002906:	f7fe ffed 	bl	80018e4 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	429a      	cmp	r2, r3
 8002914:	d302      	bcc.n	800291c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d11d      	bne.n	8002958 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002926:	2b80      	cmp	r3, #128	; 0x80
 8002928:	d016      	beq.n	8002958 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	f043 0220 	orr.w	r2, r3, #32
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e007      	b.n	8002968 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002962:	2b80      	cmp	r3, #128	; 0x80
 8002964:	d1c3      	bne.n	80028ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800297c:	e034      	b.n	80029e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 f83e 	bl	8002a00 <I2C_IsAcknowledgeFailed>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e034      	b.n	80029f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002994:	d028      	beq.n	80029e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002996:	f7fe ffa5 	bl	80018e4 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d302      	bcc.n	80029ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d11d      	bne.n	80029e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d016      	beq.n	80029e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	f043 0220 	orr.w	r2, r3, #32
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e007      	b.n	80029f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d1c3      	bne.n	800297e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a16:	d11b      	bne.n	8002a50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	f043 0204 	orr.w	r2, r3, #4
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
	...

08002a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0cc      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a74:	4b68      	ldr	r3, [pc, #416]	; (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d90c      	bls.n	8002a9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b65      	ldr	r3, [pc, #404]	; (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8a:	4b63      	ldr	r3, [pc, #396]	; (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0b8      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d020      	beq.n	8002aea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ab4:	4b59      	ldr	r3, [pc, #356]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	4a58      	ldr	r2, [pc, #352]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002abe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002acc:	4b53      	ldr	r3, [pc, #332]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	4a52      	ldr	r2, [pc, #328]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ad6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad8:	4b50      	ldr	r3, [pc, #320]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	494d      	ldr	r1, [pc, #308]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d044      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d107      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	4b47      	ldr	r3, [pc, #284]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d119      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e07f      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d003      	beq.n	8002b1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d107      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1e:	4b3f      	ldr	r3, [pc, #252]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d109      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e06f      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2e:	4b3b      	ldr	r3, [pc, #236]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e067      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b3e:	4b37      	ldr	r3, [pc, #220]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f023 0203 	bic.w	r2, r3, #3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4934      	ldr	r1, [pc, #208]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b50:	f7fe fec8 	bl	80018e4 <HAL_GetTick>
 8002b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b58:	f7fe fec4 	bl	80018e4 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e04f      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6e:	4b2b      	ldr	r3, [pc, #172]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 020c 	and.w	r2, r3, #12
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d1eb      	bne.n	8002b58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b80:	4b25      	ldr	r3, [pc, #148]	; (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 030f 	and.w	r3, r3, #15
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d20c      	bcs.n	8002ba8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8e:	4b22      	ldr	r3, [pc, #136]	; (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b96:	4b20      	ldr	r3, [pc, #128]	; (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e032      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d008      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb4:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	4916      	ldr	r1, [pc, #88]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d009      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bd2:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	490e      	ldr	r1, [pc, #56]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002be6:	f000 f887 	bl	8002cf8 <HAL_RCC_GetSysClockFreq>
 8002bea:	4602      	mov	r2, r0
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	490a      	ldr	r1, [pc, #40]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf8:	5ccb      	ldrb	r3, [r1, r3]
 8002bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfe:	4a09      	ldr	r2, [pc, #36]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c02:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <HAL_RCC_ClockConfig+0x1c8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fe fd28 	bl	800165c <HAL_InitTick>

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40023c00 	.word	0x40023c00
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	08009b34 	.word	0x08009b34
 8002c24:	20000014 	.word	0x20000014
 8002c28:	20000018 	.word	0x20000018

08002c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c30:	4b03      	ldr	r3, [pc, #12]	; (8002c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c32:	681b      	ldr	r3, [r3, #0]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	20000014 	.word	0x20000014

08002c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c48:	f7ff fff0 	bl	8002c2c <HAL_RCC_GetHCLKFreq>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	0a9b      	lsrs	r3, r3, #10
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	4903      	ldr	r1, [pc, #12]	; (8002c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c5a:	5ccb      	ldrb	r3, [r1, r3]
 8002c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40023800 	.word	0x40023800
 8002c68:	08009b44 	.word	0x08009b44

08002c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c70:	f7ff ffdc 	bl	8002c2c <HAL_RCC_GetHCLKFreq>
 8002c74:	4602      	mov	r2, r0
 8002c76:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	0b5b      	lsrs	r3, r3, #13
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	4903      	ldr	r1, [pc, #12]	; (8002c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c82:	5ccb      	ldrb	r3, [r1, r3]
 8002c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	08009b44 	.word	0x08009b44

08002c94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ca4:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 0203 	and.w	r2, r3, #3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002cc8:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	08db      	lsrs	r3, r3, #3
 8002cce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002cd6:	4b07      	ldr	r3, [pc, #28]	; (8002cf4 <HAL_RCC_GetClockConfig+0x60>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 020f 	and.w	r2, r3, #15
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	601a      	str	r2, [r3, #0]
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	40023c00 	.word	0x40023c00

08002cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cfc:	b0ae      	sub	sp, #184	; 0xb8
 8002cfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d1e:	4bcb      	ldr	r3, [pc, #812]	; (800304c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b0c      	cmp	r3, #12
 8002d28:	f200 8206 	bhi.w	8003138 <HAL_RCC_GetSysClockFreq+0x440>
 8002d2c:	a201      	add	r2, pc, #4	; (adr r2, 8002d34 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d32:	bf00      	nop
 8002d34:	08002d69 	.word	0x08002d69
 8002d38:	08003139 	.word	0x08003139
 8002d3c:	08003139 	.word	0x08003139
 8002d40:	08003139 	.word	0x08003139
 8002d44:	08002d71 	.word	0x08002d71
 8002d48:	08003139 	.word	0x08003139
 8002d4c:	08003139 	.word	0x08003139
 8002d50:	08003139 	.word	0x08003139
 8002d54:	08002d79 	.word	0x08002d79
 8002d58:	08003139 	.word	0x08003139
 8002d5c:	08003139 	.word	0x08003139
 8002d60:	08003139 	.word	0x08003139
 8002d64:	08002f69 	.word	0x08002f69
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d68:	4bb9      	ldr	r3, [pc, #740]	; (8003050 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002d6e:	e1e7      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d70:	4bb8      	ldr	r3, [pc, #736]	; (8003054 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d76:	e1e3      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d78:	4bb4      	ldr	r3, [pc, #720]	; (800304c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d84:	4bb1      	ldr	r3, [pc, #708]	; (800304c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d071      	beq.n	8002e74 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d90:	4bae      	ldr	r3, [pc, #696]	; (800304c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	099b      	lsrs	r3, r3, #6
 8002d96:	2200      	movs	r2, #0
 8002d98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d9c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002da0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002dac:	2300      	movs	r3, #0
 8002dae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002db2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002db6:	4622      	mov	r2, r4
 8002db8:	462b      	mov	r3, r5
 8002dba:	f04f 0000 	mov.w	r0, #0
 8002dbe:	f04f 0100 	mov.w	r1, #0
 8002dc2:	0159      	lsls	r1, r3, #5
 8002dc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dc8:	0150      	lsls	r0, r2, #5
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4621      	mov	r1, r4
 8002dd0:	1a51      	subs	r1, r2, r1
 8002dd2:	6439      	str	r1, [r7, #64]	; 0x40
 8002dd4:	4629      	mov	r1, r5
 8002dd6:	eb63 0301 	sbc.w	r3, r3, r1
 8002dda:	647b      	str	r3, [r7, #68]	; 0x44
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002de8:	4649      	mov	r1, r9
 8002dea:	018b      	lsls	r3, r1, #6
 8002dec:	4641      	mov	r1, r8
 8002dee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002df2:	4641      	mov	r1, r8
 8002df4:	018a      	lsls	r2, r1, #6
 8002df6:	4641      	mov	r1, r8
 8002df8:	1a51      	subs	r1, r2, r1
 8002dfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8002dfc:	4649      	mov	r1, r9
 8002dfe:	eb63 0301 	sbc.w	r3, r3, r1
 8002e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002e10:	4649      	mov	r1, r9
 8002e12:	00cb      	lsls	r3, r1, #3
 8002e14:	4641      	mov	r1, r8
 8002e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e1a:	4641      	mov	r1, r8
 8002e1c:	00ca      	lsls	r2, r1, #3
 8002e1e:	4610      	mov	r0, r2
 8002e20:	4619      	mov	r1, r3
 8002e22:	4603      	mov	r3, r0
 8002e24:	4622      	mov	r2, r4
 8002e26:	189b      	adds	r3, r3, r2
 8002e28:	633b      	str	r3, [r7, #48]	; 0x30
 8002e2a:	462b      	mov	r3, r5
 8002e2c:	460a      	mov	r2, r1
 8002e2e:	eb42 0303 	adc.w	r3, r2, r3
 8002e32:	637b      	str	r3, [r7, #52]	; 0x34
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e40:	4629      	mov	r1, r5
 8002e42:	024b      	lsls	r3, r1, #9
 8002e44:	4621      	mov	r1, r4
 8002e46:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e4a:	4621      	mov	r1, r4
 8002e4c:	024a      	lsls	r2, r1, #9
 8002e4e:	4610      	mov	r0, r2
 8002e50:	4619      	mov	r1, r3
 8002e52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e56:	2200      	movs	r2, #0
 8002e58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e60:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002e64:	f7fd fa2c 	bl	80002c0 <__aeabi_uldivmod>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e72:	e067      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e74:	4b75      	ldr	r3, [pc, #468]	; (800304c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	099b      	lsrs	r3, r3, #6
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e80:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002e84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e8e:	2300      	movs	r3, #0
 8002e90:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e92:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002e96:	4622      	mov	r2, r4
 8002e98:	462b      	mov	r3, r5
 8002e9a:	f04f 0000 	mov.w	r0, #0
 8002e9e:	f04f 0100 	mov.w	r1, #0
 8002ea2:	0159      	lsls	r1, r3, #5
 8002ea4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ea8:	0150      	lsls	r0, r2, #5
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4621      	mov	r1, r4
 8002eb0:	1a51      	subs	r1, r2, r1
 8002eb2:	62b9      	str	r1, [r7, #40]	; 0x28
 8002eb4:	4629      	mov	r1, r5
 8002eb6:	eb63 0301 	sbc.w	r3, r3, r1
 8002eba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	f04f 0300 	mov.w	r3, #0
 8002ec4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002ec8:	4649      	mov	r1, r9
 8002eca:	018b      	lsls	r3, r1, #6
 8002ecc:	4641      	mov	r1, r8
 8002ece:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ed2:	4641      	mov	r1, r8
 8002ed4:	018a      	lsls	r2, r1, #6
 8002ed6:	4641      	mov	r1, r8
 8002ed8:	ebb2 0a01 	subs.w	sl, r2, r1
 8002edc:	4649      	mov	r1, r9
 8002ede:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002eee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ef2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ef6:	4692      	mov	sl, r2
 8002ef8:	469b      	mov	fp, r3
 8002efa:	4623      	mov	r3, r4
 8002efc:	eb1a 0303 	adds.w	r3, sl, r3
 8002f00:	623b      	str	r3, [r7, #32]
 8002f02:	462b      	mov	r3, r5
 8002f04:	eb4b 0303 	adc.w	r3, fp, r3
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f16:	4629      	mov	r1, r5
 8002f18:	028b      	lsls	r3, r1, #10
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f20:	4621      	mov	r1, r4
 8002f22:	028a      	lsls	r2, r1, #10
 8002f24:	4610      	mov	r0, r2
 8002f26:	4619      	mov	r1, r3
 8002f28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	673b      	str	r3, [r7, #112]	; 0x70
 8002f30:	677a      	str	r2, [r7, #116]	; 0x74
 8002f32:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002f36:	f7fd f9c3 	bl	80002c0 <__aeabi_uldivmod>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4613      	mov	r3, r2
 8002f40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f44:	4b41      	ldr	r3, [pc, #260]	; (800304c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	0c1b      	lsrs	r3, r3, #16
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	3301      	adds	r3, #1
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002f56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f66:	e0eb      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f68:	4b38      	ldr	r3, [pc, #224]	; (800304c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f74:	4b35      	ldr	r3, [pc, #212]	; (800304c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d06b      	beq.n	8003058 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f80:	4b32      	ldr	r3, [pc, #200]	; (800304c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	099b      	lsrs	r3, r3, #6
 8002f86:	2200      	movs	r2, #0
 8002f88:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f92:	663b      	str	r3, [r7, #96]	; 0x60
 8002f94:	2300      	movs	r3, #0
 8002f96:	667b      	str	r3, [r7, #100]	; 0x64
 8002f98:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002f9c:	4622      	mov	r2, r4
 8002f9e:	462b      	mov	r3, r5
 8002fa0:	f04f 0000 	mov.w	r0, #0
 8002fa4:	f04f 0100 	mov.w	r1, #0
 8002fa8:	0159      	lsls	r1, r3, #5
 8002faa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fae:	0150      	lsls	r0, r2, #5
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	1a51      	subs	r1, r2, r1
 8002fb8:	61b9      	str	r1, [r7, #24]
 8002fba:	4629      	mov	r1, r5
 8002fbc:	eb63 0301 	sbc.w	r3, r3, r1
 8002fc0:	61fb      	str	r3, [r7, #28]
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002fce:	4659      	mov	r1, fp
 8002fd0:	018b      	lsls	r3, r1, #6
 8002fd2:	4651      	mov	r1, sl
 8002fd4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fd8:	4651      	mov	r1, sl
 8002fda:	018a      	lsls	r2, r1, #6
 8002fdc:	4651      	mov	r1, sl
 8002fde:	ebb2 0801 	subs.w	r8, r2, r1
 8002fe2:	4659      	mov	r1, fp
 8002fe4:	eb63 0901 	sbc.w	r9, r3, r1
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ff4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ff8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ffc:	4690      	mov	r8, r2
 8002ffe:	4699      	mov	r9, r3
 8003000:	4623      	mov	r3, r4
 8003002:	eb18 0303 	adds.w	r3, r8, r3
 8003006:	613b      	str	r3, [r7, #16]
 8003008:	462b      	mov	r3, r5
 800300a:	eb49 0303 	adc.w	r3, r9, r3
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800301c:	4629      	mov	r1, r5
 800301e:	024b      	lsls	r3, r1, #9
 8003020:	4621      	mov	r1, r4
 8003022:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003026:	4621      	mov	r1, r4
 8003028:	024a      	lsls	r2, r1, #9
 800302a:	4610      	mov	r0, r2
 800302c:	4619      	mov	r1, r3
 800302e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003032:	2200      	movs	r2, #0
 8003034:	65bb      	str	r3, [r7, #88]	; 0x58
 8003036:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003038:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800303c:	f7fd f940 	bl	80002c0 <__aeabi_uldivmod>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4613      	mov	r3, r2
 8003046:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800304a:	e065      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x420>
 800304c:	40023800 	.word	0x40023800
 8003050:	00f42400 	.word	0x00f42400
 8003054:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003058:	4b3d      	ldr	r3, [pc, #244]	; (8003150 <HAL_RCC_GetSysClockFreq+0x458>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	099b      	lsrs	r3, r3, #6
 800305e:	2200      	movs	r2, #0
 8003060:	4618      	mov	r0, r3
 8003062:	4611      	mov	r1, r2
 8003064:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003068:	653b      	str	r3, [r7, #80]	; 0x50
 800306a:	2300      	movs	r3, #0
 800306c:	657b      	str	r3, [r7, #84]	; 0x54
 800306e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003072:	4642      	mov	r2, r8
 8003074:	464b      	mov	r3, r9
 8003076:	f04f 0000 	mov.w	r0, #0
 800307a:	f04f 0100 	mov.w	r1, #0
 800307e:	0159      	lsls	r1, r3, #5
 8003080:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003084:	0150      	lsls	r0, r2, #5
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4641      	mov	r1, r8
 800308c:	1a51      	subs	r1, r2, r1
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	4649      	mov	r1, r9
 8003092:	eb63 0301 	sbc.w	r3, r3, r1
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80030a4:	4659      	mov	r1, fp
 80030a6:	018b      	lsls	r3, r1, #6
 80030a8:	4651      	mov	r1, sl
 80030aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030ae:	4651      	mov	r1, sl
 80030b0:	018a      	lsls	r2, r1, #6
 80030b2:	4651      	mov	r1, sl
 80030b4:	1a54      	subs	r4, r2, r1
 80030b6:	4659      	mov	r1, fp
 80030b8:	eb63 0501 	sbc.w	r5, r3, r1
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	00eb      	lsls	r3, r5, #3
 80030c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ca:	00e2      	lsls	r2, r4, #3
 80030cc:	4614      	mov	r4, r2
 80030ce:	461d      	mov	r5, r3
 80030d0:	4643      	mov	r3, r8
 80030d2:	18e3      	adds	r3, r4, r3
 80030d4:	603b      	str	r3, [r7, #0]
 80030d6:	464b      	mov	r3, r9
 80030d8:	eb45 0303 	adc.w	r3, r5, r3
 80030dc:	607b      	str	r3, [r7, #4]
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030ea:	4629      	mov	r1, r5
 80030ec:	028b      	lsls	r3, r1, #10
 80030ee:	4621      	mov	r1, r4
 80030f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030f4:	4621      	mov	r1, r4
 80030f6:	028a      	lsls	r2, r1, #10
 80030f8:	4610      	mov	r0, r2
 80030fa:	4619      	mov	r1, r3
 80030fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003100:	2200      	movs	r2, #0
 8003102:	64bb      	str	r3, [r7, #72]	; 0x48
 8003104:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003106:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800310a:	f7fd f8d9 	bl	80002c0 <__aeabi_uldivmod>
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4613      	mov	r3, r2
 8003114:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003118:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <HAL_RCC_GetSysClockFreq+0x458>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	0f1b      	lsrs	r3, r3, #28
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003126:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800312a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800312e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003132:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003136:	e003      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003138:	4b06      	ldr	r3, [pc, #24]	; (8003154 <HAL_RCC_GetSysClockFreq+0x45c>)
 800313a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800313e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003140:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003144:	4618      	mov	r0, r3
 8003146:	37b8      	adds	r7, #184	; 0xb8
 8003148:	46bd      	mov	sp, r7
 800314a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800314e:	bf00      	nop
 8003150:	40023800 	.word	0x40023800
 8003154:	00f42400 	.word	0x00f42400

08003158 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e28d      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	f000 8083 	beq.w	800327e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003178:	4b94      	ldr	r3, [pc, #592]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 030c 	and.w	r3, r3, #12
 8003180:	2b04      	cmp	r3, #4
 8003182:	d019      	beq.n	80031b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003184:	4b91      	ldr	r3, [pc, #580]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800318c:	2b08      	cmp	r3, #8
 800318e:	d106      	bne.n	800319e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003190:	4b8e      	ldr	r3, [pc, #568]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800319c:	d00c      	beq.n	80031b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800319e:	4b8b      	ldr	r3, [pc, #556]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031a6:	2b0c      	cmp	r3, #12
 80031a8:	d112      	bne.n	80031d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031aa:	4b88      	ldr	r3, [pc, #544]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031b6:	d10b      	bne.n	80031d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b8:	4b84      	ldr	r3, [pc, #528]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d05b      	beq.n	800327c <HAL_RCC_OscConfig+0x124>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d157      	bne.n	800327c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e25a      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d8:	d106      	bne.n	80031e8 <HAL_RCC_OscConfig+0x90>
 80031da:	4b7c      	ldr	r3, [pc, #496]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a7b      	ldr	r2, [pc, #492]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 80031e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	e01d      	b.n	8003224 <HAL_RCC_OscConfig+0xcc>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031f0:	d10c      	bne.n	800320c <HAL_RCC_OscConfig+0xb4>
 80031f2:	4b76      	ldr	r3, [pc, #472]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a75      	ldr	r2, [pc, #468]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 80031f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	4b73      	ldr	r3, [pc, #460]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a72      	ldr	r2, [pc, #456]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 8003204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	e00b      	b.n	8003224 <HAL_RCC_OscConfig+0xcc>
 800320c:	4b6f      	ldr	r3, [pc, #444]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a6e      	ldr	r2, [pc, #440]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 8003212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003216:	6013      	str	r3, [r2, #0]
 8003218:	4b6c      	ldr	r3, [pc, #432]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a6b      	ldr	r2, [pc, #428]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 800321e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d013      	beq.n	8003254 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322c:	f7fe fb5a 	bl	80018e4 <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003234:	f7fe fb56 	bl	80018e4 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b64      	cmp	r3, #100	; 0x64
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e21f      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003246:	4b61      	ldr	r3, [pc, #388]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0f0      	beq.n	8003234 <HAL_RCC_OscConfig+0xdc>
 8003252:	e014      	b.n	800327e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7fe fb46 	bl	80018e4 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800325c:	f7fe fb42 	bl	80018e4 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b64      	cmp	r3, #100	; 0x64
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e20b      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800326e:	4b57      	ldr	r3, [pc, #348]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0x104>
 800327a:	e000      	b.n	800327e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800327c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d06f      	beq.n	800336a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800328a:	4b50      	ldr	r3, [pc, #320]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 030c 	and.w	r3, r3, #12
 8003292:	2b00      	cmp	r3, #0
 8003294:	d017      	beq.n	80032c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003296:	4b4d      	ldr	r3, [pc, #308]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d105      	bne.n	80032ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032a2:	4b4a      	ldr	r3, [pc, #296]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00b      	beq.n	80032c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ae:	4b47      	ldr	r3, [pc, #284]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032b6:	2b0c      	cmp	r3, #12
 80032b8:	d11c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ba:	4b44      	ldr	r3, [pc, #272]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d116      	bne.n	80032f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c6:	4b41      	ldr	r3, [pc, #260]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <HAL_RCC_OscConfig+0x186>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d001      	beq.n	80032de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e1d3      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032de:	4b3b      	ldr	r3, [pc, #236]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4937      	ldr	r1, [pc, #220]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f2:	e03a      	b.n	800336a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d020      	beq.n	800333e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032fc:	4b34      	ldr	r3, [pc, #208]	; (80033d0 <HAL_RCC_OscConfig+0x278>)
 80032fe:	2201      	movs	r2, #1
 8003300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003302:	f7fe faef 	bl	80018e4 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800330a:	f7fe faeb 	bl	80018e4 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e1b4      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331c:	4b2b      	ldr	r3, [pc, #172]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0f0      	beq.n	800330a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003328:	4b28      	ldr	r3, [pc, #160]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	4925      	ldr	r1, [pc, #148]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 8003338:	4313      	orrs	r3, r2
 800333a:	600b      	str	r3, [r1, #0]
 800333c:	e015      	b.n	800336a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800333e:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <HAL_RCC_OscConfig+0x278>)
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7fe face 	bl	80018e4 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800334c:	f7fe faca 	bl	80018e4 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e193      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335e:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d036      	beq.n	80033e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d016      	beq.n	80033ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800337e:	4b15      	ldr	r3, [pc, #84]	; (80033d4 <HAL_RCC_OscConfig+0x27c>)
 8003380:	2201      	movs	r2, #1
 8003382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003384:	f7fe faae 	bl	80018e4 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800338c:	f7fe faaa 	bl	80018e4 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e173      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_RCC_OscConfig+0x274>)
 80033a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0x234>
 80033aa:	e01b      	b.n	80033e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ac:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <HAL_RCC_OscConfig+0x27c>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b2:	f7fe fa97 	bl	80018e4 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b8:	e00e      	b.n	80033d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ba:	f7fe fa93 	bl	80018e4 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d907      	bls.n	80033d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e15c      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
 80033cc:	40023800 	.word	0x40023800
 80033d0:	42470000 	.word	0x42470000
 80033d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d8:	4b8a      	ldr	r3, [pc, #552]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 80033da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1ea      	bne.n	80033ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 8097 	beq.w	8003520 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f2:	2300      	movs	r3, #0
 80033f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033f6:	4b83      	ldr	r3, [pc, #524]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10f      	bne.n	8003422 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003402:	2300      	movs	r3, #0
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	4b7f      	ldr	r3, [pc, #508]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	4a7e      	ldr	r2, [pc, #504]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 800340c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003410:	6413      	str	r3, [r2, #64]	; 0x40
 8003412:	4b7c      	ldr	r3, [pc, #496]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341a:	60bb      	str	r3, [r7, #8]
 800341c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800341e:	2301      	movs	r3, #1
 8003420:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003422:	4b79      	ldr	r3, [pc, #484]	; (8003608 <HAL_RCC_OscConfig+0x4b0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342a:	2b00      	cmp	r3, #0
 800342c:	d118      	bne.n	8003460 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800342e:	4b76      	ldr	r3, [pc, #472]	; (8003608 <HAL_RCC_OscConfig+0x4b0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a75      	ldr	r2, [pc, #468]	; (8003608 <HAL_RCC_OscConfig+0x4b0>)
 8003434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800343a:	f7fe fa53 	bl	80018e4 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003442:	f7fe fa4f 	bl	80018e4 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e118      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003454:	4b6c      	ldr	r3, [pc, #432]	; (8003608 <HAL_RCC_OscConfig+0x4b0>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d106      	bne.n	8003476 <HAL_RCC_OscConfig+0x31e>
 8003468:	4b66      	ldr	r3, [pc, #408]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 800346a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346c:	4a65      	ldr	r2, [pc, #404]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	6713      	str	r3, [r2, #112]	; 0x70
 8003474:	e01c      	b.n	80034b0 <HAL_RCC_OscConfig+0x358>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b05      	cmp	r3, #5
 800347c:	d10c      	bne.n	8003498 <HAL_RCC_OscConfig+0x340>
 800347e:	4b61      	ldr	r3, [pc, #388]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 8003480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003482:	4a60      	ldr	r2, [pc, #384]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 8003484:	f043 0304 	orr.w	r3, r3, #4
 8003488:	6713      	str	r3, [r2, #112]	; 0x70
 800348a:	4b5e      	ldr	r3, [pc, #376]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348e:	4a5d      	ldr	r2, [pc, #372]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	6713      	str	r3, [r2, #112]	; 0x70
 8003496:	e00b      	b.n	80034b0 <HAL_RCC_OscConfig+0x358>
 8003498:	4b5a      	ldr	r3, [pc, #360]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 800349a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349c:	4a59      	ldr	r2, [pc, #356]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 800349e:	f023 0301 	bic.w	r3, r3, #1
 80034a2:	6713      	str	r3, [r2, #112]	; 0x70
 80034a4:	4b57      	ldr	r3, [pc, #348]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a8:	4a56      	ldr	r2, [pc, #344]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 80034aa:	f023 0304 	bic.w	r3, r3, #4
 80034ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d015      	beq.n	80034e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b8:	f7fe fa14 	bl	80018e4 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034be:	e00a      	b.n	80034d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c0:	f7fe fa10 	bl	80018e4 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e0d7      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d6:	4b4b      	ldr	r3, [pc, #300]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0ee      	beq.n	80034c0 <HAL_RCC_OscConfig+0x368>
 80034e2:	e014      	b.n	800350e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e4:	f7fe f9fe 	bl	80018e4 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ea:	e00a      	b.n	8003502 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ec:	f7fe f9fa 	bl	80018e4 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e0c1      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003502:	4b40      	ldr	r3, [pc, #256]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1ee      	bne.n	80034ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800350e:	7dfb      	ldrb	r3, [r7, #23]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d105      	bne.n	8003520 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003514:	4b3b      	ldr	r3, [pc, #236]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	4a3a      	ldr	r2, [pc, #232]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 800351a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800351e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 80ad 	beq.w	8003684 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800352a:	4b36      	ldr	r3, [pc, #216]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	2b08      	cmp	r3, #8
 8003534:	d060      	beq.n	80035f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d145      	bne.n	80035ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353e:	4b33      	ldr	r3, [pc, #204]	; (800360c <HAL_RCC_OscConfig+0x4b4>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7fe f9ce 	bl	80018e4 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354c:	f7fe f9ca 	bl	80018e4 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e093      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355e:	4b29      	ldr	r3, [pc, #164]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69da      	ldr	r2, [r3, #28]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	019b      	lsls	r3, r3, #6
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	085b      	lsrs	r3, r3, #1
 8003582:	3b01      	subs	r3, #1
 8003584:	041b      	lsls	r3, r3, #16
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	061b      	lsls	r3, r3, #24
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003594:	071b      	lsls	r3, r3, #28
 8003596:	491b      	ldr	r1, [pc, #108]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 8003598:	4313      	orrs	r3, r2
 800359a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800359c:	4b1b      	ldr	r3, [pc, #108]	; (800360c <HAL_RCC_OscConfig+0x4b4>)
 800359e:	2201      	movs	r2, #1
 80035a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a2:	f7fe f99f 	bl	80018e4 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035aa:	f7fe f99b 	bl	80018e4 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e064      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035bc:	4b11      	ldr	r3, [pc, #68]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0f0      	beq.n	80035aa <HAL_RCC_OscConfig+0x452>
 80035c8:	e05c      	b.n	8003684 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ca:	4b10      	ldr	r3, [pc, #64]	; (800360c <HAL_RCC_OscConfig+0x4b4>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d0:	f7fe f988 	bl	80018e4 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d8:	f7fe f984 	bl	80018e4 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e04d      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ea:	4b06      	ldr	r3, [pc, #24]	; (8003604 <HAL_RCC_OscConfig+0x4ac>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f0      	bne.n	80035d8 <HAL_RCC_OscConfig+0x480>
 80035f6:	e045      	b.n	8003684 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d107      	bne.n	8003610 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e040      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
 8003604:	40023800 	.word	0x40023800
 8003608:	40007000 	.word	0x40007000
 800360c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003610:	4b1f      	ldr	r3, [pc, #124]	; (8003690 <HAL_RCC_OscConfig+0x538>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d030      	beq.n	8003680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003628:	429a      	cmp	r2, r3
 800362a:	d129      	bne.n	8003680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003636:	429a      	cmp	r2, r3
 8003638:	d122      	bne.n	8003680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003640:	4013      	ands	r3, r2
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003646:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003648:	4293      	cmp	r3, r2
 800364a:	d119      	bne.n	8003680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003656:	085b      	lsrs	r3, r3, #1
 8003658:	3b01      	subs	r3, #1
 800365a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800365c:	429a      	cmp	r2, r3
 800365e:	d10f      	bne.n	8003680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800366c:	429a      	cmp	r2, r3
 800366e:	d107      	bne.n	8003680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e000      	b.n	8003686 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40023800 	.word	0x40023800

08003694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e041      	b.n	800372a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d106      	bne.n	80036c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f839 	bl	8003732 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2202      	movs	r2, #2
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3304      	adds	r3, #4
 80036d0:	4619      	mov	r1, r3
 80036d2:	4610      	mov	r0, r2
 80036d4:	f000 f9c0 	bl	8003a58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
	...

08003748 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b01      	cmp	r3, #1
 800375a:	d001      	beq.n	8003760 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e04e      	b.n	80037fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0201 	orr.w	r2, r2, #1
 8003776:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a23      	ldr	r2, [pc, #140]	; (800380c <HAL_TIM_Base_Start_IT+0xc4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d022      	beq.n	80037c8 <HAL_TIM_Base_Start_IT+0x80>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800378a:	d01d      	beq.n	80037c8 <HAL_TIM_Base_Start_IT+0x80>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a1f      	ldr	r2, [pc, #124]	; (8003810 <HAL_TIM_Base_Start_IT+0xc8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d018      	beq.n	80037c8 <HAL_TIM_Base_Start_IT+0x80>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a1e      	ldr	r2, [pc, #120]	; (8003814 <HAL_TIM_Base_Start_IT+0xcc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d013      	beq.n	80037c8 <HAL_TIM_Base_Start_IT+0x80>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1c      	ldr	r2, [pc, #112]	; (8003818 <HAL_TIM_Base_Start_IT+0xd0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00e      	beq.n	80037c8 <HAL_TIM_Base_Start_IT+0x80>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a1b      	ldr	r2, [pc, #108]	; (800381c <HAL_TIM_Base_Start_IT+0xd4>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d009      	beq.n	80037c8 <HAL_TIM_Base_Start_IT+0x80>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a19      	ldr	r2, [pc, #100]	; (8003820 <HAL_TIM_Base_Start_IT+0xd8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d004      	beq.n	80037c8 <HAL_TIM_Base_Start_IT+0x80>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a18      	ldr	r2, [pc, #96]	; (8003824 <HAL_TIM_Base_Start_IT+0xdc>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d111      	bne.n	80037ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2b06      	cmp	r3, #6
 80037d8:	d010      	beq.n	80037fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f042 0201 	orr.w	r2, r2, #1
 80037e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ea:	e007      	b.n	80037fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0201 	orr.w	r2, r2, #1
 80037fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40010000 	.word	0x40010000
 8003810:	40000400 	.word	0x40000400
 8003814:	40000800 	.word	0x40000800
 8003818:	40000c00 	.word	0x40000c00
 800381c:	40010400 	.word	0x40010400
 8003820:	40014000 	.word	0x40014000
 8003824:	40001800 	.word	0x40001800

08003828 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d020      	beq.n	800388c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d01b      	beq.n	800388c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0202 	mvn.w	r2, #2
 800385c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f8d2 	bl	8003a1c <HAL_TIM_IC_CaptureCallback>
 8003878:	e005      	b.n	8003886 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f8c4 	bl	8003a08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f8d5 	bl	8003a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	2b00      	cmp	r3, #0
 8003894:	d020      	beq.n	80038d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d01b      	beq.n	80038d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0204 	mvn.w	r2, #4
 80038a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2202      	movs	r2, #2
 80038ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f8ac 	bl	8003a1c <HAL_TIM_IC_CaptureCallback>
 80038c4:	e005      	b.n	80038d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f89e 	bl	8003a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f8af 	bl	8003a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d020      	beq.n	8003924 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d01b      	beq.n	8003924 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 0208 	mvn.w	r2, #8
 80038f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2204      	movs	r2, #4
 80038fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f886 	bl	8003a1c <HAL_TIM_IC_CaptureCallback>
 8003910:	e005      	b.n	800391e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f878 	bl	8003a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f889 	bl	8003a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	2b00      	cmp	r3, #0
 800392c:	d020      	beq.n	8003970 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	2b00      	cmp	r3, #0
 8003936:	d01b      	beq.n	8003970 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f06f 0210 	mvn.w	r2, #16
 8003940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2208      	movs	r2, #8
 8003946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f860 	bl	8003a1c <HAL_TIM_IC_CaptureCallback>
 800395c:	e005      	b.n	800396a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f852 	bl	8003a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f863 	bl	8003a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00c      	beq.n	8003994 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b00      	cmp	r3, #0
 8003982:	d007      	beq.n	8003994 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0201 	mvn.w	r2, #1
 800398c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7fd fad0 	bl	8000f34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00c      	beq.n	80039b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d007      	beq.n	80039b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f906 	bl	8003bc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00c      	beq.n	80039dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d007      	beq.n	80039dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f834 	bl	8003a44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f003 0320 	and.w	r3, r3, #32
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00c      	beq.n	8003a00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f003 0320 	and.w	r3, r3, #32
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d007      	beq.n	8003a00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f06f 0220 	mvn.w	r2, #32
 80039f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f8d8 	bl	8003bb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a00:	bf00      	nop
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a46      	ldr	r2, [pc, #280]	; (8003b84 <TIM_Base_SetConfig+0x12c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d013      	beq.n	8003a98 <TIM_Base_SetConfig+0x40>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a76:	d00f      	beq.n	8003a98 <TIM_Base_SetConfig+0x40>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a43      	ldr	r2, [pc, #268]	; (8003b88 <TIM_Base_SetConfig+0x130>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00b      	beq.n	8003a98 <TIM_Base_SetConfig+0x40>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a42      	ldr	r2, [pc, #264]	; (8003b8c <TIM_Base_SetConfig+0x134>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d007      	beq.n	8003a98 <TIM_Base_SetConfig+0x40>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a41      	ldr	r2, [pc, #260]	; (8003b90 <TIM_Base_SetConfig+0x138>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d003      	beq.n	8003a98 <TIM_Base_SetConfig+0x40>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a40      	ldr	r2, [pc, #256]	; (8003b94 <TIM_Base_SetConfig+0x13c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d108      	bne.n	8003aaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a35      	ldr	r2, [pc, #212]	; (8003b84 <TIM_Base_SetConfig+0x12c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d02b      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab8:	d027      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a32      	ldr	r2, [pc, #200]	; (8003b88 <TIM_Base_SetConfig+0x130>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d023      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a31      	ldr	r2, [pc, #196]	; (8003b8c <TIM_Base_SetConfig+0x134>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d01f      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a30      	ldr	r2, [pc, #192]	; (8003b90 <TIM_Base_SetConfig+0x138>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d01b      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a2f      	ldr	r2, [pc, #188]	; (8003b94 <TIM_Base_SetConfig+0x13c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d017      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a2e      	ldr	r2, [pc, #184]	; (8003b98 <TIM_Base_SetConfig+0x140>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d013      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a2d      	ldr	r2, [pc, #180]	; (8003b9c <TIM_Base_SetConfig+0x144>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00f      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a2c      	ldr	r2, [pc, #176]	; (8003ba0 <TIM_Base_SetConfig+0x148>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00b      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a2b      	ldr	r2, [pc, #172]	; (8003ba4 <TIM_Base_SetConfig+0x14c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d007      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a2a      	ldr	r2, [pc, #168]	; (8003ba8 <TIM_Base_SetConfig+0x150>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d003      	beq.n	8003b0a <TIM_Base_SetConfig+0xb2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a29      	ldr	r2, [pc, #164]	; (8003bac <TIM_Base_SetConfig+0x154>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d108      	bne.n	8003b1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a10      	ldr	r2, [pc, #64]	; (8003b84 <TIM_Base_SetConfig+0x12c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d003      	beq.n	8003b50 <TIM_Base_SetConfig+0xf8>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a12      	ldr	r2, [pc, #72]	; (8003b94 <TIM_Base_SetConfig+0x13c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d103      	bne.n	8003b58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d105      	bne.n	8003b76 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f023 0201 	bic.w	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	611a      	str	r2, [r3, #16]
  }
}
 8003b76:	bf00      	nop
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40010000 	.word	0x40010000
 8003b88:	40000400 	.word	0x40000400
 8003b8c:	40000800 	.word	0x40000800
 8003b90:	40000c00 	.word	0x40000c00
 8003b94:	40010400 	.word	0x40010400
 8003b98:	40014000 	.word	0x40014000
 8003b9c:	40014400 	.word	0x40014400
 8003ba0:	40014800 	.word	0x40014800
 8003ba4:	40001800 	.word	0x40001800
 8003ba8:	40001c00 	.word	0x40001c00
 8003bac:	40002000 	.word	0x40002000

08003bb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e042      	b.n	8003c70 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fd fce4 	bl	80015cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2224      	movs	r2, #36	; 0x24
 8003c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f973 	bl	8003f08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	691a      	ldr	r2, [r3, #16]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695a      	ldr	r2, [r3, #20]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08a      	sub	sp, #40	; 0x28
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	603b      	str	r3, [r7, #0]
 8003c84:	4613      	mov	r3, r2
 8003c86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d175      	bne.n	8003d84 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <HAL_UART_Transmit+0x2c>
 8003c9e:	88fb      	ldrh	r3, [r7, #6]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e06e      	b.n	8003d86 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2221      	movs	r2, #33	; 0x21
 8003cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cb6:	f7fd fe15 	bl	80018e4 <HAL_GetTick>
 8003cba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	88fa      	ldrh	r2, [r7, #6]
 8003cc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	88fa      	ldrh	r2, [r7, #6]
 8003cc6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd0:	d108      	bne.n	8003ce4 <HAL_UART_Transmit+0x6c>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d104      	bne.n	8003ce4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	61bb      	str	r3, [r7, #24]
 8003ce2:	e003      	b.n	8003cec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cec:	e02e      	b.n	8003d4c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	2180      	movs	r1, #128	; 0x80
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 f848 	bl	8003d8e <UART_WaitOnFlagUntilTimeout>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e03a      	b.n	8003d86 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10b      	bne.n	8003d2e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	3302      	adds	r3, #2
 8003d2a:	61bb      	str	r3, [r7, #24]
 8003d2c:	e007      	b.n	8003d3e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	781a      	ldrb	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1cb      	bne.n	8003cee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	2140      	movs	r1, #64	; 0x40
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 f814 	bl	8003d8e <UART_WaitOnFlagUntilTimeout>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e006      	b.n	8003d86 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	e000      	b.n	8003d86 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d84:	2302      	movs	r3, #2
  }
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3720      	adds	r7, #32
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b086      	sub	sp, #24
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	60f8      	str	r0, [r7, #12]
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	603b      	str	r3, [r7, #0]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d9e:	e03b      	b.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003da6:	d037      	beq.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da8:	f7fd fd9c 	bl	80018e4 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	6a3a      	ldr	r2, [r7, #32]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d302      	bcc.n	8003dbe <UART_WaitOnFlagUntilTimeout+0x30>
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e03a      	b.n	8003e38 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d023      	beq.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b80      	cmp	r3, #128	; 0x80
 8003dd4:	d020      	beq.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b40      	cmp	r3, #64	; 0x40
 8003dda:	d01d      	beq.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b08      	cmp	r3, #8
 8003de8:	d116      	bne.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	617b      	str	r3, [r7, #20]
 8003dfe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 f81d 	bl	8003e40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2208      	movs	r2, #8
 8003e0a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e00f      	b.n	8003e38 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	4013      	ands	r3, r2
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	bf0c      	ite	eq
 8003e28:	2301      	moveq	r3, #1
 8003e2a:	2300      	movne	r3, #0
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	461a      	mov	r2, r3
 8003e30:	79fb      	ldrb	r3, [r7, #7]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d0b4      	beq.n	8003da0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b095      	sub	sp, #84	; 0x54
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	330c      	adds	r3, #12
 8003e4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e52:	e853 3f00 	ldrex	r3, [r3]
 8003e56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	330c      	adds	r3, #12
 8003e66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e68:	643a      	str	r2, [r7, #64]	; 0x40
 8003e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e70:	e841 2300 	strex	r3, r2, [r1]
 8003e74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1e5      	bne.n	8003e48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3314      	adds	r3, #20
 8003e82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	e853 3f00 	ldrex	r3, [r3]
 8003e8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f023 0301 	bic.w	r3, r3, #1
 8003e92:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3314      	adds	r3, #20
 8003e9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ea4:	e841 2300 	strex	r3, r2, [r1]
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1e5      	bne.n	8003e7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d119      	bne.n	8003eec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	330c      	adds	r3, #12
 8003ebe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	e853 3f00 	ldrex	r3, [r3]
 8003ec6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	f023 0310 	bic.w	r3, r3, #16
 8003ece:	647b      	str	r3, [r7, #68]	; 0x44
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	330c      	adds	r3, #12
 8003ed6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ed8:	61ba      	str	r2, [r7, #24]
 8003eda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003edc:	6979      	ldr	r1, [r7, #20]
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	e841 2300 	strex	r3, r2, [r1]
 8003ee4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1e5      	bne.n	8003eb8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003efa:	bf00      	nop
 8003efc:	3754      	adds	r7, #84	; 0x54
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
	...

08003f08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f0c:	b0c0      	sub	sp, #256	; 0x100
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f24:	68d9      	ldr	r1, [r3, #12]
 8003f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	ea40 0301 	orr.w	r3, r0, r1
 8003f30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f60:	f021 010c 	bic.w	r1, r1, #12
 8003f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f6e:	430b      	orrs	r3, r1
 8003f70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f82:	6999      	ldr	r1, [r3, #24]
 8003f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	ea40 0301 	orr.w	r3, r0, r1
 8003f8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	4b8f      	ldr	r3, [pc, #572]	; (80041d4 <UART_SetConfig+0x2cc>)
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d005      	beq.n	8003fa8 <UART_SetConfig+0xa0>
 8003f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	4b8d      	ldr	r3, [pc, #564]	; (80041d8 <UART_SetConfig+0x2d0>)
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d104      	bne.n	8003fb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fa8:	f7fe fe60 	bl	8002c6c <HAL_RCC_GetPCLK2Freq>
 8003fac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003fb0:	e003      	b.n	8003fba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fb2:	f7fe fe47 	bl	8002c44 <HAL_RCC_GetPCLK1Freq>
 8003fb6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fc4:	f040 810c 	bne.w	80041e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003fd2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003fd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003fda:	4622      	mov	r2, r4
 8003fdc:	462b      	mov	r3, r5
 8003fde:	1891      	adds	r1, r2, r2
 8003fe0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fe2:	415b      	adcs	r3, r3
 8003fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fe6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003fea:	4621      	mov	r1, r4
 8003fec:	eb12 0801 	adds.w	r8, r2, r1
 8003ff0:	4629      	mov	r1, r5
 8003ff2:	eb43 0901 	adc.w	r9, r3, r1
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004002:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004006:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800400a:	4690      	mov	r8, r2
 800400c:	4699      	mov	r9, r3
 800400e:	4623      	mov	r3, r4
 8004010:	eb18 0303 	adds.w	r3, r8, r3
 8004014:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004018:	462b      	mov	r3, r5
 800401a:	eb49 0303 	adc.w	r3, r9, r3
 800401e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800402e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004032:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004036:	460b      	mov	r3, r1
 8004038:	18db      	adds	r3, r3, r3
 800403a:	653b      	str	r3, [r7, #80]	; 0x50
 800403c:	4613      	mov	r3, r2
 800403e:	eb42 0303 	adc.w	r3, r2, r3
 8004042:	657b      	str	r3, [r7, #84]	; 0x54
 8004044:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004048:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800404c:	f7fc f938 	bl	80002c0 <__aeabi_uldivmod>
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	4b61      	ldr	r3, [pc, #388]	; (80041dc <UART_SetConfig+0x2d4>)
 8004056:	fba3 2302 	umull	r2, r3, r3, r2
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	011c      	lsls	r4, r3, #4
 800405e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004062:	2200      	movs	r2, #0
 8004064:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004068:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800406c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004070:	4642      	mov	r2, r8
 8004072:	464b      	mov	r3, r9
 8004074:	1891      	adds	r1, r2, r2
 8004076:	64b9      	str	r1, [r7, #72]	; 0x48
 8004078:	415b      	adcs	r3, r3
 800407a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800407c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004080:	4641      	mov	r1, r8
 8004082:	eb12 0a01 	adds.w	sl, r2, r1
 8004086:	4649      	mov	r1, r9
 8004088:	eb43 0b01 	adc.w	fp, r3, r1
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	f04f 0300 	mov.w	r3, #0
 8004094:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004098:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800409c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040a0:	4692      	mov	sl, r2
 80040a2:	469b      	mov	fp, r3
 80040a4:	4643      	mov	r3, r8
 80040a6:	eb1a 0303 	adds.w	r3, sl, r3
 80040aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040ae:	464b      	mov	r3, r9
 80040b0:	eb4b 0303 	adc.w	r3, fp, r3
 80040b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80040b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80040c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80040cc:	460b      	mov	r3, r1
 80040ce:	18db      	adds	r3, r3, r3
 80040d0:	643b      	str	r3, [r7, #64]	; 0x40
 80040d2:	4613      	mov	r3, r2
 80040d4:	eb42 0303 	adc.w	r3, r2, r3
 80040d8:	647b      	str	r3, [r7, #68]	; 0x44
 80040da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80040e2:	f7fc f8ed 	bl	80002c0 <__aeabi_uldivmod>
 80040e6:	4602      	mov	r2, r0
 80040e8:	460b      	mov	r3, r1
 80040ea:	4611      	mov	r1, r2
 80040ec:	4b3b      	ldr	r3, [pc, #236]	; (80041dc <UART_SetConfig+0x2d4>)
 80040ee:	fba3 2301 	umull	r2, r3, r3, r1
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	2264      	movs	r2, #100	; 0x64
 80040f6:	fb02 f303 	mul.w	r3, r2, r3
 80040fa:	1acb      	subs	r3, r1, r3
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004102:	4b36      	ldr	r3, [pc, #216]	; (80041dc <UART_SetConfig+0x2d4>)
 8004104:	fba3 2302 	umull	r2, r3, r3, r2
 8004108:	095b      	lsrs	r3, r3, #5
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004110:	441c      	add	r4, r3
 8004112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004116:	2200      	movs	r2, #0
 8004118:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800411c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004120:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004124:	4642      	mov	r2, r8
 8004126:	464b      	mov	r3, r9
 8004128:	1891      	adds	r1, r2, r2
 800412a:	63b9      	str	r1, [r7, #56]	; 0x38
 800412c:	415b      	adcs	r3, r3
 800412e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004130:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004134:	4641      	mov	r1, r8
 8004136:	1851      	adds	r1, r2, r1
 8004138:	6339      	str	r1, [r7, #48]	; 0x30
 800413a:	4649      	mov	r1, r9
 800413c:	414b      	adcs	r3, r1
 800413e:	637b      	str	r3, [r7, #52]	; 0x34
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	f04f 0300 	mov.w	r3, #0
 8004148:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800414c:	4659      	mov	r1, fp
 800414e:	00cb      	lsls	r3, r1, #3
 8004150:	4651      	mov	r1, sl
 8004152:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004156:	4651      	mov	r1, sl
 8004158:	00ca      	lsls	r2, r1, #3
 800415a:	4610      	mov	r0, r2
 800415c:	4619      	mov	r1, r3
 800415e:	4603      	mov	r3, r0
 8004160:	4642      	mov	r2, r8
 8004162:	189b      	adds	r3, r3, r2
 8004164:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004168:	464b      	mov	r3, r9
 800416a:	460a      	mov	r2, r1
 800416c:	eb42 0303 	adc.w	r3, r2, r3
 8004170:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004180:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004184:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004188:	460b      	mov	r3, r1
 800418a:	18db      	adds	r3, r3, r3
 800418c:	62bb      	str	r3, [r7, #40]	; 0x28
 800418e:	4613      	mov	r3, r2
 8004190:	eb42 0303 	adc.w	r3, r2, r3
 8004194:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004196:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800419a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800419e:	f7fc f88f 	bl	80002c0 <__aeabi_uldivmod>
 80041a2:	4602      	mov	r2, r0
 80041a4:	460b      	mov	r3, r1
 80041a6:	4b0d      	ldr	r3, [pc, #52]	; (80041dc <UART_SetConfig+0x2d4>)
 80041a8:	fba3 1302 	umull	r1, r3, r3, r2
 80041ac:	095b      	lsrs	r3, r3, #5
 80041ae:	2164      	movs	r1, #100	; 0x64
 80041b0:	fb01 f303 	mul.w	r3, r1, r3
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	3332      	adds	r3, #50	; 0x32
 80041ba:	4a08      	ldr	r2, [pc, #32]	; (80041dc <UART_SetConfig+0x2d4>)
 80041bc:	fba2 2303 	umull	r2, r3, r2, r3
 80041c0:	095b      	lsrs	r3, r3, #5
 80041c2:	f003 0207 	and.w	r2, r3, #7
 80041c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4422      	add	r2, r4
 80041ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041d0:	e106      	b.n	80043e0 <UART_SetConfig+0x4d8>
 80041d2:	bf00      	nop
 80041d4:	40011000 	.word	0x40011000
 80041d8:	40011400 	.word	0x40011400
 80041dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041e4:	2200      	movs	r2, #0
 80041e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80041ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80041f2:	4642      	mov	r2, r8
 80041f4:	464b      	mov	r3, r9
 80041f6:	1891      	adds	r1, r2, r2
 80041f8:	6239      	str	r1, [r7, #32]
 80041fa:	415b      	adcs	r3, r3
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
 80041fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004202:	4641      	mov	r1, r8
 8004204:	1854      	adds	r4, r2, r1
 8004206:	4649      	mov	r1, r9
 8004208:	eb43 0501 	adc.w	r5, r3, r1
 800420c:	f04f 0200 	mov.w	r2, #0
 8004210:	f04f 0300 	mov.w	r3, #0
 8004214:	00eb      	lsls	r3, r5, #3
 8004216:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800421a:	00e2      	lsls	r2, r4, #3
 800421c:	4614      	mov	r4, r2
 800421e:	461d      	mov	r5, r3
 8004220:	4643      	mov	r3, r8
 8004222:	18e3      	adds	r3, r4, r3
 8004224:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004228:	464b      	mov	r3, r9
 800422a:	eb45 0303 	adc.w	r3, r5, r3
 800422e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800423e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004242:	f04f 0200 	mov.w	r2, #0
 8004246:	f04f 0300 	mov.w	r3, #0
 800424a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800424e:	4629      	mov	r1, r5
 8004250:	008b      	lsls	r3, r1, #2
 8004252:	4621      	mov	r1, r4
 8004254:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004258:	4621      	mov	r1, r4
 800425a:	008a      	lsls	r2, r1, #2
 800425c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004260:	f7fc f82e 	bl	80002c0 <__aeabi_uldivmod>
 8004264:	4602      	mov	r2, r0
 8004266:	460b      	mov	r3, r1
 8004268:	4b60      	ldr	r3, [pc, #384]	; (80043ec <UART_SetConfig+0x4e4>)
 800426a:	fba3 2302 	umull	r2, r3, r3, r2
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	011c      	lsls	r4, r3, #4
 8004272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004276:	2200      	movs	r2, #0
 8004278:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800427c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004280:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004284:	4642      	mov	r2, r8
 8004286:	464b      	mov	r3, r9
 8004288:	1891      	adds	r1, r2, r2
 800428a:	61b9      	str	r1, [r7, #24]
 800428c:	415b      	adcs	r3, r3
 800428e:	61fb      	str	r3, [r7, #28]
 8004290:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004294:	4641      	mov	r1, r8
 8004296:	1851      	adds	r1, r2, r1
 8004298:	6139      	str	r1, [r7, #16]
 800429a:	4649      	mov	r1, r9
 800429c:	414b      	adcs	r3, r1
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042ac:	4659      	mov	r1, fp
 80042ae:	00cb      	lsls	r3, r1, #3
 80042b0:	4651      	mov	r1, sl
 80042b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042b6:	4651      	mov	r1, sl
 80042b8:	00ca      	lsls	r2, r1, #3
 80042ba:	4610      	mov	r0, r2
 80042bc:	4619      	mov	r1, r3
 80042be:	4603      	mov	r3, r0
 80042c0:	4642      	mov	r2, r8
 80042c2:	189b      	adds	r3, r3, r2
 80042c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042c8:	464b      	mov	r3, r9
 80042ca:	460a      	mov	r2, r1
 80042cc:	eb42 0303 	adc.w	r3, r2, r3
 80042d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80042de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80042ec:	4649      	mov	r1, r9
 80042ee:	008b      	lsls	r3, r1, #2
 80042f0:	4641      	mov	r1, r8
 80042f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042f6:	4641      	mov	r1, r8
 80042f8:	008a      	lsls	r2, r1, #2
 80042fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80042fe:	f7fb ffdf 	bl	80002c0 <__aeabi_uldivmod>
 8004302:	4602      	mov	r2, r0
 8004304:	460b      	mov	r3, r1
 8004306:	4611      	mov	r1, r2
 8004308:	4b38      	ldr	r3, [pc, #224]	; (80043ec <UART_SetConfig+0x4e4>)
 800430a:	fba3 2301 	umull	r2, r3, r3, r1
 800430e:	095b      	lsrs	r3, r3, #5
 8004310:	2264      	movs	r2, #100	; 0x64
 8004312:	fb02 f303 	mul.w	r3, r2, r3
 8004316:	1acb      	subs	r3, r1, r3
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	3332      	adds	r3, #50	; 0x32
 800431c:	4a33      	ldr	r2, [pc, #204]	; (80043ec <UART_SetConfig+0x4e4>)
 800431e:	fba2 2303 	umull	r2, r3, r2, r3
 8004322:	095b      	lsrs	r3, r3, #5
 8004324:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004328:	441c      	add	r4, r3
 800432a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800432e:	2200      	movs	r2, #0
 8004330:	673b      	str	r3, [r7, #112]	; 0x70
 8004332:	677a      	str	r2, [r7, #116]	; 0x74
 8004334:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004338:	4642      	mov	r2, r8
 800433a:	464b      	mov	r3, r9
 800433c:	1891      	adds	r1, r2, r2
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	415b      	adcs	r3, r3
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004348:	4641      	mov	r1, r8
 800434a:	1851      	adds	r1, r2, r1
 800434c:	6039      	str	r1, [r7, #0]
 800434e:	4649      	mov	r1, r9
 8004350:	414b      	adcs	r3, r1
 8004352:	607b      	str	r3, [r7, #4]
 8004354:	f04f 0200 	mov.w	r2, #0
 8004358:	f04f 0300 	mov.w	r3, #0
 800435c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004360:	4659      	mov	r1, fp
 8004362:	00cb      	lsls	r3, r1, #3
 8004364:	4651      	mov	r1, sl
 8004366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800436a:	4651      	mov	r1, sl
 800436c:	00ca      	lsls	r2, r1, #3
 800436e:	4610      	mov	r0, r2
 8004370:	4619      	mov	r1, r3
 8004372:	4603      	mov	r3, r0
 8004374:	4642      	mov	r2, r8
 8004376:	189b      	adds	r3, r3, r2
 8004378:	66bb      	str	r3, [r7, #104]	; 0x68
 800437a:	464b      	mov	r3, r9
 800437c:	460a      	mov	r2, r1
 800437e:	eb42 0303 	adc.w	r3, r2, r3
 8004382:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	663b      	str	r3, [r7, #96]	; 0x60
 800438e:	667a      	str	r2, [r7, #100]	; 0x64
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	f04f 0300 	mov.w	r3, #0
 8004398:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800439c:	4649      	mov	r1, r9
 800439e:	008b      	lsls	r3, r1, #2
 80043a0:	4641      	mov	r1, r8
 80043a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043a6:	4641      	mov	r1, r8
 80043a8:	008a      	lsls	r2, r1, #2
 80043aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80043ae:	f7fb ff87 	bl	80002c0 <__aeabi_uldivmod>
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	4b0d      	ldr	r3, [pc, #52]	; (80043ec <UART_SetConfig+0x4e4>)
 80043b8:	fba3 1302 	umull	r1, r3, r3, r2
 80043bc:	095b      	lsrs	r3, r3, #5
 80043be:	2164      	movs	r1, #100	; 0x64
 80043c0:	fb01 f303 	mul.w	r3, r1, r3
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	3332      	adds	r3, #50	; 0x32
 80043ca:	4a08      	ldr	r2, [pc, #32]	; (80043ec <UART_SetConfig+0x4e4>)
 80043cc:	fba2 2303 	umull	r2, r3, r2, r3
 80043d0:	095b      	lsrs	r3, r3, #5
 80043d2:	f003 020f 	and.w	r2, r3, #15
 80043d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4422      	add	r2, r4
 80043de:	609a      	str	r2, [r3, #8]
}
 80043e0:	bf00      	nop
 80043e2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80043e6:	46bd      	mov	sp, r7
 80043e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ec:	51eb851f 	.word	0x51eb851f

080043f0 <__NVIC_SetPriority>:
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4603      	mov	r3, r0
 80043f8:	6039      	str	r1, [r7, #0]
 80043fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004400:	2b00      	cmp	r3, #0
 8004402:	db0a      	blt.n	800441a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	b2da      	uxtb	r2, r3
 8004408:	490c      	ldr	r1, [pc, #48]	; (800443c <__NVIC_SetPriority+0x4c>)
 800440a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800440e:	0112      	lsls	r2, r2, #4
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	440b      	add	r3, r1
 8004414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004418:	e00a      	b.n	8004430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	b2da      	uxtb	r2, r3
 800441e:	4908      	ldr	r1, [pc, #32]	; (8004440 <__NVIC_SetPriority+0x50>)
 8004420:	79fb      	ldrb	r3, [r7, #7]
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	3b04      	subs	r3, #4
 8004428:	0112      	lsls	r2, r2, #4
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	440b      	add	r3, r1
 800442e:	761a      	strb	r2, [r3, #24]
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	e000e100 	.word	0xe000e100
 8004440:	e000ed00 	.word	0xe000ed00

08004444 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004448:	4b05      	ldr	r3, [pc, #20]	; (8004460 <SysTick_Handler+0x1c>)
 800444a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800444c:	f001 fd28 	bl	8005ea0 <xTaskGetSchedulerState>
 8004450:	4603      	mov	r3, r0
 8004452:	2b01      	cmp	r3, #1
 8004454:	d001      	beq.n	800445a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004456:	f002 fb0f 	bl	8006a78 <xPortSysTickHandler>
  }
}
 800445a:	bf00      	nop
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	e000e010 	.word	0xe000e010

08004464 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004468:	2100      	movs	r1, #0
 800446a:	f06f 0004 	mvn.w	r0, #4
 800446e:	f7ff ffbf 	bl	80043f0 <__NVIC_SetPriority>
#endif
}
 8004472:	bf00      	nop
 8004474:	bd80      	pop	{r7, pc}
	...

08004478 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800447e:	f3ef 8305 	mrs	r3, IPSR
 8004482:	603b      	str	r3, [r7, #0]
  return(result);
 8004484:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800448a:	f06f 0305 	mvn.w	r3, #5
 800448e:	607b      	str	r3, [r7, #4]
 8004490:	e00c      	b.n	80044ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004492:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <osKernelInitialize+0x44>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d105      	bne.n	80044a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800449a:	4b08      	ldr	r3, [pc, #32]	; (80044bc <osKernelInitialize+0x44>)
 800449c:	2201      	movs	r2, #1
 800449e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	607b      	str	r3, [r7, #4]
 80044a4:	e002      	b.n	80044ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80044a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044ac:	687b      	ldr	r3, [r7, #4]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	200005a8 	.word	0x200005a8

080044c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044c6:	f3ef 8305 	mrs	r3, IPSR
 80044ca:	603b      	str	r3, [r7, #0]
  return(result);
 80044cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <osKernelStart+0x1a>
    stat = osErrorISR;
 80044d2:	f06f 0305 	mvn.w	r3, #5
 80044d6:	607b      	str	r3, [r7, #4]
 80044d8:	e010      	b.n	80044fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80044da:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <osKernelStart+0x48>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d109      	bne.n	80044f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80044e2:	f7ff ffbf 	bl	8004464 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80044e6:	4b08      	ldr	r3, [pc, #32]	; (8004508 <osKernelStart+0x48>)
 80044e8:	2202      	movs	r2, #2
 80044ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80044ec:	f001 f87c 	bl	80055e8 <vTaskStartScheduler>
      stat = osOK;
 80044f0:	2300      	movs	r3, #0
 80044f2:	607b      	str	r3, [r7, #4]
 80044f4:	e002      	b.n	80044fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80044f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044fc:	687b      	ldr	r3, [r7, #4]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	200005a8 	.word	0x200005a8

0800450c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800450c:	b580      	push	{r7, lr}
 800450e:	b08e      	sub	sp, #56	; 0x38
 8004510:	af04      	add	r7, sp, #16
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004518:	2300      	movs	r3, #0
 800451a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800451c:	f3ef 8305 	mrs	r3, IPSR
 8004520:	617b      	str	r3, [r7, #20]
  return(result);
 8004522:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004524:	2b00      	cmp	r3, #0
 8004526:	d17e      	bne.n	8004626 <osThreadNew+0x11a>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d07b      	beq.n	8004626 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800452e:	2380      	movs	r3, #128	; 0x80
 8004530:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004532:	2318      	movs	r3, #24
 8004534:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004536:	2300      	movs	r3, #0
 8004538:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800453a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800453e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d045      	beq.n	80045d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <osThreadNew+0x48>
        name = attr->name;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d008      	beq.n	800457a <osThreadNew+0x6e>
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	2b38      	cmp	r3, #56	; 0x38
 800456c:	d805      	bhi.n	800457a <osThreadNew+0x6e>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <osThreadNew+0x72>
        return (NULL);
 800457a:	2300      	movs	r3, #0
 800457c:	e054      	b.n	8004628 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	089b      	lsrs	r3, r3, #2
 800458c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00e      	beq.n	80045b4 <osThreadNew+0xa8>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	2ba7      	cmp	r3, #167	; 0xa7
 800459c:	d90a      	bls.n	80045b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d006      	beq.n	80045b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <osThreadNew+0xa8>
        mem = 1;
 80045ae:	2301      	movs	r3, #1
 80045b0:	61bb      	str	r3, [r7, #24]
 80045b2:	e010      	b.n	80045d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10c      	bne.n	80045d6 <osThreadNew+0xca>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d108      	bne.n	80045d6 <osThreadNew+0xca>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d104      	bne.n	80045d6 <osThreadNew+0xca>
          mem = 0;
 80045cc:	2300      	movs	r3, #0
 80045ce:	61bb      	str	r3, [r7, #24]
 80045d0:	e001      	b.n	80045d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d110      	bne.n	80045fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045e4:	9202      	str	r2, [sp, #8]
 80045e6:	9301      	str	r3, [sp, #4]
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	6a3a      	ldr	r2, [r7, #32]
 80045f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 fe0c 	bl	8005210 <xTaskCreateStatic>
 80045f8:	4603      	mov	r3, r0
 80045fa:	613b      	str	r3, [r7, #16]
 80045fc:	e013      	b.n	8004626 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d110      	bne.n	8004626 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	b29a      	uxth	r2, r3
 8004608:	f107 0310 	add.w	r3, r7, #16
 800460c:	9301      	str	r3, [sp, #4]
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 fe57 	bl	80052ca <xTaskCreate>
 800461c:	4603      	mov	r3, r0
 800461e:	2b01      	cmp	r3, #1
 8004620:	d001      	beq.n	8004626 <osThreadNew+0x11a>
            hTask = NULL;
 8004622:	2300      	movs	r3, #0
 8004624:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004626:	693b      	ldr	r3, [r7, #16]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3728      	adds	r7, #40	; 0x28
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004638:	f3ef 8305 	mrs	r3, IPSR
 800463c:	60bb      	str	r3, [r7, #8]
  return(result);
 800463e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <osDelay+0x1c>
    stat = osErrorISR;
 8004644:	f06f 0305 	mvn.w	r3, #5
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	e007      	b.n	800465c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800464c:	2300      	movs	r3, #0
 800464e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d002      	beq.n	800465c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 ff92 	bl	8005580 <vTaskDelay>
    }
  }

  return (stat);
 800465c:	68fb      	ldr	r3, [r7, #12]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
	...

08004668 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4a07      	ldr	r2, [pc, #28]	; (8004694 <vApplicationGetIdleTaskMemory+0x2c>)
 8004678:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	4a06      	ldr	r2, [pc, #24]	; (8004698 <vApplicationGetIdleTaskMemory+0x30>)
 800467e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2280      	movs	r2, #128	; 0x80
 8004684:	601a      	str	r2, [r3, #0]
}
 8004686:	bf00      	nop
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	200005ac 	.word	0x200005ac
 8004698:	20000654 	.word	0x20000654

0800469c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4a07      	ldr	r2, [pc, #28]	; (80046c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80046ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	4a06      	ldr	r2, [pc, #24]	; (80046cc <vApplicationGetTimerTaskMemory+0x30>)
 80046b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046ba:	601a      	str	r2, [r3, #0]
}
 80046bc:	bf00      	nop
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	20000854 	.word	0x20000854
 80046cc:	200008fc 	.word	0x200008fc

080046d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f103 0208 	add.w	r2, r3, #8
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f103 0208 	add.w	r2, r3, #8
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f103 0208 	add.w	r2, r3, #8
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800472a:	b480      	push	{r7}
 800472c:	b085      	sub	sp, #20
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	1c5a      	adds	r2, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	601a      	str	r2, [r3, #0]
}
 8004766:	bf00      	nop
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004772:	b480      	push	{r7}
 8004774:	b085      	sub	sp, #20
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
 800477a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004788:	d103      	bne.n	8004792 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	e00c      	b.n	80047ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	3308      	adds	r3, #8
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	e002      	b.n	80047a0 <vListInsert+0x2e>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d2f6      	bcs.n	800479a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	601a      	str	r2, [r3, #0]
}
 80047d8:	bf00      	nop
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	6892      	ldr	r2, [r2, #8]
 80047fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6852      	ldr	r2, [r2, #4]
 8004804:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	429a      	cmp	r2, r3
 800480e:	d103      	bne.n	8004818 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	1e5a      	subs	r2, r3, #1
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10a      	bne.n	8004862 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800484c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004850:	f383 8811 	msr	BASEPRI, r3
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800485e:	bf00      	nop
 8004860:	e7fe      	b.n	8004860 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004862:	f002 f877 	bl	8006954 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486e:	68f9      	ldr	r1, [r7, #12]
 8004870:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004872:	fb01 f303 	mul.w	r3, r1, r3
 8004876:	441a      	add	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004892:	3b01      	subs	r3, #1
 8004894:	68f9      	ldr	r1, [r7, #12]
 8004896:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004898:	fb01 f303 	mul.w	r3, r1, r3
 800489c:	441a      	add	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	22ff      	movs	r2, #255	; 0xff
 80048a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	22ff      	movs	r2, #255	; 0xff
 80048ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d114      	bne.n	80048e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01a      	beq.n	80048f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	3310      	adds	r3, #16
 80048c4:	4618      	mov	r0, r3
 80048c6:	f001 f929 	bl	8005b1c <xTaskRemoveFromEventList>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d012      	beq.n	80048f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80048d0:	4b0c      	ldr	r3, [pc, #48]	; (8004904 <xQueueGenericReset+0xcc>)
 80048d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	e009      	b.n	80048f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3310      	adds	r3, #16
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff fef2 	bl	80046d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	3324      	adds	r3, #36	; 0x24
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7ff feed 	bl	80046d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80048f6:	f002 f85d 	bl	80069b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80048fa:	2301      	movs	r3, #1
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	e000ed04 	.word	0xe000ed04

08004908 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08e      	sub	sp, #56	; 0x38
 800490c:	af02      	add	r7, sp, #8
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10a      	bne.n	8004932 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800492e:	bf00      	nop
 8004930:	e7fe      	b.n	8004930 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10a      	bne.n	800494e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493c:	f383 8811 	msr	BASEPRI, r3
 8004940:	f3bf 8f6f 	isb	sy
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
}
 800494a:	bf00      	nop
 800494c:	e7fe      	b.n	800494c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <xQueueGenericCreateStatic+0x52>
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <xQueueGenericCreateStatic+0x56>
 800495a:	2301      	movs	r3, #1
 800495c:	e000      	b.n	8004960 <xQueueGenericCreateStatic+0x58>
 800495e:	2300      	movs	r3, #0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10a      	bne.n	800497a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004968:	f383 8811 	msr	BASEPRI, r3
 800496c:	f3bf 8f6f 	isb	sy
 8004970:	f3bf 8f4f 	dsb	sy
 8004974:	623b      	str	r3, [r7, #32]
}
 8004976:	bf00      	nop
 8004978:	e7fe      	b.n	8004978 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d102      	bne.n	8004986 <xQueueGenericCreateStatic+0x7e>
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <xQueueGenericCreateStatic+0x82>
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <xQueueGenericCreateStatic+0x84>
 800498a:	2300      	movs	r3, #0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10a      	bne.n	80049a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	61fb      	str	r3, [r7, #28]
}
 80049a2:	bf00      	nop
 80049a4:	e7fe      	b.n	80049a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80049a6:	2350      	movs	r3, #80	; 0x50
 80049a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2b50      	cmp	r3, #80	; 0x50
 80049ae:	d00a      	beq.n	80049c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	61bb      	str	r3, [r7, #24]
}
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80049c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80049cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00d      	beq.n	80049ee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80049d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80049de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	4613      	mov	r3, r2
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	68b9      	ldr	r1, [r7, #8]
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f000 f805 	bl	80049f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3730      	adds	r7, #48	; 0x30
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d103      	bne.n	8004a14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	e002      	b.n	8004a1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a26:	2101      	movs	r1, #1
 8004a28:	69b8      	ldr	r0, [r7, #24]
 8004a2a:	f7ff ff05 	bl	8004838 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	78fa      	ldrb	r2, [r7, #3]
 8004a32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a36:	bf00      	nop
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08e      	sub	sp, #56	; 0x38
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
 8004a4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10a      	bne.n	8004a72 <xQueueGenericSend+0x32>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a6e:	bf00      	nop
 8004a70:	e7fe      	b.n	8004a70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d103      	bne.n	8004a80 <xQueueGenericSend+0x40>
 8004a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <xQueueGenericSend+0x44>
 8004a80:	2301      	movs	r3, #1
 8004a82:	e000      	b.n	8004a86 <xQueueGenericSend+0x46>
 8004a84:	2300      	movs	r3, #0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10a      	bne.n	8004aa0 <xQueueGenericSend+0x60>
	__asm volatile
 8004a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a9c:	bf00      	nop
 8004a9e:	e7fe      	b.n	8004a9e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d103      	bne.n	8004aae <xQueueGenericSend+0x6e>
 8004aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d101      	bne.n	8004ab2 <xQueueGenericSend+0x72>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e000      	b.n	8004ab4 <xQueueGenericSend+0x74>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10a      	bne.n	8004ace <xQueueGenericSend+0x8e>
	__asm volatile
 8004ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	623b      	str	r3, [r7, #32]
}
 8004aca:	bf00      	nop
 8004acc:	e7fe      	b.n	8004acc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ace:	f001 f9e7 	bl	8005ea0 <xTaskGetSchedulerState>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d102      	bne.n	8004ade <xQueueGenericSend+0x9e>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <xQueueGenericSend+0xa2>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <xQueueGenericSend+0xa4>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10a      	bne.n	8004afe <xQueueGenericSend+0xbe>
	__asm volatile
 8004ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aec:	f383 8811 	msr	BASEPRI, r3
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	61fb      	str	r3, [r7, #28]
}
 8004afa:	bf00      	nop
 8004afc:	e7fe      	b.n	8004afc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004afe:	f001 ff29 	bl	8006954 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d302      	bcc.n	8004b14 <xQueueGenericSend+0xd4>
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d129      	bne.n	8004b68 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	68b9      	ldr	r1, [r7, #8]
 8004b18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b1a:	f000 fa0b 	bl	8004f34 <prvCopyDataToQueue>
 8004b1e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d010      	beq.n	8004b4a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2a:	3324      	adds	r3, #36	; 0x24
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f000 fff5 	bl	8005b1c <xTaskRemoveFromEventList>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d013      	beq.n	8004b60 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b38:	4b3f      	ldr	r3, [pc, #252]	; (8004c38 <xQueueGenericSend+0x1f8>)
 8004b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	e00a      	b.n	8004b60 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d007      	beq.n	8004b60 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b50:	4b39      	ldr	r3, [pc, #228]	; (8004c38 <xQueueGenericSend+0x1f8>)
 8004b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b60:	f001 ff28 	bl	80069b4 <vPortExitCritical>
				return pdPASS;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e063      	b.n	8004c30 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d103      	bne.n	8004b76 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b6e:	f001 ff21 	bl	80069b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b72:	2300      	movs	r3, #0
 8004b74:	e05c      	b.n	8004c30 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d106      	bne.n	8004b8a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b7c:	f107 0314 	add.w	r3, r7, #20
 8004b80:	4618      	mov	r0, r3
 8004b82:	f001 f82f 	bl	8005be4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b86:	2301      	movs	r3, #1
 8004b88:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b8a:	f001 ff13 	bl	80069b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b8e:	f000 fd9b 	bl	80056c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b92:	f001 fedf 	bl	8006954 <vPortEnterCritical>
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b9c:	b25b      	sxtb	r3, r3
 8004b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ba2:	d103      	bne.n	8004bac <xQueueGenericSend+0x16c>
 8004ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bb2:	b25b      	sxtb	r3, r3
 8004bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bb8:	d103      	bne.n	8004bc2 <xQueueGenericSend+0x182>
 8004bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bc2:	f001 fef7 	bl	80069b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bc6:	1d3a      	adds	r2, r7, #4
 8004bc8:	f107 0314 	add.w	r3, r7, #20
 8004bcc:	4611      	mov	r1, r2
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f001 f81e 	bl	8005c10 <xTaskCheckForTimeOut>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d124      	bne.n	8004c24 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004bda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bdc:	f000 faa2 	bl	8005124 <prvIsQueueFull>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d018      	beq.n	8004c18 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be8:	3310      	adds	r3, #16
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	4611      	mov	r1, r2
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 ff44 	bl	8005a7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004bf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bf6:	f000 fa2d 	bl	8005054 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004bfa:	f000 fd73 	bl	80056e4 <xTaskResumeAll>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f47f af7c 	bne.w	8004afe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004c06:	4b0c      	ldr	r3, [pc, #48]	; (8004c38 <xQueueGenericSend+0x1f8>)
 8004c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	e772      	b.n	8004afe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c1a:	f000 fa1b 	bl	8005054 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c1e:	f000 fd61 	bl	80056e4 <xTaskResumeAll>
 8004c22:	e76c      	b.n	8004afe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c26:	f000 fa15 	bl	8005054 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c2a:	f000 fd5b 	bl	80056e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3738      	adds	r7, #56	; 0x38
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	e000ed04 	.word	0xe000ed04

08004c3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b090      	sub	sp, #64	; 0x40
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10a      	bne.n	8004c6a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c66:	bf00      	nop
 8004c68:	e7fe      	b.n	8004c68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d103      	bne.n	8004c78 <xQueueGenericSendFromISR+0x3c>
 8004c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <xQueueGenericSendFromISR+0x40>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e000      	b.n	8004c7e <xQueueGenericSendFromISR+0x42>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10a      	bne.n	8004c98 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c94:	bf00      	nop
 8004c96:	e7fe      	b.n	8004c96 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d103      	bne.n	8004ca6 <xQueueGenericSendFromISR+0x6a>
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d101      	bne.n	8004caa <xQueueGenericSendFromISR+0x6e>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e000      	b.n	8004cac <xQueueGenericSendFromISR+0x70>
 8004caa:	2300      	movs	r3, #0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10a      	bne.n	8004cc6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	623b      	str	r3, [r7, #32]
}
 8004cc2:	bf00      	nop
 8004cc4:	e7fe      	b.n	8004cc4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004cc6:	f001 ff27 	bl	8006b18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004cca:	f3ef 8211 	mrs	r2, BASEPRI
 8004cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	61fa      	str	r2, [r7, #28]
 8004ce0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ce2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ce4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d302      	bcc.n	8004cf8 <xQueueGenericSendFromISR+0xbc>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d12f      	bne.n	8004d58 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d06:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	68b9      	ldr	r1, [r7, #8]
 8004d0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004d0e:	f000 f911 	bl	8004f34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d12:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004d16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d1a:	d112      	bne.n	8004d42 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d016      	beq.n	8004d52 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d26:	3324      	adds	r3, #36	; 0x24
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fef7 	bl	8005b1c <xTaskRemoveFromEventList>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00e      	beq.n	8004d52 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00b      	beq.n	8004d52 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	e007      	b.n	8004d52 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d46:	3301      	adds	r3, #1
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	b25a      	sxtb	r2, r3
 8004d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004d52:	2301      	movs	r3, #1
 8004d54:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004d56:	e001      	b.n	8004d5c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d66:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3740      	adds	r7, #64	; 0x40
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
	...

08004d74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b08c      	sub	sp, #48	; 0x30
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d80:	2300      	movs	r3, #0
 8004d82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10a      	bne.n	8004da4 <xQueueReceive+0x30>
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	623b      	str	r3, [r7, #32]
}
 8004da0:	bf00      	nop
 8004da2:	e7fe      	b.n	8004da2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d103      	bne.n	8004db2 <xQueueReceive+0x3e>
 8004daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <xQueueReceive+0x42>
 8004db2:	2301      	movs	r3, #1
 8004db4:	e000      	b.n	8004db8 <xQueueReceive+0x44>
 8004db6:	2300      	movs	r3, #0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10a      	bne.n	8004dd2 <xQueueReceive+0x5e>
	__asm volatile
 8004dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	61fb      	str	r3, [r7, #28]
}
 8004dce:	bf00      	nop
 8004dd0:	e7fe      	b.n	8004dd0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dd2:	f001 f865 	bl	8005ea0 <xTaskGetSchedulerState>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d102      	bne.n	8004de2 <xQueueReceive+0x6e>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <xQueueReceive+0x72>
 8004de2:	2301      	movs	r3, #1
 8004de4:	e000      	b.n	8004de8 <xQueueReceive+0x74>
 8004de6:	2300      	movs	r3, #0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10a      	bne.n	8004e02 <xQueueReceive+0x8e>
	__asm volatile
 8004dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df0:	f383 8811 	msr	BASEPRI, r3
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	61bb      	str	r3, [r7, #24]
}
 8004dfe:	bf00      	nop
 8004e00:	e7fe      	b.n	8004e00 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e02:	f001 fda7 	bl	8006954 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d01f      	beq.n	8004e52 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e12:	68b9      	ldr	r1, [r7, #8]
 8004e14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e16:	f000 f8f7 	bl	8005008 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	1e5a      	subs	r2, r3, #1
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e20:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00f      	beq.n	8004e4a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2c:	3310      	adds	r3, #16
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 fe74 	bl	8005b1c <xTaskRemoveFromEventList>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d007      	beq.n	8004e4a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e3a:	4b3d      	ldr	r3, [pc, #244]	; (8004f30 <xQueueReceive+0x1bc>)
 8004e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	f3bf 8f4f 	dsb	sy
 8004e46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e4a:	f001 fdb3 	bl	80069b4 <vPortExitCritical>
				return pdPASS;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e069      	b.n	8004f26 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d103      	bne.n	8004e60 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e58:	f001 fdac 	bl	80069b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	e062      	b.n	8004f26 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e66:	f107 0310 	add.w	r3, r7, #16
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 feba 	bl	8005be4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e70:	2301      	movs	r3, #1
 8004e72:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e74:	f001 fd9e 	bl	80069b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e78:	f000 fc26 	bl	80056c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e7c:	f001 fd6a 	bl	8006954 <vPortEnterCritical>
 8004e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e86:	b25b      	sxtb	r3, r3
 8004e88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e8c:	d103      	bne.n	8004e96 <xQueueReceive+0x122>
 8004e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e9c:	b25b      	sxtb	r3, r3
 8004e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ea2:	d103      	bne.n	8004eac <xQueueReceive+0x138>
 8004ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eac:	f001 fd82 	bl	80069b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004eb0:	1d3a      	adds	r2, r7, #4
 8004eb2:	f107 0310 	add.w	r3, r7, #16
 8004eb6:	4611      	mov	r1, r2
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 fea9 	bl	8005c10 <xTaskCheckForTimeOut>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d123      	bne.n	8004f0c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ec6:	f000 f917 	bl	80050f8 <prvIsQueueEmpty>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d017      	beq.n	8004f00 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed2:	3324      	adds	r3, #36	; 0x24
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 fdcf 	bl	8005a7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ee0:	f000 f8b8 	bl	8005054 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ee4:	f000 fbfe 	bl	80056e4 <xTaskResumeAll>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d189      	bne.n	8004e02 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004eee:	4b10      	ldr	r3, [pc, #64]	; (8004f30 <xQueueReceive+0x1bc>)
 8004ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	e780      	b.n	8004e02 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f02:	f000 f8a7 	bl	8005054 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f06:	f000 fbed 	bl	80056e4 <xTaskResumeAll>
 8004f0a:	e77a      	b.n	8004e02 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f0e:	f000 f8a1 	bl	8005054 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f12:	f000 fbe7 	bl	80056e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f18:	f000 f8ee 	bl	80050f8 <prvIsQueueEmpty>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f43f af6f 	beq.w	8004e02 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3730      	adds	r7, #48	; 0x30
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	e000ed04 	.word	0xe000ed04

08004f34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f40:	2300      	movs	r3, #0
 8004f42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10d      	bne.n	8004f6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d14d      	bne.n	8004ff6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 ffbc 	bl	8005edc <xTaskPriorityDisinherit>
 8004f64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	609a      	str	r2, [r3, #8]
 8004f6c:	e043      	b.n	8004ff6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d119      	bne.n	8004fa8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6858      	ldr	r0, [r3, #4]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	68b9      	ldr	r1, [r7, #8]
 8004f80:	f002 f8d2 	bl	8007128 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8c:	441a      	add	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d32b      	bcc.n	8004ff6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	605a      	str	r2, [r3, #4]
 8004fa6:	e026      	b.n	8004ff6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	68d8      	ldr	r0, [r3, #12]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	68b9      	ldr	r1, [r7, #8]
 8004fb4:	f002 f8b8 	bl	8007128 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc0:	425b      	negs	r3, r3
 8004fc2:	441a      	add	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	68da      	ldr	r2, [r3, #12]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d207      	bcs.n	8004fe4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	425b      	negs	r3, r3
 8004fde:	441a      	add	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d105      	bne.n	8004ff6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d002      	beq.n	8004ff6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004ffe:	697b      	ldr	r3, [r7, #20]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	2b00      	cmp	r3, #0
 8005018:	d018      	beq.n	800504c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	441a      	add	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	429a      	cmp	r2, r3
 8005032:	d303      	bcc.n	800503c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68d9      	ldr	r1, [r3, #12]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	461a      	mov	r2, r3
 8005046:	6838      	ldr	r0, [r7, #0]
 8005048:	f002 f86e 	bl	8007128 <memcpy>
	}
}
 800504c:	bf00      	nop
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800505c:	f001 fc7a 	bl	8006954 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005066:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005068:	e011      	b.n	800508e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	2b00      	cmp	r3, #0
 8005070:	d012      	beq.n	8005098 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3324      	adds	r3, #36	; 0x24
 8005076:	4618      	mov	r0, r3
 8005078:	f000 fd50 	bl	8005b1c <xTaskRemoveFromEventList>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005082:	f000 fe27 	bl	8005cd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005086:	7bfb      	ldrb	r3, [r7, #15]
 8005088:	3b01      	subs	r3, #1
 800508a:	b2db      	uxtb	r3, r3
 800508c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800508e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005092:	2b00      	cmp	r3, #0
 8005094:	dce9      	bgt.n	800506a <prvUnlockQueue+0x16>
 8005096:	e000      	b.n	800509a <prvUnlockQueue+0x46>
					break;
 8005098:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	22ff      	movs	r2, #255	; 0xff
 800509e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80050a2:	f001 fc87 	bl	80069b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80050a6:	f001 fc55 	bl	8006954 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050b2:	e011      	b.n	80050d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d012      	beq.n	80050e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3310      	adds	r3, #16
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 fd2b 	bl	8005b1c <xTaskRemoveFromEventList>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d001      	beq.n	80050d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80050cc:	f000 fe02 	bl	8005cd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80050d0:	7bbb      	ldrb	r3, [r7, #14]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	dce9      	bgt.n	80050b4 <prvUnlockQueue+0x60>
 80050e0:	e000      	b.n	80050e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80050e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	22ff      	movs	r2, #255	; 0xff
 80050e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80050ec:	f001 fc62 	bl	80069b4 <vPortExitCritical>
}
 80050f0:	bf00      	nop
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005100:	f001 fc28 	bl	8006954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005108:	2b00      	cmp	r3, #0
 800510a:	d102      	bne.n	8005112 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800510c:	2301      	movs	r3, #1
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	e001      	b.n	8005116 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005112:	2300      	movs	r3, #0
 8005114:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005116:	f001 fc4d 	bl	80069b4 <vPortExitCritical>

	return xReturn;
 800511a:	68fb      	ldr	r3, [r7, #12]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800512c:	f001 fc12 	bl	8006954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005138:	429a      	cmp	r2, r3
 800513a:	d102      	bne.n	8005142 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800513c:	2301      	movs	r3, #1
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	e001      	b.n	8005146 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005142:	2300      	movs	r3, #0
 8005144:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005146:	f001 fc35 	bl	80069b4 <vPortExitCritical>

	return xReturn;
 800514a:	68fb      	ldr	r3, [r7, #12]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800515e:	2300      	movs	r3, #0
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	e014      	b.n	800518e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005164:	4a0f      	ldr	r2, [pc, #60]	; (80051a4 <vQueueAddToRegistry+0x50>)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10b      	bne.n	8005188 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005170:	490c      	ldr	r1, [pc, #48]	; (80051a4 <vQueueAddToRegistry+0x50>)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800517a:	4a0a      	ldr	r2, [pc, #40]	; (80051a4 <vQueueAddToRegistry+0x50>)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	4413      	add	r3, r2
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005186:	e006      	b.n	8005196 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	3301      	adds	r3, #1
 800518c:	60fb      	str	r3, [r7, #12]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b07      	cmp	r3, #7
 8005192:	d9e7      	bls.n	8005164 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005194:	bf00      	nop
 8005196:	bf00      	nop
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	20000cfc 	.word	0x20000cfc

080051a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80051b8:	f001 fbcc 	bl	8006954 <vPortEnterCritical>
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051c2:	b25b      	sxtb	r3, r3
 80051c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051c8:	d103      	bne.n	80051d2 <vQueueWaitForMessageRestricted+0x2a>
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051d8:	b25b      	sxtb	r3, r3
 80051da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051de:	d103      	bne.n	80051e8 <vQueueWaitForMessageRestricted+0x40>
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051e8:	f001 fbe4 	bl	80069b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d106      	bne.n	8005202 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	3324      	adds	r3, #36	; 0x24
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	68b9      	ldr	r1, [r7, #8]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 fc61 	bl	8005ac4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005202:	6978      	ldr	r0, [r7, #20]
 8005204:	f7ff ff26 	bl	8005054 <prvUnlockQueue>
	}
 8005208:	bf00      	nop
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08e      	sub	sp, #56	; 0x38
 8005214:	af04      	add	r7, sp, #16
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
 800521c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800521e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10a      	bne.n	800523a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	623b      	str	r3, [r7, #32]
}
 8005236:	bf00      	nop
 8005238:	e7fe      	b.n	8005238 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800523a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10a      	bne.n	8005256 <xTaskCreateStatic+0x46>
	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	61fb      	str	r3, [r7, #28]
}
 8005252:	bf00      	nop
 8005254:	e7fe      	b.n	8005254 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005256:	23a8      	movs	r3, #168	; 0xa8
 8005258:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	2ba8      	cmp	r3, #168	; 0xa8
 800525e:	d00a      	beq.n	8005276 <xTaskCreateStatic+0x66>
	__asm volatile
 8005260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	61bb      	str	r3, [r7, #24]
}
 8005272:	bf00      	nop
 8005274:	e7fe      	b.n	8005274 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005276:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527a:	2b00      	cmp	r3, #0
 800527c:	d01e      	beq.n	80052bc <xTaskCreateStatic+0xac>
 800527e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005280:	2b00      	cmp	r3, #0
 8005282:	d01b      	beq.n	80052bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800528c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	2202      	movs	r2, #2
 8005292:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005296:	2300      	movs	r3, #0
 8005298:	9303      	str	r3, [sp, #12]
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	9302      	str	r3, [sp, #8]
 800529e:	f107 0314 	add.w	r3, r7, #20
 80052a2:	9301      	str	r3, [sp, #4]
 80052a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	68b9      	ldr	r1, [r7, #8]
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 f850 	bl	8005354 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052b6:	f000 f8f3 	bl	80054a0 <prvAddNewTaskToReadyList>
 80052ba:	e001      	b.n	80052c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80052bc:	2300      	movs	r3, #0
 80052be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80052c0:	697b      	ldr	r3, [r7, #20]
	}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3728      	adds	r7, #40	; 0x28
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b08c      	sub	sp, #48	; 0x30
 80052ce:	af04      	add	r7, sp, #16
 80052d0:	60f8      	str	r0, [r7, #12]
 80052d2:	60b9      	str	r1, [r7, #8]
 80052d4:	603b      	str	r3, [r7, #0]
 80052d6:	4613      	mov	r3, r2
 80052d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80052da:	88fb      	ldrh	r3, [r7, #6]
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4618      	mov	r0, r3
 80052e0:	f001 fc5a 	bl	8006b98 <pvPortMalloc>
 80052e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00e      	beq.n	800530a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052ec:	20a8      	movs	r0, #168	; 0xa8
 80052ee:	f001 fc53 	bl	8006b98 <pvPortMalloc>
 80052f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	631a      	str	r2, [r3, #48]	; 0x30
 8005300:	e005      	b.n	800530e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005302:	6978      	ldr	r0, [r7, #20]
 8005304:	f001 fd14 	bl	8006d30 <vPortFree>
 8005308:	e001      	b.n	800530e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800530a:	2300      	movs	r3, #0
 800530c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d017      	beq.n	8005344 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800531c:	88fa      	ldrh	r2, [r7, #6]
 800531e:	2300      	movs	r3, #0
 8005320:	9303      	str	r3, [sp, #12]
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	9302      	str	r3, [sp, #8]
 8005326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005328:	9301      	str	r3, [sp, #4]
 800532a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68b9      	ldr	r1, [r7, #8]
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 f80e 	bl	8005354 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005338:	69f8      	ldr	r0, [r7, #28]
 800533a:	f000 f8b1 	bl	80054a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800533e:	2301      	movs	r3, #1
 8005340:	61bb      	str	r3, [r7, #24]
 8005342:	e002      	b.n	800534a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005344:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005348:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800534a:	69bb      	ldr	r3, [r7, #24]
	}
 800534c:	4618      	mov	r0, r3
 800534e:	3720      	adds	r7, #32
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b088      	sub	sp, #32
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005364:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	461a      	mov	r2, r3
 800536c:	21a5      	movs	r1, #165	; 0xa5
 800536e:	f001 fe51 	bl	8007014 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800537c:	3b01      	subs	r3, #1
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	f023 0307 	bic.w	r3, r3, #7
 800538a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <prvInitialiseNewTask+0x58>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	617b      	str	r3, [r7, #20]
}
 80053a8:	bf00      	nop
 80053aa:	e7fe      	b.n	80053aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d01f      	beq.n	80053f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053b2:	2300      	movs	r3, #0
 80053b4:	61fb      	str	r3, [r7, #28]
 80053b6:	e012      	b.n	80053de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	4413      	add	r3, r2
 80053be:	7819      	ldrb	r1, [r3, #0]
 80053c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	4413      	add	r3, r2
 80053c6:	3334      	adds	r3, #52	; 0x34
 80053c8:	460a      	mov	r2, r1
 80053ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	4413      	add	r3, r2
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d006      	beq.n	80053e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	3301      	adds	r3, #1
 80053dc:	61fb      	str	r3, [r7, #28]
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	2b0f      	cmp	r3, #15
 80053e2:	d9e9      	bls.n	80053b8 <prvInitialiseNewTask+0x64>
 80053e4:	e000      	b.n	80053e8 <prvInitialiseNewTask+0x94>
			{
				break;
 80053e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053f0:	e003      	b.n	80053fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fc:	2b37      	cmp	r3, #55	; 0x37
 80053fe:	d901      	bls.n	8005404 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005400:	2337      	movs	r3, #55	; 0x37
 8005402:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005408:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800540e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	2200      	movs	r2, #0
 8005414:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005418:	3304      	adds	r3, #4
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff f978 	bl	8004710 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005422:	3318      	adds	r3, #24
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff f973 	bl	8004710 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800542e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005432:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005438:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800543a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800543e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005442:	2200      	movs	r2, #0
 8005444:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544a:	2200      	movs	r2, #0
 800544c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005452:	3354      	adds	r3, #84	; 0x54
 8005454:	224c      	movs	r2, #76	; 0x4c
 8005456:	2100      	movs	r1, #0
 8005458:	4618      	mov	r0, r3
 800545a:	f001 fddb 	bl	8007014 <memset>
 800545e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005460:	4a0c      	ldr	r2, [pc, #48]	; (8005494 <prvInitialiseNewTask+0x140>)
 8005462:	659a      	str	r2, [r3, #88]	; 0x58
 8005464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005466:	4a0c      	ldr	r2, [pc, #48]	; (8005498 <prvInitialiseNewTask+0x144>)
 8005468:	65da      	str	r2, [r3, #92]	; 0x5c
 800546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546c:	4a0b      	ldr	r2, [pc, #44]	; (800549c <prvInitialiseNewTask+0x148>)
 800546e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	68f9      	ldr	r1, [r7, #12]
 8005474:	69b8      	ldr	r0, [r7, #24]
 8005476:	f001 f941 	bl	80066fc <pxPortInitialiseStack>
 800547a:	4602      	mov	r2, r0
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005482:	2b00      	cmp	r3, #0
 8005484:	d002      	beq.n	800548c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800548a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800548c:	bf00      	nop
 800548e:	3720      	adds	r7, #32
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	20004f90 	.word	0x20004f90
 8005498:	20004ff8 	.word	0x20004ff8
 800549c:	20005060 	.word	0x20005060

080054a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054a8:	f001 fa54 	bl	8006954 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80054ac:	4b2d      	ldr	r3, [pc, #180]	; (8005564 <prvAddNewTaskToReadyList+0xc4>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3301      	adds	r3, #1
 80054b2:	4a2c      	ldr	r2, [pc, #176]	; (8005564 <prvAddNewTaskToReadyList+0xc4>)
 80054b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80054b6:	4b2c      	ldr	r3, [pc, #176]	; (8005568 <prvAddNewTaskToReadyList+0xc8>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d109      	bne.n	80054d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80054be:	4a2a      	ldr	r2, [pc, #168]	; (8005568 <prvAddNewTaskToReadyList+0xc8>)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054c4:	4b27      	ldr	r3, [pc, #156]	; (8005564 <prvAddNewTaskToReadyList+0xc4>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d110      	bne.n	80054ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80054cc:	f000 fc26 	bl	8005d1c <prvInitialiseTaskLists>
 80054d0:	e00d      	b.n	80054ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80054d2:	4b26      	ldr	r3, [pc, #152]	; (800556c <prvAddNewTaskToReadyList+0xcc>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d109      	bne.n	80054ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054da:	4b23      	ldr	r3, [pc, #140]	; (8005568 <prvAddNewTaskToReadyList+0xc8>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d802      	bhi.n	80054ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054e8:	4a1f      	ldr	r2, [pc, #124]	; (8005568 <prvAddNewTaskToReadyList+0xc8>)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054ee:	4b20      	ldr	r3, [pc, #128]	; (8005570 <prvAddNewTaskToReadyList+0xd0>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	3301      	adds	r3, #1
 80054f4:	4a1e      	ldr	r2, [pc, #120]	; (8005570 <prvAddNewTaskToReadyList+0xd0>)
 80054f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80054f8:	4b1d      	ldr	r3, [pc, #116]	; (8005570 <prvAddNewTaskToReadyList+0xd0>)
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005504:	4b1b      	ldr	r3, [pc, #108]	; (8005574 <prvAddNewTaskToReadyList+0xd4>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	429a      	cmp	r2, r3
 800550a:	d903      	bls.n	8005514 <prvAddNewTaskToReadyList+0x74>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005510:	4a18      	ldr	r2, [pc, #96]	; (8005574 <prvAddNewTaskToReadyList+0xd4>)
 8005512:	6013      	str	r3, [r2, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005518:	4613      	mov	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4a15      	ldr	r2, [pc, #84]	; (8005578 <prvAddNewTaskToReadyList+0xd8>)
 8005522:	441a      	add	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3304      	adds	r3, #4
 8005528:	4619      	mov	r1, r3
 800552a:	4610      	mov	r0, r2
 800552c:	f7ff f8fd 	bl	800472a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005530:	f001 fa40 	bl	80069b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005534:	4b0d      	ldr	r3, [pc, #52]	; (800556c <prvAddNewTaskToReadyList+0xcc>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00e      	beq.n	800555a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800553c:	4b0a      	ldr	r3, [pc, #40]	; (8005568 <prvAddNewTaskToReadyList+0xc8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005546:	429a      	cmp	r2, r3
 8005548:	d207      	bcs.n	800555a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800554a:	4b0c      	ldr	r3, [pc, #48]	; (800557c <prvAddNewTaskToReadyList+0xdc>)
 800554c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800555a:	bf00      	nop
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	20001210 	.word	0x20001210
 8005568:	20000d3c 	.word	0x20000d3c
 800556c:	2000121c 	.word	0x2000121c
 8005570:	2000122c 	.word	0x2000122c
 8005574:	20001218 	.word	0x20001218
 8005578:	20000d40 	.word	0x20000d40
 800557c:	e000ed04 	.word	0xe000ed04

08005580 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005588:	2300      	movs	r3, #0
 800558a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d017      	beq.n	80055c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005592:	4b13      	ldr	r3, [pc, #76]	; (80055e0 <vTaskDelay+0x60>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00a      	beq.n	80055b0 <vTaskDelay+0x30>
	__asm volatile
 800559a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559e:	f383 8811 	msr	BASEPRI, r3
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	60bb      	str	r3, [r7, #8]
}
 80055ac:	bf00      	nop
 80055ae:	e7fe      	b.n	80055ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80055b0:	f000 f88a 	bl	80056c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80055b4:	2100      	movs	r1, #0
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fcfe 	bl	8005fb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80055bc:	f000 f892 	bl	80056e4 <xTaskResumeAll>
 80055c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d107      	bne.n	80055d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80055c8:	4b06      	ldr	r3, [pc, #24]	; (80055e4 <vTaskDelay+0x64>)
 80055ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055d8:	bf00      	nop
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	20001238 	.word	0x20001238
 80055e4:	e000ed04 	.word	0xe000ed04

080055e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08a      	sub	sp, #40	; 0x28
 80055ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80055ee:	2300      	movs	r3, #0
 80055f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80055f2:	2300      	movs	r3, #0
 80055f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80055f6:	463a      	mov	r2, r7
 80055f8:	1d39      	adds	r1, r7, #4
 80055fa:	f107 0308 	add.w	r3, r7, #8
 80055fe:	4618      	mov	r0, r3
 8005600:	f7ff f832 	bl	8004668 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005604:	6839      	ldr	r1, [r7, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	9202      	str	r2, [sp, #8]
 800560c:	9301      	str	r3, [sp, #4]
 800560e:	2300      	movs	r3, #0
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	2300      	movs	r3, #0
 8005614:	460a      	mov	r2, r1
 8005616:	4924      	ldr	r1, [pc, #144]	; (80056a8 <vTaskStartScheduler+0xc0>)
 8005618:	4824      	ldr	r0, [pc, #144]	; (80056ac <vTaskStartScheduler+0xc4>)
 800561a:	f7ff fdf9 	bl	8005210 <xTaskCreateStatic>
 800561e:	4603      	mov	r3, r0
 8005620:	4a23      	ldr	r2, [pc, #140]	; (80056b0 <vTaskStartScheduler+0xc8>)
 8005622:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005624:	4b22      	ldr	r3, [pc, #136]	; (80056b0 <vTaskStartScheduler+0xc8>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800562c:	2301      	movs	r3, #1
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	e001      	b.n	8005636 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005632:	2300      	movs	r3, #0
 8005634:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d102      	bne.n	8005642 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800563c:	f000 fd10 	bl	8006060 <xTimerCreateTimerTask>
 8005640:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d11b      	bne.n	8005680 <vTaskStartScheduler+0x98>
	__asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	613b      	str	r3, [r7, #16]
}
 800565a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800565c:	4b15      	ldr	r3, [pc, #84]	; (80056b4 <vTaskStartScheduler+0xcc>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3354      	adds	r3, #84	; 0x54
 8005662:	4a15      	ldr	r2, [pc, #84]	; (80056b8 <vTaskStartScheduler+0xd0>)
 8005664:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005666:	4b15      	ldr	r3, [pc, #84]	; (80056bc <vTaskStartScheduler+0xd4>)
 8005668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800566c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800566e:	4b14      	ldr	r3, [pc, #80]	; (80056c0 <vTaskStartScheduler+0xd8>)
 8005670:	2201      	movs	r2, #1
 8005672:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005674:	4b13      	ldr	r3, [pc, #76]	; (80056c4 <vTaskStartScheduler+0xdc>)
 8005676:	2200      	movs	r2, #0
 8005678:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800567a:	f001 f8c9 	bl	8006810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800567e:	e00e      	b.n	800569e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005686:	d10a      	bne.n	800569e <vTaskStartScheduler+0xb6>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	60fb      	str	r3, [r7, #12]
}
 800569a:	bf00      	nop
 800569c:	e7fe      	b.n	800569c <vTaskStartScheduler+0xb4>
}
 800569e:	bf00      	nop
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	08007a2c 	.word	0x08007a2c
 80056ac:	08005ced 	.word	0x08005ced
 80056b0:	20001234 	.word	0x20001234
 80056b4:	20000d3c 	.word	0x20000d3c
 80056b8:	20000070 	.word	0x20000070
 80056bc:	20001230 	.word	0x20001230
 80056c0:	2000121c 	.word	0x2000121c
 80056c4:	20001214 	.word	0x20001214

080056c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80056c8:	b480      	push	{r7}
 80056ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80056cc:	4b04      	ldr	r3, [pc, #16]	; (80056e0 <vTaskSuspendAll+0x18>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3301      	adds	r3, #1
 80056d2:	4a03      	ldr	r2, [pc, #12]	; (80056e0 <vTaskSuspendAll+0x18>)
 80056d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80056d6:	bf00      	nop
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	20001238 	.word	0x20001238

080056e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80056f2:	4b42      	ldr	r3, [pc, #264]	; (80057fc <xTaskResumeAll+0x118>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10a      	bne.n	8005710 <xTaskResumeAll+0x2c>
	__asm volatile
 80056fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	603b      	str	r3, [r7, #0]
}
 800570c:	bf00      	nop
 800570e:	e7fe      	b.n	800570e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005710:	f001 f920 	bl	8006954 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005714:	4b39      	ldr	r3, [pc, #228]	; (80057fc <xTaskResumeAll+0x118>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3b01      	subs	r3, #1
 800571a:	4a38      	ldr	r2, [pc, #224]	; (80057fc <xTaskResumeAll+0x118>)
 800571c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800571e:	4b37      	ldr	r3, [pc, #220]	; (80057fc <xTaskResumeAll+0x118>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d162      	bne.n	80057ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005726:	4b36      	ldr	r3, [pc, #216]	; (8005800 <xTaskResumeAll+0x11c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d05e      	beq.n	80057ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800572e:	e02f      	b.n	8005790 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005730:	4b34      	ldr	r3, [pc, #208]	; (8005804 <xTaskResumeAll+0x120>)
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	3318      	adds	r3, #24
 800573c:	4618      	mov	r0, r3
 800573e:	f7ff f851 	bl	80047e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	3304      	adds	r3, #4
 8005746:	4618      	mov	r0, r3
 8005748:	f7ff f84c 	bl	80047e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005750:	4b2d      	ldr	r3, [pc, #180]	; (8005808 <xTaskResumeAll+0x124>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	429a      	cmp	r2, r3
 8005756:	d903      	bls.n	8005760 <xTaskResumeAll+0x7c>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	4a2a      	ldr	r2, [pc, #168]	; (8005808 <xTaskResumeAll+0x124>)
 800575e:	6013      	str	r3, [r2, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005764:	4613      	mov	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4a27      	ldr	r2, [pc, #156]	; (800580c <xTaskResumeAll+0x128>)
 800576e:	441a      	add	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3304      	adds	r3, #4
 8005774:	4619      	mov	r1, r3
 8005776:	4610      	mov	r0, r2
 8005778:	f7fe ffd7 	bl	800472a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005780:	4b23      	ldr	r3, [pc, #140]	; (8005810 <xTaskResumeAll+0x12c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005786:	429a      	cmp	r2, r3
 8005788:	d302      	bcc.n	8005790 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800578a:	4b22      	ldr	r3, [pc, #136]	; (8005814 <xTaskResumeAll+0x130>)
 800578c:	2201      	movs	r2, #1
 800578e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005790:	4b1c      	ldr	r3, [pc, #112]	; (8005804 <xTaskResumeAll+0x120>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1cb      	bne.n	8005730 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800579e:	f000 fb5f 	bl	8005e60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80057a2:	4b1d      	ldr	r3, [pc, #116]	; (8005818 <xTaskResumeAll+0x134>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d010      	beq.n	80057d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80057ae:	f000 f847 	bl	8005840 <xTaskIncrementTick>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80057b8:	4b16      	ldr	r3, [pc, #88]	; (8005814 <xTaskResumeAll+0x130>)
 80057ba:	2201      	movs	r2, #1
 80057bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1f1      	bne.n	80057ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80057ca:	4b13      	ldr	r3, [pc, #76]	; (8005818 <xTaskResumeAll+0x134>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80057d0:	4b10      	ldr	r3, [pc, #64]	; (8005814 <xTaskResumeAll+0x130>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d009      	beq.n	80057ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80057d8:	2301      	movs	r3, #1
 80057da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80057dc:	4b0f      	ldr	r3, [pc, #60]	; (800581c <xTaskResumeAll+0x138>)
 80057de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057ec:	f001 f8e2 	bl	80069b4 <vPortExitCritical>

	return xAlreadyYielded;
 80057f0:	68bb      	ldr	r3, [r7, #8]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	20001238 	.word	0x20001238
 8005800:	20001210 	.word	0x20001210
 8005804:	200011d0 	.word	0x200011d0
 8005808:	20001218 	.word	0x20001218
 800580c:	20000d40 	.word	0x20000d40
 8005810:	20000d3c 	.word	0x20000d3c
 8005814:	20001224 	.word	0x20001224
 8005818:	20001220 	.word	0x20001220
 800581c:	e000ed04 	.word	0xe000ed04

08005820 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005826:	4b05      	ldr	r3, [pc, #20]	; (800583c <xTaskGetTickCount+0x1c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800582c:	687b      	ldr	r3, [r7, #4]
}
 800582e:	4618      	mov	r0, r3
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	20001214 	.word	0x20001214

08005840 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005846:	2300      	movs	r3, #0
 8005848:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800584a:	4b4f      	ldr	r3, [pc, #316]	; (8005988 <xTaskIncrementTick+0x148>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	f040 808f 	bne.w	8005972 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005854:	4b4d      	ldr	r3, [pc, #308]	; (800598c <xTaskIncrementTick+0x14c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3301      	adds	r3, #1
 800585a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800585c:	4a4b      	ldr	r2, [pc, #300]	; (800598c <xTaskIncrementTick+0x14c>)
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d120      	bne.n	80058aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005868:	4b49      	ldr	r3, [pc, #292]	; (8005990 <xTaskIncrementTick+0x150>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <xTaskIncrementTick+0x48>
	__asm volatile
 8005872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005876:	f383 8811 	msr	BASEPRI, r3
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	603b      	str	r3, [r7, #0]
}
 8005884:	bf00      	nop
 8005886:	e7fe      	b.n	8005886 <xTaskIncrementTick+0x46>
 8005888:	4b41      	ldr	r3, [pc, #260]	; (8005990 <xTaskIncrementTick+0x150>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	60fb      	str	r3, [r7, #12]
 800588e:	4b41      	ldr	r3, [pc, #260]	; (8005994 <xTaskIncrementTick+0x154>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a3f      	ldr	r2, [pc, #252]	; (8005990 <xTaskIncrementTick+0x150>)
 8005894:	6013      	str	r3, [r2, #0]
 8005896:	4a3f      	ldr	r2, [pc, #252]	; (8005994 <xTaskIncrementTick+0x154>)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6013      	str	r3, [r2, #0]
 800589c:	4b3e      	ldr	r3, [pc, #248]	; (8005998 <xTaskIncrementTick+0x158>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3301      	adds	r3, #1
 80058a2:	4a3d      	ldr	r2, [pc, #244]	; (8005998 <xTaskIncrementTick+0x158>)
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	f000 fadb 	bl	8005e60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80058aa:	4b3c      	ldr	r3, [pc, #240]	; (800599c <xTaskIncrementTick+0x15c>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d349      	bcc.n	8005948 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058b4:	4b36      	ldr	r3, [pc, #216]	; (8005990 <xTaskIncrementTick+0x150>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d104      	bne.n	80058c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058be:	4b37      	ldr	r3, [pc, #220]	; (800599c <xTaskIncrementTick+0x15c>)
 80058c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058c4:	601a      	str	r2, [r3, #0]
					break;
 80058c6:	e03f      	b.n	8005948 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058c8:	4b31      	ldr	r3, [pc, #196]	; (8005990 <xTaskIncrementTick+0x150>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d203      	bcs.n	80058e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80058e0:	4a2e      	ldr	r2, [pc, #184]	; (800599c <xTaskIncrementTick+0x15c>)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80058e6:	e02f      	b.n	8005948 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	3304      	adds	r3, #4
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7fe ff79 	bl	80047e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d004      	beq.n	8005904 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	3318      	adds	r3, #24
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fe ff70 	bl	80047e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005908:	4b25      	ldr	r3, [pc, #148]	; (80059a0 <xTaskIncrementTick+0x160>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	429a      	cmp	r2, r3
 800590e:	d903      	bls.n	8005918 <xTaskIncrementTick+0xd8>
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	4a22      	ldr	r2, [pc, #136]	; (80059a0 <xTaskIncrementTick+0x160>)
 8005916:	6013      	str	r3, [r2, #0]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800591c:	4613      	mov	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4a1f      	ldr	r2, [pc, #124]	; (80059a4 <xTaskIncrementTick+0x164>)
 8005926:	441a      	add	r2, r3
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	3304      	adds	r3, #4
 800592c:	4619      	mov	r1, r3
 800592e:	4610      	mov	r0, r2
 8005930:	f7fe fefb 	bl	800472a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005938:	4b1b      	ldr	r3, [pc, #108]	; (80059a8 <xTaskIncrementTick+0x168>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593e:	429a      	cmp	r2, r3
 8005940:	d3b8      	bcc.n	80058b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005942:	2301      	movs	r3, #1
 8005944:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005946:	e7b5      	b.n	80058b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005948:	4b17      	ldr	r3, [pc, #92]	; (80059a8 <xTaskIncrementTick+0x168>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800594e:	4915      	ldr	r1, [pc, #84]	; (80059a4 <xTaskIncrementTick+0x164>)
 8005950:	4613      	mov	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	440b      	add	r3, r1
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d901      	bls.n	8005964 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005960:	2301      	movs	r3, #1
 8005962:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005964:	4b11      	ldr	r3, [pc, #68]	; (80059ac <xTaskIncrementTick+0x16c>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d007      	beq.n	800597c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800596c:	2301      	movs	r3, #1
 800596e:	617b      	str	r3, [r7, #20]
 8005970:	e004      	b.n	800597c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005972:	4b0f      	ldr	r3, [pc, #60]	; (80059b0 <xTaskIncrementTick+0x170>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	3301      	adds	r3, #1
 8005978:	4a0d      	ldr	r2, [pc, #52]	; (80059b0 <xTaskIncrementTick+0x170>)
 800597a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800597c:	697b      	ldr	r3, [r7, #20]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	20001238 	.word	0x20001238
 800598c:	20001214 	.word	0x20001214
 8005990:	200011c8 	.word	0x200011c8
 8005994:	200011cc 	.word	0x200011cc
 8005998:	20001228 	.word	0x20001228
 800599c:	20001230 	.word	0x20001230
 80059a0:	20001218 	.word	0x20001218
 80059a4:	20000d40 	.word	0x20000d40
 80059a8:	20000d3c 	.word	0x20000d3c
 80059ac:	20001224 	.word	0x20001224
 80059b0:	20001220 	.word	0x20001220

080059b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80059ba:	4b2a      	ldr	r3, [pc, #168]	; (8005a64 <vTaskSwitchContext+0xb0>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80059c2:	4b29      	ldr	r3, [pc, #164]	; (8005a68 <vTaskSwitchContext+0xb4>)
 80059c4:	2201      	movs	r2, #1
 80059c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80059c8:	e046      	b.n	8005a58 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80059ca:	4b27      	ldr	r3, [pc, #156]	; (8005a68 <vTaskSwitchContext+0xb4>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059d0:	4b26      	ldr	r3, [pc, #152]	; (8005a6c <vTaskSwitchContext+0xb8>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	60fb      	str	r3, [r7, #12]
 80059d6:	e010      	b.n	80059fa <vTaskSwitchContext+0x46>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10a      	bne.n	80059f4 <vTaskSwitchContext+0x40>
	__asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	607b      	str	r3, [r7, #4]
}
 80059f0:	bf00      	nop
 80059f2:	e7fe      	b.n	80059f2 <vTaskSwitchContext+0x3e>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	491d      	ldr	r1, [pc, #116]	; (8005a70 <vTaskSwitchContext+0xbc>)
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	4613      	mov	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	440b      	add	r3, r1
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d0e4      	beq.n	80059d8 <vTaskSwitchContext+0x24>
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	4613      	mov	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4a15      	ldr	r2, [pc, #84]	; (8005a70 <vTaskSwitchContext+0xbc>)
 8005a1a:	4413      	add	r3, r2
 8005a1c:	60bb      	str	r3, [r7, #8]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	605a      	str	r2, [r3, #4]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	3308      	adds	r3, #8
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d104      	bne.n	8005a3e <vTaskSwitchContext+0x8a>
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	685a      	ldr	r2, [r3, #4]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	605a      	str	r2, [r3, #4]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	4a0b      	ldr	r2, [pc, #44]	; (8005a74 <vTaskSwitchContext+0xc0>)
 8005a46:	6013      	str	r3, [r2, #0]
 8005a48:	4a08      	ldr	r2, [pc, #32]	; (8005a6c <vTaskSwitchContext+0xb8>)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a4e:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <vTaskSwitchContext+0xc0>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3354      	adds	r3, #84	; 0x54
 8005a54:	4a08      	ldr	r2, [pc, #32]	; (8005a78 <vTaskSwitchContext+0xc4>)
 8005a56:	6013      	str	r3, [r2, #0]
}
 8005a58:	bf00      	nop
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	20001238 	.word	0x20001238
 8005a68:	20001224 	.word	0x20001224
 8005a6c:	20001218 	.word	0x20001218
 8005a70:	20000d40 	.word	0x20000d40
 8005a74:	20000d3c 	.word	0x20000d3c
 8005a78:	20000070 	.word	0x20000070

08005a7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10a      	bne.n	8005aa2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a90:	f383 8811 	msr	BASEPRI, r3
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	60fb      	str	r3, [r7, #12]
}
 8005a9e:	bf00      	nop
 8005aa0:	e7fe      	b.n	8005aa0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005aa2:	4b07      	ldr	r3, [pc, #28]	; (8005ac0 <vTaskPlaceOnEventList+0x44>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3318      	adds	r3, #24
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7fe fe61 	bl	8004772 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	6838      	ldr	r0, [r7, #0]
 8005ab4:	f000 fa80 	bl	8005fb8 <prvAddCurrentTaskToDelayedList>
}
 8005ab8:	bf00      	nop
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	20000d3c 	.word	0x20000d3c

08005ac4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10a      	bne.n	8005aec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	617b      	str	r3, [r7, #20]
}
 8005ae8:	bf00      	nop
 8005aea:	e7fe      	b.n	8005aea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005aec:	4b0a      	ldr	r3, [pc, #40]	; (8005b18 <vTaskPlaceOnEventListRestricted+0x54>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3318      	adds	r3, #24
 8005af2:	4619      	mov	r1, r3
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f7fe fe18 	bl	800472a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005b00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b04:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b06:	6879      	ldr	r1, [r7, #4]
 8005b08:	68b8      	ldr	r0, [r7, #8]
 8005b0a:	f000 fa55 	bl	8005fb8 <prvAddCurrentTaskToDelayedList>
	}
 8005b0e:	bf00      	nop
 8005b10:	3718      	adds	r7, #24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	20000d3c 	.word	0x20000d3c

08005b1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10a      	bne.n	8005b48 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b36:	f383 8811 	msr	BASEPRI, r3
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	60fb      	str	r3, [r7, #12]
}
 8005b44:	bf00      	nop
 8005b46:	e7fe      	b.n	8005b46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	3318      	adds	r3, #24
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7fe fe49 	bl	80047e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b52:	4b1e      	ldr	r3, [pc, #120]	; (8005bcc <xTaskRemoveFromEventList+0xb0>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d11d      	bne.n	8005b96 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fe fe40 	bl	80047e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b68:	4b19      	ldr	r3, [pc, #100]	; (8005bd0 <xTaskRemoveFromEventList+0xb4>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d903      	bls.n	8005b78 <xTaskRemoveFromEventList+0x5c>
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b74:	4a16      	ldr	r2, [pc, #88]	; (8005bd0 <xTaskRemoveFromEventList+0xb4>)
 8005b76:	6013      	str	r3, [r2, #0]
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4a13      	ldr	r2, [pc, #76]	; (8005bd4 <xTaskRemoveFromEventList+0xb8>)
 8005b86:	441a      	add	r2, r3
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4610      	mov	r0, r2
 8005b90:	f7fe fdcb 	bl	800472a <vListInsertEnd>
 8005b94:	e005      	b.n	8005ba2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	3318      	adds	r3, #24
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	480e      	ldr	r0, [pc, #56]	; (8005bd8 <xTaskRemoveFromEventList+0xbc>)
 8005b9e:	f7fe fdc4 	bl	800472a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba6:	4b0d      	ldr	r3, [pc, #52]	; (8005bdc <xTaskRemoveFromEventList+0xc0>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d905      	bls.n	8005bbc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005bb4:	4b0a      	ldr	r3, [pc, #40]	; (8005be0 <xTaskRemoveFromEventList+0xc4>)
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	e001      	b.n	8005bc0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005bc0:	697b      	ldr	r3, [r7, #20]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3718      	adds	r7, #24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	20001238 	.word	0x20001238
 8005bd0:	20001218 	.word	0x20001218
 8005bd4:	20000d40 	.word	0x20000d40
 8005bd8:	200011d0 	.word	0x200011d0
 8005bdc:	20000d3c 	.word	0x20000d3c
 8005be0:	20001224 	.word	0x20001224

08005be4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005bec:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <vTaskInternalSetTimeOutState+0x24>)
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005bf4:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <vTaskInternalSetTimeOutState+0x28>)
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	605a      	str	r2, [r3, #4]
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	20001228 	.word	0x20001228
 8005c0c:	20001214 	.word	0x20001214

08005c10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b088      	sub	sp, #32
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10a      	bne.n	8005c36 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	613b      	str	r3, [r7, #16]
}
 8005c32:	bf00      	nop
 8005c34:	e7fe      	b.n	8005c34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10a      	bne.n	8005c52 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	60fb      	str	r3, [r7, #12]
}
 8005c4e:	bf00      	nop
 8005c50:	e7fe      	b.n	8005c50 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005c52:	f000 fe7f 	bl	8006954 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c56:	4b1d      	ldr	r3, [pc, #116]	; (8005ccc <xTaskCheckForTimeOut+0xbc>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c6e:	d102      	bne.n	8005c76 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c70:	2300      	movs	r3, #0
 8005c72:	61fb      	str	r3, [r7, #28]
 8005c74:	e023      	b.n	8005cbe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	4b15      	ldr	r3, [pc, #84]	; (8005cd0 <xTaskCheckForTimeOut+0xc0>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d007      	beq.n	8005c92 <xTaskCheckForTimeOut+0x82>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d302      	bcc.n	8005c92 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	61fb      	str	r3, [r7, #28]
 8005c90:	e015      	b.n	8005cbe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d20b      	bcs.n	8005cb4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	1ad2      	subs	r2, r2, r3
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7ff ff9b 	bl	8005be4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61fb      	str	r3, [r7, #28]
 8005cb2:	e004      	b.n	8005cbe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005cbe:	f000 fe79 	bl	80069b4 <vPortExitCritical>

	return xReturn;
 8005cc2:	69fb      	ldr	r3, [r7, #28]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3720      	adds	r7, #32
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	20001214 	.word	0x20001214
 8005cd0:	20001228 	.word	0x20001228

08005cd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005cd8:	4b03      	ldr	r3, [pc, #12]	; (8005ce8 <vTaskMissedYield+0x14>)
 8005cda:	2201      	movs	r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]
}
 8005cde:	bf00      	nop
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	20001224 	.word	0x20001224

08005cec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005cf4:	f000 f852 	bl	8005d9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005cf8:	4b06      	ldr	r3, [pc, #24]	; (8005d14 <prvIdleTask+0x28>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d9f9      	bls.n	8005cf4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d00:	4b05      	ldr	r3, [pc, #20]	; (8005d18 <prvIdleTask+0x2c>)
 8005d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d06:	601a      	str	r2, [r3, #0]
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d10:	e7f0      	b.n	8005cf4 <prvIdleTask+0x8>
 8005d12:	bf00      	nop
 8005d14:	20000d40 	.word	0x20000d40
 8005d18:	e000ed04 	.word	0xe000ed04

08005d1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d22:	2300      	movs	r3, #0
 8005d24:	607b      	str	r3, [r7, #4]
 8005d26:	e00c      	b.n	8005d42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4a12      	ldr	r2, [pc, #72]	; (8005d7c <prvInitialiseTaskLists+0x60>)
 8005d34:	4413      	add	r3, r2
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fe fcca 	bl	80046d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	607b      	str	r3, [r7, #4]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b37      	cmp	r3, #55	; 0x37
 8005d46:	d9ef      	bls.n	8005d28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d48:	480d      	ldr	r0, [pc, #52]	; (8005d80 <prvInitialiseTaskLists+0x64>)
 8005d4a:	f7fe fcc1 	bl	80046d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d4e:	480d      	ldr	r0, [pc, #52]	; (8005d84 <prvInitialiseTaskLists+0x68>)
 8005d50:	f7fe fcbe 	bl	80046d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d54:	480c      	ldr	r0, [pc, #48]	; (8005d88 <prvInitialiseTaskLists+0x6c>)
 8005d56:	f7fe fcbb 	bl	80046d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d5a:	480c      	ldr	r0, [pc, #48]	; (8005d8c <prvInitialiseTaskLists+0x70>)
 8005d5c:	f7fe fcb8 	bl	80046d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d60:	480b      	ldr	r0, [pc, #44]	; (8005d90 <prvInitialiseTaskLists+0x74>)
 8005d62:	f7fe fcb5 	bl	80046d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d66:	4b0b      	ldr	r3, [pc, #44]	; (8005d94 <prvInitialiseTaskLists+0x78>)
 8005d68:	4a05      	ldr	r2, [pc, #20]	; (8005d80 <prvInitialiseTaskLists+0x64>)
 8005d6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d6c:	4b0a      	ldr	r3, [pc, #40]	; (8005d98 <prvInitialiseTaskLists+0x7c>)
 8005d6e:	4a05      	ldr	r2, [pc, #20]	; (8005d84 <prvInitialiseTaskLists+0x68>)
 8005d70:	601a      	str	r2, [r3, #0]
}
 8005d72:	bf00      	nop
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20000d40 	.word	0x20000d40
 8005d80:	200011a0 	.word	0x200011a0
 8005d84:	200011b4 	.word	0x200011b4
 8005d88:	200011d0 	.word	0x200011d0
 8005d8c:	200011e4 	.word	0x200011e4
 8005d90:	200011fc 	.word	0x200011fc
 8005d94:	200011c8 	.word	0x200011c8
 8005d98:	200011cc 	.word	0x200011cc

08005d9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005da2:	e019      	b.n	8005dd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005da4:	f000 fdd6 	bl	8006954 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005da8:	4b10      	ldr	r3, [pc, #64]	; (8005dec <prvCheckTasksWaitingTermination+0x50>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	3304      	adds	r3, #4
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7fe fd15 	bl	80047e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005dba:	4b0d      	ldr	r3, [pc, #52]	; (8005df0 <prvCheckTasksWaitingTermination+0x54>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	4a0b      	ldr	r2, [pc, #44]	; (8005df0 <prvCheckTasksWaitingTermination+0x54>)
 8005dc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005dc4:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <prvCheckTasksWaitingTermination+0x58>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	4a0a      	ldr	r2, [pc, #40]	; (8005df4 <prvCheckTasksWaitingTermination+0x58>)
 8005dcc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005dce:	f000 fdf1 	bl	80069b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f810 	bl	8005df8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dd8:	4b06      	ldr	r3, [pc, #24]	; (8005df4 <prvCheckTasksWaitingTermination+0x58>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1e1      	bne.n	8005da4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005de0:	bf00      	nop
 8005de2:	bf00      	nop
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	200011e4 	.word	0x200011e4
 8005df0:	20001210 	.word	0x20001210
 8005df4:	200011f8 	.word	0x200011f8

08005df8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	3354      	adds	r3, #84	; 0x54
 8005e04:	4618      	mov	r0, r3
 8005e06:	f001 f90d 	bl	8007024 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d108      	bne.n	8005e26 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 ff89 	bl	8006d30 <vPortFree>
				vPortFree( pxTCB );
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 ff86 	bl	8006d30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e24:	e018      	b.n	8005e58 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d103      	bne.n	8005e38 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 ff7d 	bl	8006d30 <vPortFree>
	}
 8005e36:	e00f      	b.n	8005e58 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d00a      	beq.n	8005e58 <prvDeleteTCB+0x60>
	__asm volatile
 8005e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e46:	f383 8811 	msr	BASEPRI, r3
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	60fb      	str	r3, [r7, #12]
}
 8005e54:	bf00      	nop
 8005e56:	e7fe      	b.n	8005e56 <prvDeleteTCB+0x5e>
	}
 8005e58:	bf00      	nop
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e66:	4b0c      	ldr	r3, [pc, #48]	; (8005e98 <prvResetNextTaskUnblockTime+0x38>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d104      	bne.n	8005e7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e70:	4b0a      	ldr	r3, [pc, #40]	; (8005e9c <prvResetNextTaskUnblockTime+0x3c>)
 8005e72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e78:	e008      	b.n	8005e8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e7a:	4b07      	ldr	r3, [pc, #28]	; (8005e98 <prvResetNextTaskUnblockTime+0x38>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	4a04      	ldr	r2, [pc, #16]	; (8005e9c <prvResetNextTaskUnblockTime+0x3c>)
 8005e8a:	6013      	str	r3, [r2, #0]
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	200011c8 	.word	0x200011c8
 8005e9c:	20001230 	.word	0x20001230

08005ea0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ea6:	4b0b      	ldr	r3, [pc, #44]	; (8005ed4 <xTaskGetSchedulerState+0x34>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d102      	bne.n	8005eb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	607b      	str	r3, [r7, #4]
 8005eb2:	e008      	b.n	8005ec6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005eb4:	4b08      	ldr	r3, [pc, #32]	; (8005ed8 <xTaskGetSchedulerState+0x38>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d102      	bne.n	8005ec2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	607b      	str	r3, [r7, #4]
 8005ec0:	e001      	b.n	8005ec6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ec6:	687b      	ldr	r3, [r7, #4]
	}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	2000121c 	.word	0x2000121c
 8005ed8:	20001238 	.word	0x20001238

08005edc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d056      	beq.n	8005fa0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005ef2:	4b2e      	ldr	r3, [pc, #184]	; (8005fac <xTaskPriorityDisinherit+0xd0>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d00a      	beq.n	8005f12 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f00:	f383 8811 	msr	BASEPRI, r3
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	60fb      	str	r3, [r7, #12]
}
 8005f0e:	bf00      	nop
 8005f10:	e7fe      	b.n	8005f10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10a      	bne.n	8005f30 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	60bb      	str	r3, [r7, #8]
}
 8005f2c:	bf00      	nop
 8005f2e:	e7fe      	b.n	8005f2e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f34:	1e5a      	subs	r2, r3, #1
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d02c      	beq.n	8005fa0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d128      	bne.n	8005fa0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	3304      	adds	r3, #4
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fe fc46 	bl	80047e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f64:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f70:	4b0f      	ldr	r3, [pc, #60]	; (8005fb0 <xTaskPriorityDisinherit+0xd4>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d903      	bls.n	8005f80 <xTaskPriorityDisinherit+0xa4>
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7c:	4a0c      	ldr	r2, [pc, #48]	; (8005fb0 <xTaskPriorityDisinherit+0xd4>)
 8005f7e:	6013      	str	r3, [r2, #0]
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f84:	4613      	mov	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4a09      	ldr	r2, [pc, #36]	; (8005fb4 <xTaskPriorityDisinherit+0xd8>)
 8005f8e:	441a      	add	r2, r3
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	3304      	adds	r3, #4
 8005f94:	4619      	mov	r1, r3
 8005f96:	4610      	mov	r0, r2
 8005f98:	f7fe fbc7 	bl	800472a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005fa0:	697b      	ldr	r3, [r7, #20]
	}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3718      	adds	r7, #24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	20000d3c 	.word	0x20000d3c
 8005fb0:	20001218 	.word	0x20001218
 8005fb4:	20000d40 	.word	0x20000d40

08005fb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005fc2:	4b21      	ldr	r3, [pc, #132]	; (8006048 <prvAddCurrentTaskToDelayedList+0x90>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fc8:	4b20      	ldr	r3, [pc, #128]	; (800604c <prvAddCurrentTaskToDelayedList+0x94>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3304      	adds	r3, #4
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fe fc08 	bl	80047e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fda:	d10a      	bne.n	8005ff2 <prvAddCurrentTaskToDelayedList+0x3a>
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d007      	beq.n	8005ff2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fe2:	4b1a      	ldr	r3, [pc, #104]	; (800604c <prvAddCurrentTaskToDelayedList+0x94>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	4619      	mov	r1, r3
 8005fea:	4819      	ldr	r0, [pc, #100]	; (8006050 <prvAddCurrentTaskToDelayedList+0x98>)
 8005fec:	f7fe fb9d 	bl	800472a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ff0:	e026      	b.n	8006040 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ffa:	4b14      	ldr	r3, [pc, #80]	; (800604c <prvAddCurrentTaskToDelayedList+0x94>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	429a      	cmp	r2, r3
 8006008:	d209      	bcs.n	800601e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800600a:	4b12      	ldr	r3, [pc, #72]	; (8006054 <prvAddCurrentTaskToDelayedList+0x9c>)
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	4b0f      	ldr	r3, [pc, #60]	; (800604c <prvAddCurrentTaskToDelayedList+0x94>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3304      	adds	r3, #4
 8006014:	4619      	mov	r1, r3
 8006016:	4610      	mov	r0, r2
 8006018:	f7fe fbab 	bl	8004772 <vListInsert>
}
 800601c:	e010      	b.n	8006040 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800601e:	4b0e      	ldr	r3, [pc, #56]	; (8006058 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	4b0a      	ldr	r3, [pc, #40]	; (800604c <prvAddCurrentTaskToDelayedList+0x94>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3304      	adds	r3, #4
 8006028:	4619      	mov	r1, r3
 800602a:	4610      	mov	r0, r2
 800602c:	f7fe fba1 	bl	8004772 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006030:	4b0a      	ldr	r3, [pc, #40]	; (800605c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	429a      	cmp	r2, r3
 8006038:	d202      	bcs.n	8006040 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800603a:	4a08      	ldr	r2, [pc, #32]	; (800605c <prvAddCurrentTaskToDelayedList+0xa4>)
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	6013      	str	r3, [r2, #0]
}
 8006040:	bf00      	nop
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	20001214 	.word	0x20001214
 800604c:	20000d3c 	.word	0x20000d3c
 8006050:	200011fc 	.word	0x200011fc
 8006054:	200011cc 	.word	0x200011cc
 8006058:	200011c8 	.word	0x200011c8
 800605c:	20001230 	.word	0x20001230

08006060 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b08a      	sub	sp, #40	; 0x28
 8006064:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006066:	2300      	movs	r3, #0
 8006068:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800606a:	f000 fb07 	bl	800667c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800606e:	4b1c      	ldr	r3, [pc, #112]	; (80060e0 <xTimerCreateTimerTask+0x80>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d021      	beq.n	80060ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006076:	2300      	movs	r3, #0
 8006078:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800607a:	2300      	movs	r3, #0
 800607c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800607e:	1d3a      	adds	r2, r7, #4
 8006080:	f107 0108 	add.w	r1, r7, #8
 8006084:	f107 030c 	add.w	r3, r7, #12
 8006088:	4618      	mov	r0, r3
 800608a:	f7fe fb07 	bl	800469c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800608e:	6879      	ldr	r1, [r7, #4]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	9202      	str	r2, [sp, #8]
 8006096:	9301      	str	r3, [sp, #4]
 8006098:	2302      	movs	r3, #2
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	2300      	movs	r3, #0
 800609e:	460a      	mov	r2, r1
 80060a0:	4910      	ldr	r1, [pc, #64]	; (80060e4 <xTimerCreateTimerTask+0x84>)
 80060a2:	4811      	ldr	r0, [pc, #68]	; (80060e8 <xTimerCreateTimerTask+0x88>)
 80060a4:	f7ff f8b4 	bl	8005210 <xTaskCreateStatic>
 80060a8:	4603      	mov	r3, r0
 80060aa:	4a10      	ldr	r2, [pc, #64]	; (80060ec <xTimerCreateTimerTask+0x8c>)
 80060ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80060ae:	4b0f      	ldr	r3, [pc, #60]	; (80060ec <xTimerCreateTimerTask+0x8c>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80060b6:	2301      	movs	r3, #1
 80060b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10a      	bne.n	80060d6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	613b      	str	r3, [r7, #16]
}
 80060d2:	bf00      	nop
 80060d4:	e7fe      	b.n	80060d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80060d6:	697b      	ldr	r3, [r7, #20]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3718      	adds	r7, #24
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	2000126c 	.word	0x2000126c
 80060e4:	08007a34 	.word	0x08007a34
 80060e8:	08006225 	.word	0x08006225
 80060ec:	20001270 	.word	0x20001270

080060f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08a      	sub	sp, #40	; 0x28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80060fe:	2300      	movs	r3, #0
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10a      	bne.n	800611e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	623b      	str	r3, [r7, #32]
}
 800611a:	bf00      	nop
 800611c:	e7fe      	b.n	800611c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800611e:	4b1a      	ldr	r3, [pc, #104]	; (8006188 <xTimerGenericCommand+0x98>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d02a      	beq.n	800617c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2b05      	cmp	r3, #5
 8006136:	dc18      	bgt.n	800616a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006138:	f7ff feb2 	bl	8005ea0 <xTaskGetSchedulerState>
 800613c:	4603      	mov	r3, r0
 800613e:	2b02      	cmp	r3, #2
 8006140:	d109      	bne.n	8006156 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006142:	4b11      	ldr	r3, [pc, #68]	; (8006188 <xTimerGenericCommand+0x98>)
 8006144:	6818      	ldr	r0, [r3, #0]
 8006146:	f107 0110 	add.w	r1, r7, #16
 800614a:	2300      	movs	r3, #0
 800614c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800614e:	f7fe fc77 	bl	8004a40 <xQueueGenericSend>
 8006152:	6278      	str	r0, [r7, #36]	; 0x24
 8006154:	e012      	b.n	800617c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006156:	4b0c      	ldr	r3, [pc, #48]	; (8006188 <xTimerGenericCommand+0x98>)
 8006158:	6818      	ldr	r0, [r3, #0]
 800615a:	f107 0110 	add.w	r1, r7, #16
 800615e:	2300      	movs	r3, #0
 8006160:	2200      	movs	r2, #0
 8006162:	f7fe fc6d 	bl	8004a40 <xQueueGenericSend>
 8006166:	6278      	str	r0, [r7, #36]	; 0x24
 8006168:	e008      	b.n	800617c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800616a:	4b07      	ldr	r3, [pc, #28]	; (8006188 <xTimerGenericCommand+0x98>)
 800616c:	6818      	ldr	r0, [r3, #0]
 800616e:	f107 0110 	add.w	r1, r7, #16
 8006172:	2300      	movs	r3, #0
 8006174:	683a      	ldr	r2, [r7, #0]
 8006176:	f7fe fd61 	bl	8004c3c <xQueueGenericSendFromISR>
 800617a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800617e:	4618      	mov	r0, r3
 8006180:	3728      	adds	r7, #40	; 0x28
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	2000126c 	.word	0x2000126c

0800618c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b088      	sub	sp, #32
 8006190:	af02      	add	r7, sp, #8
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006196:	4b22      	ldr	r3, [pc, #136]	; (8006220 <prvProcessExpiredTimer+0x94>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	3304      	adds	r3, #4
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7fe fb1d 	bl	80047e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061b0:	f003 0304 	and.w	r3, r3, #4
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d022      	beq.n	80061fe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	699a      	ldr	r2, [r3, #24]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	18d1      	adds	r1, r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	6978      	ldr	r0, [r7, #20]
 80061c6:	f000 f8d1 	bl	800636c <prvInsertTimerInActiveList>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d01f      	beq.n	8006210 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061d0:	2300      	movs	r3, #0
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	2300      	movs	r3, #0
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	2100      	movs	r1, #0
 80061da:	6978      	ldr	r0, [r7, #20]
 80061dc:	f7ff ff88 	bl	80060f0 <xTimerGenericCommand>
 80061e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d113      	bne.n	8006210 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	60fb      	str	r3, [r7, #12]
}
 80061fa:	bf00      	nop
 80061fc:	e7fe      	b.n	80061fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006204:	f023 0301 	bic.w	r3, r3, #1
 8006208:	b2da      	uxtb	r2, r3
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	6978      	ldr	r0, [r7, #20]
 8006216:	4798      	blx	r3
}
 8006218:	bf00      	nop
 800621a:	3718      	adds	r7, #24
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	20001264 	.word	0x20001264

08006224 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800622c:	f107 0308 	add.w	r3, r7, #8
 8006230:	4618      	mov	r0, r3
 8006232:	f000 f857 	bl	80062e4 <prvGetNextExpireTime>
 8006236:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	4619      	mov	r1, r3
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 f803 	bl	8006248 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006242:	f000 f8d5 	bl	80063f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006246:	e7f1      	b.n	800622c <prvTimerTask+0x8>

08006248 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006252:	f7ff fa39 	bl	80056c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006256:	f107 0308 	add.w	r3, r7, #8
 800625a:	4618      	mov	r0, r3
 800625c:	f000 f866 	bl	800632c <prvSampleTimeNow>
 8006260:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d130      	bne.n	80062ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10a      	bne.n	8006284 <prvProcessTimerOrBlockTask+0x3c>
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	429a      	cmp	r2, r3
 8006274:	d806      	bhi.n	8006284 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006276:	f7ff fa35 	bl	80056e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800627a:	68f9      	ldr	r1, [r7, #12]
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7ff ff85 	bl	800618c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006282:	e024      	b.n	80062ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d008      	beq.n	800629c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800628a:	4b13      	ldr	r3, [pc, #76]	; (80062d8 <prvProcessTimerOrBlockTask+0x90>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <prvProcessTimerOrBlockTask+0x50>
 8006294:	2301      	movs	r3, #1
 8006296:	e000      	b.n	800629a <prvProcessTimerOrBlockTask+0x52>
 8006298:	2300      	movs	r3, #0
 800629a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800629c:	4b0f      	ldr	r3, [pc, #60]	; (80062dc <prvProcessTimerOrBlockTask+0x94>)
 800629e:	6818      	ldr	r0, [r3, #0]
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	4619      	mov	r1, r3
 80062aa:	f7fe ff7d 	bl	80051a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80062ae:	f7ff fa19 	bl	80056e4 <xTaskResumeAll>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10a      	bne.n	80062ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80062b8:	4b09      	ldr	r3, [pc, #36]	; (80062e0 <prvProcessTimerOrBlockTask+0x98>)
 80062ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062be:	601a      	str	r2, [r3, #0]
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	f3bf 8f6f 	isb	sy
}
 80062c8:	e001      	b.n	80062ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80062ca:	f7ff fa0b 	bl	80056e4 <xTaskResumeAll>
}
 80062ce:	bf00      	nop
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	20001268 	.word	0x20001268
 80062dc:	2000126c 	.word	0x2000126c
 80062e0:	e000ed04 	.word	0xe000ed04

080062e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80062ec:	4b0e      	ldr	r3, [pc, #56]	; (8006328 <prvGetNextExpireTime+0x44>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <prvGetNextExpireTime+0x16>
 80062f6:	2201      	movs	r2, #1
 80062f8:	e000      	b.n	80062fc <prvGetNextExpireTime+0x18>
 80062fa:	2200      	movs	r2, #0
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d105      	bne.n	8006314 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006308:	4b07      	ldr	r3, [pc, #28]	; (8006328 <prvGetNextExpireTime+0x44>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	e001      	b.n	8006318 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006318:	68fb      	ldr	r3, [r7, #12]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	20001264 	.word	0x20001264

0800632c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006334:	f7ff fa74 	bl	8005820 <xTaskGetTickCount>
 8006338:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800633a:	4b0b      	ldr	r3, [pc, #44]	; (8006368 <prvSampleTimeNow+0x3c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	429a      	cmp	r2, r3
 8006342:	d205      	bcs.n	8006350 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006344:	f000 f936 	bl	80065b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	e002      	b.n	8006356 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006356:	4a04      	ldr	r2, [pc, #16]	; (8006368 <prvSampleTimeNow+0x3c>)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800635c:	68fb      	ldr	r3, [r7, #12]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	20001274 	.word	0x20001274

0800636c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800637a:	2300      	movs	r3, #0
 800637c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	429a      	cmp	r2, r3
 8006390:	d812      	bhi.n	80063b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	1ad2      	subs	r2, r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	429a      	cmp	r2, r3
 800639e:	d302      	bcc.n	80063a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80063a0:	2301      	movs	r3, #1
 80063a2:	617b      	str	r3, [r7, #20]
 80063a4:	e01b      	b.n	80063de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80063a6:	4b10      	ldr	r3, [pc, #64]	; (80063e8 <prvInsertTimerInActiveList+0x7c>)
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	3304      	adds	r3, #4
 80063ae:	4619      	mov	r1, r3
 80063b0:	4610      	mov	r0, r2
 80063b2:	f7fe f9de 	bl	8004772 <vListInsert>
 80063b6:	e012      	b.n	80063de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d206      	bcs.n	80063ce <prvInsertTimerInActiveList+0x62>
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d302      	bcc.n	80063ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80063c8:	2301      	movs	r3, #1
 80063ca:	617b      	str	r3, [r7, #20]
 80063cc:	e007      	b.n	80063de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063ce:	4b07      	ldr	r3, [pc, #28]	; (80063ec <prvInsertTimerInActiveList+0x80>)
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	3304      	adds	r3, #4
 80063d6:	4619      	mov	r1, r3
 80063d8:	4610      	mov	r0, r2
 80063da:	f7fe f9ca 	bl	8004772 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80063de:	697b      	ldr	r3, [r7, #20]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3718      	adds	r7, #24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	20001268 	.word	0x20001268
 80063ec:	20001264 	.word	0x20001264

080063f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b08e      	sub	sp, #56	; 0x38
 80063f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063f6:	e0ca      	b.n	800658e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	da18      	bge.n	8006430 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80063fe:	1d3b      	adds	r3, r7, #4
 8006400:	3304      	adds	r3, #4
 8006402:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10a      	bne.n	8006420 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800640a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	61fb      	str	r3, [r7, #28]
}
 800641c:	bf00      	nop
 800641e:	e7fe      	b.n	800641e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006426:	6850      	ldr	r0, [r2, #4]
 8006428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800642a:	6892      	ldr	r2, [r2, #8]
 800642c:	4611      	mov	r1, r2
 800642e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	f2c0 80ab 	blt.w	800658e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800643c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d004      	beq.n	800644e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006446:	3304      	adds	r3, #4
 8006448:	4618      	mov	r0, r3
 800644a:	f7fe f9cb 	bl	80047e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800644e:	463b      	mov	r3, r7
 8006450:	4618      	mov	r0, r3
 8006452:	f7ff ff6b 	bl	800632c <prvSampleTimeNow>
 8006456:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b09      	cmp	r3, #9
 800645c:	f200 8096 	bhi.w	800658c <prvProcessReceivedCommands+0x19c>
 8006460:	a201      	add	r2, pc, #4	; (adr r2, 8006468 <prvProcessReceivedCommands+0x78>)
 8006462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006466:	bf00      	nop
 8006468:	08006491 	.word	0x08006491
 800646c:	08006491 	.word	0x08006491
 8006470:	08006491 	.word	0x08006491
 8006474:	08006505 	.word	0x08006505
 8006478:	08006519 	.word	0x08006519
 800647c:	08006563 	.word	0x08006563
 8006480:	08006491 	.word	0x08006491
 8006484:	08006491 	.word	0x08006491
 8006488:	08006505 	.word	0x08006505
 800648c:	08006519 	.word	0x08006519
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006492:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006496:	f043 0301 	orr.w	r3, r3, #1
 800649a:	b2da      	uxtb	r2, r3
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	18d1      	adds	r1, r2, r3
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064b0:	f7ff ff5c 	bl	800636c <prvInsertTimerInActiveList>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d069      	beq.n	800658e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d05e      	beq.n	800658e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	441a      	add	r2, r3
 80064d8:	2300      	movs	r3, #0
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	2300      	movs	r3, #0
 80064de:	2100      	movs	r1, #0
 80064e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064e2:	f7ff fe05 	bl	80060f0 <xTimerGenericCommand>
 80064e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d14f      	bne.n	800658e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80064ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	61bb      	str	r3, [r7, #24]
}
 8006500:	bf00      	nop
 8006502:	e7fe      	b.n	8006502 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006506:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800650a:	f023 0301 	bic.w	r3, r3, #1
 800650e:	b2da      	uxtb	r2, r3
 8006510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006512:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006516:	e03a      	b.n	800658e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800651e:	f043 0301 	orr.w	r3, r3, #1
 8006522:	b2da      	uxtb	r2, r3
 8006524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006526:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10a      	bne.n	800654e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653c:	f383 8811 	msr	BASEPRI, r3
 8006540:	f3bf 8f6f 	isb	sy
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	617b      	str	r3, [r7, #20]
}
 800654a:	bf00      	nop
 800654c:	e7fe      	b.n	800654c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	699a      	ldr	r2, [r3, #24]
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	18d1      	adds	r1, r2, r3
 8006556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800655a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800655c:	f7ff ff06 	bl	800636c <prvInsertTimerInActiveList>
					break;
 8006560:	e015      	b.n	800658e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d103      	bne.n	8006578 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006572:	f000 fbdd 	bl	8006d30 <vPortFree>
 8006576:	e00a      	b.n	800658e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800657e:	f023 0301 	bic.w	r3, r3, #1
 8006582:	b2da      	uxtb	r2, r3
 8006584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006586:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800658a:	e000      	b.n	800658e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800658c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800658e:	4b08      	ldr	r3, [pc, #32]	; (80065b0 <prvProcessReceivedCommands+0x1c0>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	1d39      	adds	r1, r7, #4
 8006594:	2200      	movs	r2, #0
 8006596:	4618      	mov	r0, r3
 8006598:	f7fe fbec 	bl	8004d74 <xQueueReceive>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f47f af2a 	bne.w	80063f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop
 80065a8:	3730      	adds	r7, #48	; 0x30
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	2000126c 	.word	0x2000126c

080065b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b088      	sub	sp, #32
 80065b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065ba:	e048      	b.n	800664e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065bc:	4b2d      	ldr	r3, [pc, #180]	; (8006674 <prvSwitchTimerLists+0xc0>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065c6:	4b2b      	ldr	r3, [pc, #172]	; (8006674 <prvSwitchTimerLists+0xc0>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3304      	adds	r3, #4
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7fe f905 	bl	80047e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065e8:	f003 0304 	and.w	r3, r3, #4
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d02e      	beq.n	800664e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	4413      	add	r3, r2
 80065f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80065fa:	68ba      	ldr	r2, [r7, #8]
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d90e      	bls.n	8006620 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800660e:	4b19      	ldr	r3, [pc, #100]	; (8006674 <prvSwitchTimerLists+0xc0>)
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	3304      	adds	r3, #4
 8006616:	4619      	mov	r1, r3
 8006618:	4610      	mov	r0, r2
 800661a:	f7fe f8aa 	bl	8004772 <vListInsert>
 800661e:	e016      	b.n	800664e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006620:	2300      	movs	r3, #0
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	2300      	movs	r3, #0
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	2100      	movs	r1, #0
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f7ff fd60 	bl	80060f0 <xTimerGenericCommand>
 8006630:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10a      	bne.n	800664e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663c:	f383 8811 	msr	BASEPRI, r3
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	603b      	str	r3, [r7, #0]
}
 800664a:	bf00      	nop
 800664c:	e7fe      	b.n	800664c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800664e:	4b09      	ldr	r3, [pc, #36]	; (8006674 <prvSwitchTimerLists+0xc0>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1b1      	bne.n	80065bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006658:	4b06      	ldr	r3, [pc, #24]	; (8006674 <prvSwitchTimerLists+0xc0>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800665e:	4b06      	ldr	r3, [pc, #24]	; (8006678 <prvSwitchTimerLists+0xc4>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a04      	ldr	r2, [pc, #16]	; (8006674 <prvSwitchTimerLists+0xc0>)
 8006664:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006666:	4a04      	ldr	r2, [pc, #16]	; (8006678 <prvSwitchTimerLists+0xc4>)
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	6013      	str	r3, [r2, #0]
}
 800666c:	bf00      	nop
 800666e:	3718      	adds	r7, #24
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	20001264 	.word	0x20001264
 8006678:	20001268 	.word	0x20001268

0800667c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006682:	f000 f967 	bl	8006954 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006686:	4b15      	ldr	r3, [pc, #84]	; (80066dc <prvCheckForValidListAndQueue+0x60>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d120      	bne.n	80066d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800668e:	4814      	ldr	r0, [pc, #80]	; (80066e0 <prvCheckForValidListAndQueue+0x64>)
 8006690:	f7fe f81e 	bl	80046d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006694:	4813      	ldr	r0, [pc, #76]	; (80066e4 <prvCheckForValidListAndQueue+0x68>)
 8006696:	f7fe f81b 	bl	80046d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800669a:	4b13      	ldr	r3, [pc, #76]	; (80066e8 <prvCheckForValidListAndQueue+0x6c>)
 800669c:	4a10      	ldr	r2, [pc, #64]	; (80066e0 <prvCheckForValidListAndQueue+0x64>)
 800669e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80066a0:	4b12      	ldr	r3, [pc, #72]	; (80066ec <prvCheckForValidListAndQueue+0x70>)
 80066a2:	4a10      	ldr	r2, [pc, #64]	; (80066e4 <prvCheckForValidListAndQueue+0x68>)
 80066a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80066a6:	2300      	movs	r3, #0
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	4b11      	ldr	r3, [pc, #68]	; (80066f0 <prvCheckForValidListAndQueue+0x74>)
 80066ac:	4a11      	ldr	r2, [pc, #68]	; (80066f4 <prvCheckForValidListAndQueue+0x78>)
 80066ae:	2110      	movs	r1, #16
 80066b0:	200a      	movs	r0, #10
 80066b2:	f7fe f929 	bl	8004908 <xQueueGenericCreateStatic>
 80066b6:	4603      	mov	r3, r0
 80066b8:	4a08      	ldr	r2, [pc, #32]	; (80066dc <prvCheckForValidListAndQueue+0x60>)
 80066ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80066bc:	4b07      	ldr	r3, [pc, #28]	; (80066dc <prvCheckForValidListAndQueue+0x60>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d005      	beq.n	80066d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80066c4:	4b05      	ldr	r3, [pc, #20]	; (80066dc <prvCheckForValidListAndQueue+0x60>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	490b      	ldr	r1, [pc, #44]	; (80066f8 <prvCheckForValidListAndQueue+0x7c>)
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7fe fd42 	bl	8005154 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066d0:	f000 f970 	bl	80069b4 <vPortExitCritical>
}
 80066d4:	bf00      	nop
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	2000126c 	.word	0x2000126c
 80066e0:	2000123c 	.word	0x2000123c
 80066e4:	20001250 	.word	0x20001250
 80066e8:	20001264 	.word	0x20001264
 80066ec:	20001268 	.word	0x20001268
 80066f0:	20001318 	.word	0x20001318
 80066f4:	20001278 	.word	0x20001278
 80066f8:	08007a3c 	.word	0x08007a3c

080066fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	3b04      	subs	r3, #4
 800670c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006714:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	3b04      	subs	r3, #4
 800671a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	f023 0201 	bic.w	r2, r3, #1
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	3b04      	subs	r3, #4
 800672a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800672c:	4a0c      	ldr	r2, [pc, #48]	; (8006760 <pxPortInitialiseStack+0x64>)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	3b14      	subs	r3, #20
 8006736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3b04      	subs	r3, #4
 8006742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f06f 0202 	mvn.w	r2, #2
 800674a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	3b20      	subs	r3, #32
 8006750:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006752:	68fb      	ldr	r3, [r7, #12]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	08006765 	.word	0x08006765

08006764 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800676a:	2300      	movs	r3, #0
 800676c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800676e:	4b12      	ldr	r3, [pc, #72]	; (80067b8 <prvTaskExitError+0x54>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006776:	d00a      	beq.n	800678e <prvTaskExitError+0x2a>
	__asm volatile
 8006778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	60fb      	str	r3, [r7, #12]
}
 800678a:	bf00      	nop
 800678c:	e7fe      	b.n	800678c <prvTaskExitError+0x28>
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	60bb      	str	r3, [r7, #8]
}
 80067a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067a2:	bf00      	nop
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d0fc      	beq.n	80067a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067aa:	bf00      	nop
 80067ac:	bf00      	nop
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	20000020 	.word	0x20000020
 80067bc:	00000000 	.word	0x00000000

080067c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80067c0:	4b07      	ldr	r3, [pc, #28]	; (80067e0 <pxCurrentTCBConst2>)
 80067c2:	6819      	ldr	r1, [r3, #0]
 80067c4:	6808      	ldr	r0, [r1, #0]
 80067c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ca:	f380 8809 	msr	PSP, r0
 80067ce:	f3bf 8f6f 	isb	sy
 80067d2:	f04f 0000 	mov.w	r0, #0
 80067d6:	f380 8811 	msr	BASEPRI, r0
 80067da:	4770      	bx	lr
 80067dc:	f3af 8000 	nop.w

080067e0 <pxCurrentTCBConst2>:
 80067e0:	20000d3c 	.word	0x20000d3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop

080067e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80067e8:	4808      	ldr	r0, [pc, #32]	; (800680c <prvPortStartFirstTask+0x24>)
 80067ea:	6800      	ldr	r0, [r0, #0]
 80067ec:	6800      	ldr	r0, [r0, #0]
 80067ee:	f380 8808 	msr	MSP, r0
 80067f2:	f04f 0000 	mov.w	r0, #0
 80067f6:	f380 8814 	msr	CONTROL, r0
 80067fa:	b662      	cpsie	i
 80067fc:	b661      	cpsie	f
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	df00      	svc	0
 8006808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800680a:	bf00      	nop
 800680c:	e000ed08 	.word	0xe000ed08

08006810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006816:	4b46      	ldr	r3, [pc, #280]	; (8006930 <xPortStartScheduler+0x120>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a46      	ldr	r2, [pc, #280]	; (8006934 <xPortStartScheduler+0x124>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d10a      	bne.n	8006836 <xPortStartScheduler+0x26>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	613b      	str	r3, [r7, #16]
}
 8006832:	bf00      	nop
 8006834:	e7fe      	b.n	8006834 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006836:	4b3e      	ldr	r3, [pc, #248]	; (8006930 <xPortStartScheduler+0x120>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a3f      	ldr	r2, [pc, #252]	; (8006938 <xPortStartScheduler+0x128>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d10a      	bne.n	8006856 <xPortStartScheduler+0x46>
	__asm volatile
 8006840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006844:	f383 8811 	msr	BASEPRI, r3
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	60fb      	str	r3, [r7, #12]
}
 8006852:	bf00      	nop
 8006854:	e7fe      	b.n	8006854 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006856:	4b39      	ldr	r3, [pc, #228]	; (800693c <xPortStartScheduler+0x12c>)
 8006858:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	b2db      	uxtb	r3, r3
 8006860:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	22ff      	movs	r2, #255	; 0xff
 8006866:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	b2db      	uxtb	r3, r3
 800686e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006870:	78fb      	ldrb	r3, [r7, #3]
 8006872:	b2db      	uxtb	r3, r3
 8006874:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006878:	b2da      	uxtb	r2, r3
 800687a:	4b31      	ldr	r3, [pc, #196]	; (8006940 <xPortStartScheduler+0x130>)
 800687c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800687e:	4b31      	ldr	r3, [pc, #196]	; (8006944 <xPortStartScheduler+0x134>)
 8006880:	2207      	movs	r2, #7
 8006882:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006884:	e009      	b.n	800689a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006886:	4b2f      	ldr	r3, [pc, #188]	; (8006944 <xPortStartScheduler+0x134>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3b01      	subs	r3, #1
 800688c:	4a2d      	ldr	r2, [pc, #180]	; (8006944 <xPortStartScheduler+0x134>)
 800688e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006890:	78fb      	ldrb	r3, [r7, #3]
 8006892:	b2db      	uxtb	r3, r3
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	b2db      	uxtb	r3, r3
 8006898:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800689a:	78fb      	ldrb	r3, [r7, #3]
 800689c:	b2db      	uxtb	r3, r3
 800689e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a2:	2b80      	cmp	r3, #128	; 0x80
 80068a4:	d0ef      	beq.n	8006886 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068a6:	4b27      	ldr	r3, [pc, #156]	; (8006944 <xPortStartScheduler+0x134>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f1c3 0307 	rsb	r3, r3, #7
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d00a      	beq.n	80068c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80068b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	60bb      	str	r3, [r7, #8]
}
 80068c4:	bf00      	nop
 80068c6:	e7fe      	b.n	80068c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068c8:	4b1e      	ldr	r3, [pc, #120]	; (8006944 <xPortStartScheduler+0x134>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	021b      	lsls	r3, r3, #8
 80068ce:	4a1d      	ldr	r2, [pc, #116]	; (8006944 <xPortStartScheduler+0x134>)
 80068d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068d2:	4b1c      	ldr	r3, [pc, #112]	; (8006944 <xPortStartScheduler+0x134>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068da:	4a1a      	ldr	r2, [pc, #104]	; (8006944 <xPortStartScheduler+0x134>)
 80068dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80068e6:	4b18      	ldr	r3, [pc, #96]	; (8006948 <xPortStartScheduler+0x138>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a17      	ldr	r2, [pc, #92]	; (8006948 <xPortStartScheduler+0x138>)
 80068ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80068f2:	4b15      	ldr	r3, [pc, #84]	; (8006948 <xPortStartScheduler+0x138>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a14      	ldr	r2, [pc, #80]	; (8006948 <xPortStartScheduler+0x138>)
 80068f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80068fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80068fe:	f000 f8dd 	bl	8006abc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006902:	4b12      	ldr	r3, [pc, #72]	; (800694c <xPortStartScheduler+0x13c>)
 8006904:	2200      	movs	r2, #0
 8006906:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006908:	f000 f8fc 	bl	8006b04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800690c:	4b10      	ldr	r3, [pc, #64]	; (8006950 <xPortStartScheduler+0x140>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a0f      	ldr	r2, [pc, #60]	; (8006950 <xPortStartScheduler+0x140>)
 8006912:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006916:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006918:	f7ff ff66 	bl	80067e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800691c:	f7ff f84a 	bl	80059b4 <vTaskSwitchContext>
	prvTaskExitError();
 8006920:	f7ff ff20 	bl	8006764 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3718      	adds	r7, #24
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	e000ed00 	.word	0xe000ed00
 8006934:	410fc271 	.word	0x410fc271
 8006938:	410fc270 	.word	0x410fc270
 800693c:	e000e400 	.word	0xe000e400
 8006940:	20001368 	.word	0x20001368
 8006944:	2000136c 	.word	0x2000136c
 8006948:	e000ed20 	.word	0xe000ed20
 800694c:	20000020 	.word	0x20000020
 8006950:	e000ef34 	.word	0xe000ef34

08006954 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
	__asm volatile
 800695a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	607b      	str	r3, [r7, #4]
}
 800696c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800696e:	4b0f      	ldr	r3, [pc, #60]	; (80069ac <vPortEnterCritical+0x58>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3301      	adds	r3, #1
 8006974:	4a0d      	ldr	r2, [pc, #52]	; (80069ac <vPortEnterCritical+0x58>)
 8006976:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006978:	4b0c      	ldr	r3, [pc, #48]	; (80069ac <vPortEnterCritical+0x58>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d10f      	bne.n	80069a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006980:	4b0b      	ldr	r3, [pc, #44]	; (80069b0 <vPortEnterCritical+0x5c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	603b      	str	r3, [r7, #0]
}
 800699c:	bf00      	nop
 800699e:	e7fe      	b.n	800699e <vPortEnterCritical+0x4a>
	}
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	20000020 	.word	0x20000020
 80069b0:	e000ed04 	.word	0xe000ed04

080069b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069ba:	4b12      	ldr	r3, [pc, #72]	; (8006a04 <vPortExitCritical+0x50>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10a      	bne.n	80069d8 <vPortExitCritical+0x24>
	__asm volatile
 80069c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	607b      	str	r3, [r7, #4]
}
 80069d4:	bf00      	nop
 80069d6:	e7fe      	b.n	80069d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80069d8:	4b0a      	ldr	r3, [pc, #40]	; (8006a04 <vPortExitCritical+0x50>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3b01      	subs	r3, #1
 80069de:	4a09      	ldr	r2, [pc, #36]	; (8006a04 <vPortExitCritical+0x50>)
 80069e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80069e2:	4b08      	ldr	r3, [pc, #32]	; (8006a04 <vPortExitCritical+0x50>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d105      	bne.n	80069f6 <vPortExitCritical+0x42>
 80069ea:	2300      	movs	r3, #0
 80069ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	f383 8811 	msr	BASEPRI, r3
}
 80069f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80069f6:	bf00      	nop
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	20000020 	.word	0x20000020
	...

08006a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a10:	f3ef 8009 	mrs	r0, PSP
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	4b15      	ldr	r3, [pc, #84]	; (8006a70 <pxCurrentTCBConst>)
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	f01e 0f10 	tst.w	lr, #16
 8006a20:	bf08      	it	eq
 8006a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2a:	6010      	str	r0, [r2, #0]
 8006a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a34:	f380 8811 	msr	BASEPRI, r0
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f7fe ffb8 	bl	80059b4 <vTaskSwitchContext>
 8006a44:	f04f 0000 	mov.w	r0, #0
 8006a48:	f380 8811 	msr	BASEPRI, r0
 8006a4c:	bc09      	pop	{r0, r3}
 8006a4e:	6819      	ldr	r1, [r3, #0]
 8006a50:	6808      	ldr	r0, [r1, #0]
 8006a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a56:	f01e 0f10 	tst.w	lr, #16
 8006a5a:	bf08      	it	eq
 8006a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a60:	f380 8809 	msr	PSP, r0
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	f3af 8000 	nop.w

08006a70 <pxCurrentTCBConst>:
 8006a70:	20000d3c 	.word	0x20000d3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a74:	bf00      	nop
 8006a76:	bf00      	nop

08006a78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a82:	f383 8811 	msr	BASEPRI, r3
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	f3bf 8f4f 	dsb	sy
 8006a8e:	607b      	str	r3, [r7, #4]
}
 8006a90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a92:	f7fe fed5 	bl	8005840 <xTaskIncrementTick>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d003      	beq.n	8006aa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a9c:	4b06      	ldr	r3, [pc, #24]	; (8006ab8 <xPortSysTickHandler+0x40>)
 8006a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	f383 8811 	msr	BASEPRI, r3
}
 8006aae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ab0:	bf00      	nop
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	e000ed04 	.word	0xe000ed04

08006abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006abc:	b480      	push	{r7}
 8006abe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ac0:	4b0b      	ldr	r3, [pc, #44]	; (8006af0 <vPortSetupTimerInterrupt+0x34>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ac6:	4b0b      	ldr	r3, [pc, #44]	; (8006af4 <vPortSetupTimerInterrupt+0x38>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006acc:	4b0a      	ldr	r3, [pc, #40]	; (8006af8 <vPortSetupTimerInterrupt+0x3c>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a0a      	ldr	r2, [pc, #40]	; (8006afc <vPortSetupTimerInterrupt+0x40>)
 8006ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad6:	099b      	lsrs	r3, r3, #6
 8006ad8:	4a09      	ldr	r2, [pc, #36]	; (8006b00 <vPortSetupTimerInterrupt+0x44>)
 8006ada:	3b01      	subs	r3, #1
 8006adc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ade:	4b04      	ldr	r3, [pc, #16]	; (8006af0 <vPortSetupTimerInterrupt+0x34>)
 8006ae0:	2207      	movs	r2, #7
 8006ae2:	601a      	str	r2, [r3, #0]
}
 8006ae4:	bf00      	nop
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	e000e010 	.word	0xe000e010
 8006af4:	e000e018 	.word	0xe000e018
 8006af8:	20000014 	.word	0x20000014
 8006afc:	10624dd3 	.word	0x10624dd3
 8006b00:	e000e014 	.word	0xe000e014

08006b04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b14 <vPortEnableVFP+0x10>
 8006b08:	6801      	ldr	r1, [r0, #0]
 8006b0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b0e:	6001      	str	r1, [r0, #0]
 8006b10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b12:	bf00      	nop
 8006b14:	e000ed88 	.word	0xe000ed88

08006b18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b1e:	f3ef 8305 	mrs	r3, IPSR
 8006b22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2b0f      	cmp	r3, #15
 8006b28:	d914      	bls.n	8006b54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b2a:	4a17      	ldr	r2, [pc, #92]	; (8006b88 <vPortValidateInterruptPriority+0x70>)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4413      	add	r3, r2
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b34:	4b15      	ldr	r3, [pc, #84]	; (8006b8c <vPortValidateInterruptPriority+0x74>)
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	7afa      	ldrb	r2, [r7, #11]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d20a      	bcs.n	8006b54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	607b      	str	r3, [r7, #4]
}
 8006b50:	bf00      	nop
 8006b52:	e7fe      	b.n	8006b52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b54:	4b0e      	ldr	r3, [pc, #56]	; (8006b90 <vPortValidateInterruptPriority+0x78>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b5c:	4b0d      	ldr	r3, [pc, #52]	; (8006b94 <vPortValidateInterruptPriority+0x7c>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d90a      	bls.n	8006b7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	603b      	str	r3, [r7, #0]
}
 8006b76:	bf00      	nop
 8006b78:	e7fe      	b.n	8006b78 <vPortValidateInterruptPriority+0x60>
	}
 8006b7a:	bf00      	nop
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	e000e3f0 	.word	0xe000e3f0
 8006b8c:	20001368 	.word	0x20001368
 8006b90:	e000ed0c 	.word	0xe000ed0c
 8006b94:	2000136c 	.word	0x2000136c

08006b98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b08a      	sub	sp, #40	; 0x28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ba4:	f7fe fd90 	bl	80056c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ba8:	4b5b      	ldr	r3, [pc, #364]	; (8006d18 <pvPortMalloc+0x180>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d101      	bne.n	8006bb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bb0:	f000 f920 	bl	8006df4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bb4:	4b59      	ldr	r3, [pc, #356]	; (8006d1c <pvPortMalloc+0x184>)
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f040 8093 	bne.w	8006ce8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d01d      	beq.n	8006c04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006bc8:	2208      	movs	r2, #8
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4413      	add	r3, r2
 8006bce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f003 0307 	and.w	r3, r3, #7
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d014      	beq.n	8006c04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f023 0307 	bic.w	r3, r3, #7
 8006be0:	3308      	adds	r3, #8
 8006be2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f003 0307 	and.w	r3, r3, #7
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00a      	beq.n	8006c04 <pvPortMalloc+0x6c>
	__asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	617b      	str	r3, [r7, #20]
}
 8006c00:	bf00      	nop
 8006c02:	e7fe      	b.n	8006c02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d06e      	beq.n	8006ce8 <pvPortMalloc+0x150>
 8006c0a:	4b45      	ldr	r3, [pc, #276]	; (8006d20 <pvPortMalloc+0x188>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d869      	bhi.n	8006ce8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c14:	4b43      	ldr	r3, [pc, #268]	; (8006d24 <pvPortMalloc+0x18c>)
 8006c16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c18:	4b42      	ldr	r3, [pc, #264]	; (8006d24 <pvPortMalloc+0x18c>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c1e:	e004      	b.n	8006c2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d903      	bls.n	8006c3c <pvPortMalloc+0xa4>
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1f1      	bne.n	8006c20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c3c:	4b36      	ldr	r3, [pc, #216]	; (8006d18 <pvPortMalloc+0x180>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d050      	beq.n	8006ce8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2208      	movs	r2, #8
 8006c4c:	4413      	add	r3, r2
 8006c4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	1ad2      	subs	r2, r2, r3
 8006c60:	2308      	movs	r3, #8
 8006c62:	005b      	lsls	r3, r3, #1
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d91f      	bls.n	8006ca8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	f003 0307 	and.w	r3, r3, #7
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00a      	beq.n	8006c90 <pvPortMalloc+0xf8>
	__asm volatile
 8006c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7e:	f383 8811 	msr	BASEPRI, r3
 8006c82:	f3bf 8f6f 	isb	sy
 8006c86:	f3bf 8f4f 	dsb	sy
 8006c8a:	613b      	str	r3, [r7, #16]
}
 8006c8c:	bf00      	nop
 8006c8e:	e7fe      	b.n	8006c8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	1ad2      	subs	r2, r2, r3
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ca2:	69b8      	ldr	r0, [r7, #24]
 8006ca4:	f000 f908 	bl	8006eb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ca8:	4b1d      	ldr	r3, [pc, #116]	; (8006d20 <pvPortMalloc+0x188>)
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	4a1b      	ldr	r2, [pc, #108]	; (8006d20 <pvPortMalloc+0x188>)
 8006cb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cb6:	4b1a      	ldr	r3, [pc, #104]	; (8006d20 <pvPortMalloc+0x188>)
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	4b1b      	ldr	r3, [pc, #108]	; (8006d28 <pvPortMalloc+0x190>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d203      	bcs.n	8006cca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006cc2:	4b17      	ldr	r3, [pc, #92]	; (8006d20 <pvPortMalloc+0x188>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a18      	ldr	r2, [pc, #96]	; (8006d28 <pvPortMalloc+0x190>)
 8006cc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	685a      	ldr	r2, [r3, #4]
 8006cce:	4b13      	ldr	r3, [pc, #76]	; (8006d1c <pvPortMalloc+0x184>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	431a      	orrs	r2, r3
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	2200      	movs	r2, #0
 8006cdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006cde:	4b13      	ldr	r3, [pc, #76]	; (8006d2c <pvPortMalloc+0x194>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	4a11      	ldr	r2, [pc, #68]	; (8006d2c <pvPortMalloc+0x194>)
 8006ce6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ce8:	f7fe fcfc 	bl	80056e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	f003 0307 	and.w	r3, r3, #7
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00a      	beq.n	8006d0c <pvPortMalloc+0x174>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	60fb      	str	r3, [r7, #12]
}
 8006d08:	bf00      	nop
 8006d0a:	e7fe      	b.n	8006d0a <pvPortMalloc+0x172>
	return pvReturn;
 8006d0c:	69fb      	ldr	r3, [r7, #28]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3728      	adds	r7, #40	; 0x28
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	20004f78 	.word	0x20004f78
 8006d1c:	20004f8c 	.word	0x20004f8c
 8006d20:	20004f7c 	.word	0x20004f7c
 8006d24:	20004f70 	.word	0x20004f70
 8006d28:	20004f80 	.word	0x20004f80
 8006d2c:	20004f84 	.word	0x20004f84

08006d30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d04d      	beq.n	8006dde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d42:	2308      	movs	r3, #8
 8006d44:	425b      	negs	r3, r3
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	4413      	add	r3, r2
 8006d4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	685a      	ldr	r2, [r3, #4]
 8006d54:	4b24      	ldr	r3, [pc, #144]	; (8006de8 <vPortFree+0xb8>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4013      	ands	r3, r2
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d10a      	bne.n	8006d74 <vPortFree+0x44>
	__asm volatile
 8006d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d62:	f383 8811 	msr	BASEPRI, r3
 8006d66:	f3bf 8f6f 	isb	sy
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	60fb      	str	r3, [r7, #12]
}
 8006d70:	bf00      	nop
 8006d72:	e7fe      	b.n	8006d72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00a      	beq.n	8006d92 <vPortFree+0x62>
	__asm volatile
 8006d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	60bb      	str	r3, [r7, #8]
}
 8006d8e:	bf00      	nop
 8006d90:	e7fe      	b.n	8006d90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	4b14      	ldr	r3, [pc, #80]	; (8006de8 <vPortFree+0xb8>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d01e      	beq.n	8006dde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d11a      	bne.n	8006dde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	4b0e      	ldr	r3, [pc, #56]	; (8006de8 <vPortFree+0xb8>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	43db      	mvns	r3, r3
 8006db2:	401a      	ands	r2, r3
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006db8:	f7fe fc86 	bl	80056c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	4b0a      	ldr	r3, [pc, #40]	; (8006dec <vPortFree+0xbc>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	4a09      	ldr	r2, [pc, #36]	; (8006dec <vPortFree+0xbc>)
 8006dc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006dca:	6938      	ldr	r0, [r7, #16]
 8006dcc:	f000 f874 	bl	8006eb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006dd0:	4b07      	ldr	r3, [pc, #28]	; (8006df0 <vPortFree+0xc0>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	4a06      	ldr	r2, [pc, #24]	; (8006df0 <vPortFree+0xc0>)
 8006dd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006dda:	f7fe fc83 	bl	80056e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006dde:	bf00      	nop
 8006de0:	3718      	adds	r7, #24
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	20004f8c 	.word	0x20004f8c
 8006dec:	20004f7c 	.word	0x20004f7c
 8006df0:	20004f88 	.word	0x20004f88

08006df4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006dfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006dfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e00:	4b27      	ldr	r3, [pc, #156]	; (8006ea0 <prvHeapInit+0xac>)
 8006e02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f003 0307 	and.w	r3, r3, #7
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00c      	beq.n	8006e28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	3307      	adds	r3, #7
 8006e12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f023 0307 	bic.w	r3, r3, #7
 8006e1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	4a1f      	ldr	r2, [pc, #124]	; (8006ea0 <prvHeapInit+0xac>)
 8006e24:	4413      	add	r3, r2
 8006e26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e2c:	4a1d      	ldr	r2, [pc, #116]	; (8006ea4 <prvHeapInit+0xb0>)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e32:	4b1c      	ldr	r3, [pc, #112]	; (8006ea4 <prvHeapInit+0xb0>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e40:	2208      	movs	r2, #8
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	1a9b      	subs	r3, r3, r2
 8006e46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f023 0307 	bic.w	r3, r3, #7
 8006e4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	4a15      	ldr	r2, [pc, #84]	; (8006ea8 <prvHeapInit+0xb4>)
 8006e54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e56:	4b14      	ldr	r3, [pc, #80]	; (8006ea8 <prvHeapInit+0xb4>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e5e:	4b12      	ldr	r3, [pc, #72]	; (8006ea8 <prvHeapInit+0xb4>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2200      	movs	r2, #0
 8006e64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	1ad2      	subs	r2, r2, r3
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e74:	4b0c      	ldr	r3, [pc, #48]	; (8006ea8 <prvHeapInit+0xb4>)
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	4a0a      	ldr	r2, [pc, #40]	; (8006eac <prvHeapInit+0xb8>)
 8006e82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	4a09      	ldr	r2, [pc, #36]	; (8006eb0 <prvHeapInit+0xbc>)
 8006e8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e8c:	4b09      	ldr	r3, [pc, #36]	; (8006eb4 <prvHeapInit+0xc0>)
 8006e8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006e92:	601a      	str	r2, [r3, #0]
}
 8006e94:	bf00      	nop
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr
 8006ea0:	20001370 	.word	0x20001370
 8006ea4:	20004f70 	.word	0x20004f70
 8006ea8:	20004f78 	.word	0x20004f78
 8006eac:	20004f80 	.word	0x20004f80
 8006eb0:	20004f7c 	.word	0x20004f7c
 8006eb4:	20004f8c 	.word	0x20004f8c

08006eb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ec0:	4b28      	ldr	r3, [pc, #160]	; (8006f64 <prvInsertBlockIntoFreeList+0xac>)
 8006ec2:	60fb      	str	r3, [r7, #12]
 8006ec4:	e002      	b.n	8006ecc <prvInsertBlockIntoFreeList+0x14>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	60fb      	str	r3, [r7, #12]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d8f7      	bhi.n	8006ec6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d108      	bne.n	8006efa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	441a      	add	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	441a      	add	r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d118      	bne.n	8006f40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	4b15      	ldr	r3, [pc, #84]	; (8006f68 <prvInsertBlockIntoFreeList+0xb0>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d00d      	beq.n	8006f36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685a      	ldr	r2, [r3, #4]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	441a      	add	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	e008      	b.n	8006f48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f36:	4b0c      	ldr	r3, [pc, #48]	; (8006f68 <prvInsertBlockIntoFreeList+0xb0>)
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	601a      	str	r2, [r3, #0]
 8006f3e:	e003      	b.n	8006f48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d002      	beq.n	8006f56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f56:	bf00      	nop
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	20004f70 	.word	0x20004f70
 8006f68:	20004f78 	.word	0x20004f78

08006f6c <sniprintf>:
 8006f6c:	b40c      	push	{r2, r3}
 8006f6e:	b530      	push	{r4, r5, lr}
 8006f70:	4b17      	ldr	r3, [pc, #92]	; (8006fd0 <sniprintf+0x64>)
 8006f72:	1e0c      	subs	r4, r1, #0
 8006f74:	681d      	ldr	r5, [r3, #0]
 8006f76:	b09d      	sub	sp, #116	; 0x74
 8006f78:	da08      	bge.n	8006f8c <sniprintf+0x20>
 8006f7a:	238b      	movs	r3, #139	; 0x8b
 8006f7c:	602b      	str	r3, [r5, #0]
 8006f7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f82:	b01d      	add	sp, #116	; 0x74
 8006f84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f88:	b002      	add	sp, #8
 8006f8a:	4770      	bx	lr
 8006f8c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006f90:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006f94:	bf14      	ite	ne
 8006f96:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006f9a:	4623      	moveq	r3, r4
 8006f9c:	9304      	str	r3, [sp, #16]
 8006f9e:	9307      	str	r3, [sp, #28]
 8006fa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006fa4:	9002      	str	r0, [sp, #8]
 8006fa6:	9006      	str	r0, [sp, #24]
 8006fa8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006fac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006fae:	ab21      	add	r3, sp, #132	; 0x84
 8006fb0:	a902      	add	r1, sp, #8
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	9301      	str	r3, [sp, #4]
 8006fb6:	f000 f96b 	bl	8007290 <_svfiprintf_r>
 8006fba:	1c43      	adds	r3, r0, #1
 8006fbc:	bfbc      	itt	lt
 8006fbe:	238b      	movlt	r3, #139	; 0x8b
 8006fc0:	602b      	strlt	r3, [r5, #0]
 8006fc2:	2c00      	cmp	r4, #0
 8006fc4:	d0dd      	beq.n	8006f82 <sniprintf+0x16>
 8006fc6:	9b02      	ldr	r3, [sp, #8]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	701a      	strb	r2, [r3, #0]
 8006fcc:	e7d9      	b.n	8006f82 <sniprintf+0x16>
 8006fce:	bf00      	nop
 8006fd0:	20000070 	.word	0x20000070

08006fd4 <siprintf>:
 8006fd4:	b40e      	push	{r1, r2, r3}
 8006fd6:	b500      	push	{lr}
 8006fd8:	b09c      	sub	sp, #112	; 0x70
 8006fda:	ab1d      	add	r3, sp, #116	; 0x74
 8006fdc:	9002      	str	r0, [sp, #8]
 8006fde:	9006      	str	r0, [sp, #24]
 8006fe0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006fe4:	4809      	ldr	r0, [pc, #36]	; (800700c <siprintf+0x38>)
 8006fe6:	9107      	str	r1, [sp, #28]
 8006fe8:	9104      	str	r1, [sp, #16]
 8006fea:	4909      	ldr	r1, [pc, #36]	; (8007010 <siprintf+0x3c>)
 8006fec:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ff0:	9105      	str	r1, [sp, #20]
 8006ff2:	6800      	ldr	r0, [r0, #0]
 8006ff4:	9301      	str	r3, [sp, #4]
 8006ff6:	a902      	add	r1, sp, #8
 8006ff8:	f000 f94a 	bl	8007290 <_svfiprintf_r>
 8006ffc:	9b02      	ldr	r3, [sp, #8]
 8006ffe:	2200      	movs	r2, #0
 8007000:	701a      	strb	r2, [r3, #0]
 8007002:	b01c      	add	sp, #112	; 0x70
 8007004:	f85d eb04 	ldr.w	lr, [sp], #4
 8007008:	b003      	add	sp, #12
 800700a:	4770      	bx	lr
 800700c:	20000070 	.word	0x20000070
 8007010:	ffff0208 	.word	0xffff0208

08007014 <memset>:
 8007014:	4402      	add	r2, r0
 8007016:	4603      	mov	r3, r0
 8007018:	4293      	cmp	r3, r2
 800701a:	d100      	bne.n	800701e <memset+0xa>
 800701c:	4770      	bx	lr
 800701e:	f803 1b01 	strb.w	r1, [r3], #1
 8007022:	e7f9      	b.n	8007018 <memset+0x4>

08007024 <_reclaim_reent>:
 8007024:	4b29      	ldr	r3, [pc, #164]	; (80070cc <_reclaim_reent+0xa8>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4283      	cmp	r3, r0
 800702a:	b570      	push	{r4, r5, r6, lr}
 800702c:	4604      	mov	r4, r0
 800702e:	d04b      	beq.n	80070c8 <_reclaim_reent+0xa4>
 8007030:	69c3      	ldr	r3, [r0, #28]
 8007032:	b143      	cbz	r3, 8007046 <_reclaim_reent+0x22>
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d144      	bne.n	80070c4 <_reclaim_reent+0xa0>
 800703a:	69e3      	ldr	r3, [r4, #28]
 800703c:	6819      	ldr	r1, [r3, #0]
 800703e:	b111      	cbz	r1, 8007046 <_reclaim_reent+0x22>
 8007040:	4620      	mov	r0, r4
 8007042:	f000 f87f 	bl	8007144 <_free_r>
 8007046:	6961      	ldr	r1, [r4, #20]
 8007048:	b111      	cbz	r1, 8007050 <_reclaim_reent+0x2c>
 800704a:	4620      	mov	r0, r4
 800704c:	f000 f87a 	bl	8007144 <_free_r>
 8007050:	69e1      	ldr	r1, [r4, #28]
 8007052:	b111      	cbz	r1, 800705a <_reclaim_reent+0x36>
 8007054:	4620      	mov	r0, r4
 8007056:	f000 f875 	bl	8007144 <_free_r>
 800705a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800705c:	b111      	cbz	r1, 8007064 <_reclaim_reent+0x40>
 800705e:	4620      	mov	r0, r4
 8007060:	f000 f870 	bl	8007144 <_free_r>
 8007064:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007066:	b111      	cbz	r1, 800706e <_reclaim_reent+0x4a>
 8007068:	4620      	mov	r0, r4
 800706a:	f000 f86b 	bl	8007144 <_free_r>
 800706e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007070:	b111      	cbz	r1, 8007078 <_reclaim_reent+0x54>
 8007072:	4620      	mov	r0, r4
 8007074:	f000 f866 	bl	8007144 <_free_r>
 8007078:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800707a:	b111      	cbz	r1, 8007082 <_reclaim_reent+0x5e>
 800707c:	4620      	mov	r0, r4
 800707e:	f000 f861 	bl	8007144 <_free_r>
 8007082:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007084:	b111      	cbz	r1, 800708c <_reclaim_reent+0x68>
 8007086:	4620      	mov	r0, r4
 8007088:	f000 f85c 	bl	8007144 <_free_r>
 800708c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800708e:	b111      	cbz	r1, 8007096 <_reclaim_reent+0x72>
 8007090:	4620      	mov	r0, r4
 8007092:	f000 f857 	bl	8007144 <_free_r>
 8007096:	6a23      	ldr	r3, [r4, #32]
 8007098:	b1b3      	cbz	r3, 80070c8 <_reclaim_reent+0xa4>
 800709a:	4620      	mov	r0, r4
 800709c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80070a0:	4718      	bx	r3
 80070a2:	5949      	ldr	r1, [r1, r5]
 80070a4:	b941      	cbnz	r1, 80070b8 <_reclaim_reent+0x94>
 80070a6:	3504      	adds	r5, #4
 80070a8:	69e3      	ldr	r3, [r4, #28]
 80070aa:	2d80      	cmp	r5, #128	; 0x80
 80070ac:	68d9      	ldr	r1, [r3, #12]
 80070ae:	d1f8      	bne.n	80070a2 <_reclaim_reent+0x7e>
 80070b0:	4620      	mov	r0, r4
 80070b2:	f000 f847 	bl	8007144 <_free_r>
 80070b6:	e7c0      	b.n	800703a <_reclaim_reent+0x16>
 80070b8:	680e      	ldr	r6, [r1, #0]
 80070ba:	4620      	mov	r0, r4
 80070bc:	f000 f842 	bl	8007144 <_free_r>
 80070c0:	4631      	mov	r1, r6
 80070c2:	e7ef      	b.n	80070a4 <_reclaim_reent+0x80>
 80070c4:	2500      	movs	r5, #0
 80070c6:	e7ef      	b.n	80070a8 <_reclaim_reent+0x84>
 80070c8:	bd70      	pop	{r4, r5, r6, pc}
 80070ca:	bf00      	nop
 80070cc:	20000070 	.word	0x20000070

080070d0 <__errno>:
 80070d0:	4b01      	ldr	r3, [pc, #4]	; (80070d8 <__errno+0x8>)
 80070d2:	6818      	ldr	r0, [r3, #0]
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	20000070 	.word	0x20000070

080070dc <__libc_init_array>:
 80070dc:	b570      	push	{r4, r5, r6, lr}
 80070de:	4d0d      	ldr	r5, [pc, #52]	; (8007114 <__libc_init_array+0x38>)
 80070e0:	4c0d      	ldr	r4, [pc, #52]	; (8007118 <__libc_init_array+0x3c>)
 80070e2:	1b64      	subs	r4, r4, r5
 80070e4:	10a4      	asrs	r4, r4, #2
 80070e6:	2600      	movs	r6, #0
 80070e8:	42a6      	cmp	r6, r4
 80070ea:	d109      	bne.n	8007100 <__libc_init_array+0x24>
 80070ec:	4d0b      	ldr	r5, [pc, #44]	; (800711c <__libc_init_array+0x40>)
 80070ee:	4c0c      	ldr	r4, [pc, #48]	; (8007120 <__libc_init_array+0x44>)
 80070f0:	f000 fc6a 	bl	80079c8 <_init>
 80070f4:	1b64      	subs	r4, r4, r5
 80070f6:	10a4      	asrs	r4, r4, #2
 80070f8:	2600      	movs	r6, #0
 80070fa:	42a6      	cmp	r6, r4
 80070fc:	d105      	bne.n	800710a <__libc_init_array+0x2e>
 80070fe:	bd70      	pop	{r4, r5, r6, pc}
 8007100:	f855 3b04 	ldr.w	r3, [r5], #4
 8007104:	4798      	blx	r3
 8007106:	3601      	adds	r6, #1
 8007108:	e7ee      	b.n	80070e8 <__libc_init_array+0xc>
 800710a:	f855 3b04 	ldr.w	r3, [r5], #4
 800710e:	4798      	blx	r3
 8007110:	3601      	adds	r6, #1
 8007112:	e7f2      	b.n	80070fa <__libc_init_array+0x1e>
 8007114:	08009b88 	.word	0x08009b88
 8007118:	08009b88 	.word	0x08009b88
 800711c:	08009b88 	.word	0x08009b88
 8007120:	08009b8c 	.word	0x08009b8c

08007124 <__retarget_lock_acquire_recursive>:
 8007124:	4770      	bx	lr

08007126 <__retarget_lock_release_recursive>:
 8007126:	4770      	bx	lr

08007128 <memcpy>:
 8007128:	440a      	add	r2, r1
 800712a:	4291      	cmp	r1, r2
 800712c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007130:	d100      	bne.n	8007134 <memcpy+0xc>
 8007132:	4770      	bx	lr
 8007134:	b510      	push	{r4, lr}
 8007136:	f811 4b01 	ldrb.w	r4, [r1], #1
 800713a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800713e:	4291      	cmp	r1, r2
 8007140:	d1f9      	bne.n	8007136 <memcpy+0xe>
 8007142:	bd10      	pop	{r4, pc}

08007144 <_free_r>:
 8007144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007146:	2900      	cmp	r1, #0
 8007148:	d044      	beq.n	80071d4 <_free_r+0x90>
 800714a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800714e:	9001      	str	r0, [sp, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	f1a1 0404 	sub.w	r4, r1, #4
 8007156:	bfb8      	it	lt
 8007158:	18e4      	addlt	r4, r4, r3
 800715a:	f000 fbc7 	bl	80078ec <__malloc_lock>
 800715e:	4a1e      	ldr	r2, [pc, #120]	; (80071d8 <_free_r+0x94>)
 8007160:	9801      	ldr	r0, [sp, #4]
 8007162:	6813      	ldr	r3, [r2, #0]
 8007164:	b933      	cbnz	r3, 8007174 <_free_r+0x30>
 8007166:	6063      	str	r3, [r4, #4]
 8007168:	6014      	str	r4, [r2, #0]
 800716a:	b003      	add	sp, #12
 800716c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007170:	f000 bbc2 	b.w	80078f8 <__malloc_unlock>
 8007174:	42a3      	cmp	r3, r4
 8007176:	d908      	bls.n	800718a <_free_r+0x46>
 8007178:	6825      	ldr	r5, [r4, #0]
 800717a:	1961      	adds	r1, r4, r5
 800717c:	428b      	cmp	r3, r1
 800717e:	bf01      	itttt	eq
 8007180:	6819      	ldreq	r1, [r3, #0]
 8007182:	685b      	ldreq	r3, [r3, #4]
 8007184:	1949      	addeq	r1, r1, r5
 8007186:	6021      	streq	r1, [r4, #0]
 8007188:	e7ed      	b.n	8007166 <_free_r+0x22>
 800718a:	461a      	mov	r2, r3
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	b10b      	cbz	r3, 8007194 <_free_r+0x50>
 8007190:	42a3      	cmp	r3, r4
 8007192:	d9fa      	bls.n	800718a <_free_r+0x46>
 8007194:	6811      	ldr	r1, [r2, #0]
 8007196:	1855      	adds	r5, r2, r1
 8007198:	42a5      	cmp	r5, r4
 800719a:	d10b      	bne.n	80071b4 <_free_r+0x70>
 800719c:	6824      	ldr	r4, [r4, #0]
 800719e:	4421      	add	r1, r4
 80071a0:	1854      	adds	r4, r2, r1
 80071a2:	42a3      	cmp	r3, r4
 80071a4:	6011      	str	r1, [r2, #0]
 80071a6:	d1e0      	bne.n	800716a <_free_r+0x26>
 80071a8:	681c      	ldr	r4, [r3, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	6053      	str	r3, [r2, #4]
 80071ae:	440c      	add	r4, r1
 80071b0:	6014      	str	r4, [r2, #0]
 80071b2:	e7da      	b.n	800716a <_free_r+0x26>
 80071b4:	d902      	bls.n	80071bc <_free_r+0x78>
 80071b6:	230c      	movs	r3, #12
 80071b8:	6003      	str	r3, [r0, #0]
 80071ba:	e7d6      	b.n	800716a <_free_r+0x26>
 80071bc:	6825      	ldr	r5, [r4, #0]
 80071be:	1961      	adds	r1, r4, r5
 80071c0:	428b      	cmp	r3, r1
 80071c2:	bf04      	itt	eq
 80071c4:	6819      	ldreq	r1, [r3, #0]
 80071c6:	685b      	ldreq	r3, [r3, #4]
 80071c8:	6063      	str	r3, [r4, #4]
 80071ca:	bf04      	itt	eq
 80071cc:	1949      	addeq	r1, r1, r5
 80071ce:	6021      	streq	r1, [r4, #0]
 80071d0:	6054      	str	r4, [r2, #4]
 80071d2:	e7ca      	b.n	800716a <_free_r+0x26>
 80071d4:	b003      	add	sp, #12
 80071d6:	bd30      	pop	{r4, r5, pc}
 80071d8:	200050d0 	.word	0x200050d0

080071dc <__ssputs_r>:
 80071dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071e0:	688e      	ldr	r6, [r1, #8]
 80071e2:	461f      	mov	r7, r3
 80071e4:	42be      	cmp	r6, r7
 80071e6:	680b      	ldr	r3, [r1, #0]
 80071e8:	4682      	mov	sl, r0
 80071ea:	460c      	mov	r4, r1
 80071ec:	4690      	mov	r8, r2
 80071ee:	d82c      	bhi.n	800724a <__ssputs_r+0x6e>
 80071f0:	898a      	ldrh	r2, [r1, #12]
 80071f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80071f6:	d026      	beq.n	8007246 <__ssputs_r+0x6a>
 80071f8:	6965      	ldr	r5, [r4, #20]
 80071fa:	6909      	ldr	r1, [r1, #16]
 80071fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007200:	eba3 0901 	sub.w	r9, r3, r1
 8007204:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007208:	1c7b      	adds	r3, r7, #1
 800720a:	444b      	add	r3, r9
 800720c:	106d      	asrs	r5, r5, #1
 800720e:	429d      	cmp	r5, r3
 8007210:	bf38      	it	cc
 8007212:	461d      	movcc	r5, r3
 8007214:	0553      	lsls	r3, r2, #21
 8007216:	d527      	bpl.n	8007268 <__ssputs_r+0x8c>
 8007218:	4629      	mov	r1, r5
 800721a:	f000 f957 	bl	80074cc <_malloc_r>
 800721e:	4606      	mov	r6, r0
 8007220:	b360      	cbz	r0, 800727c <__ssputs_r+0xa0>
 8007222:	6921      	ldr	r1, [r4, #16]
 8007224:	464a      	mov	r2, r9
 8007226:	f7ff ff7f 	bl	8007128 <memcpy>
 800722a:	89a3      	ldrh	r3, [r4, #12]
 800722c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007234:	81a3      	strh	r3, [r4, #12]
 8007236:	6126      	str	r6, [r4, #16]
 8007238:	6165      	str	r5, [r4, #20]
 800723a:	444e      	add	r6, r9
 800723c:	eba5 0509 	sub.w	r5, r5, r9
 8007240:	6026      	str	r6, [r4, #0]
 8007242:	60a5      	str	r5, [r4, #8]
 8007244:	463e      	mov	r6, r7
 8007246:	42be      	cmp	r6, r7
 8007248:	d900      	bls.n	800724c <__ssputs_r+0x70>
 800724a:	463e      	mov	r6, r7
 800724c:	6820      	ldr	r0, [r4, #0]
 800724e:	4632      	mov	r2, r6
 8007250:	4641      	mov	r1, r8
 8007252:	f000 fb86 	bl	8007962 <memmove>
 8007256:	68a3      	ldr	r3, [r4, #8]
 8007258:	1b9b      	subs	r3, r3, r6
 800725a:	60a3      	str	r3, [r4, #8]
 800725c:	6823      	ldr	r3, [r4, #0]
 800725e:	4433      	add	r3, r6
 8007260:	6023      	str	r3, [r4, #0]
 8007262:	2000      	movs	r0, #0
 8007264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007268:	462a      	mov	r2, r5
 800726a:	f000 fb4b 	bl	8007904 <_realloc_r>
 800726e:	4606      	mov	r6, r0
 8007270:	2800      	cmp	r0, #0
 8007272:	d1e0      	bne.n	8007236 <__ssputs_r+0x5a>
 8007274:	6921      	ldr	r1, [r4, #16]
 8007276:	4650      	mov	r0, sl
 8007278:	f7ff ff64 	bl	8007144 <_free_r>
 800727c:	230c      	movs	r3, #12
 800727e:	f8ca 3000 	str.w	r3, [sl]
 8007282:	89a3      	ldrh	r3, [r4, #12]
 8007284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007288:	81a3      	strh	r3, [r4, #12]
 800728a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800728e:	e7e9      	b.n	8007264 <__ssputs_r+0x88>

08007290 <_svfiprintf_r>:
 8007290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007294:	4698      	mov	r8, r3
 8007296:	898b      	ldrh	r3, [r1, #12]
 8007298:	061b      	lsls	r3, r3, #24
 800729a:	b09d      	sub	sp, #116	; 0x74
 800729c:	4607      	mov	r7, r0
 800729e:	460d      	mov	r5, r1
 80072a0:	4614      	mov	r4, r2
 80072a2:	d50e      	bpl.n	80072c2 <_svfiprintf_r+0x32>
 80072a4:	690b      	ldr	r3, [r1, #16]
 80072a6:	b963      	cbnz	r3, 80072c2 <_svfiprintf_r+0x32>
 80072a8:	2140      	movs	r1, #64	; 0x40
 80072aa:	f000 f90f 	bl	80074cc <_malloc_r>
 80072ae:	6028      	str	r0, [r5, #0]
 80072b0:	6128      	str	r0, [r5, #16]
 80072b2:	b920      	cbnz	r0, 80072be <_svfiprintf_r+0x2e>
 80072b4:	230c      	movs	r3, #12
 80072b6:	603b      	str	r3, [r7, #0]
 80072b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072bc:	e0d0      	b.n	8007460 <_svfiprintf_r+0x1d0>
 80072be:	2340      	movs	r3, #64	; 0x40
 80072c0:	616b      	str	r3, [r5, #20]
 80072c2:	2300      	movs	r3, #0
 80072c4:	9309      	str	r3, [sp, #36]	; 0x24
 80072c6:	2320      	movs	r3, #32
 80072c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80072d0:	2330      	movs	r3, #48	; 0x30
 80072d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007478 <_svfiprintf_r+0x1e8>
 80072d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072da:	f04f 0901 	mov.w	r9, #1
 80072de:	4623      	mov	r3, r4
 80072e0:	469a      	mov	sl, r3
 80072e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072e6:	b10a      	cbz	r2, 80072ec <_svfiprintf_r+0x5c>
 80072e8:	2a25      	cmp	r2, #37	; 0x25
 80072ea:	d1f9      	bne.n	80072e0 <_svfiprintf_r+0x50>
 80072ec:	ebba 0b04 	subs.w	fp, sl, r4
 80072f0:	d00b      	beq.n	800730a <_svfiprintf_r+0x7a>
 80072f2:	465b      	mov	r3, fp
 80072f4:	4622      	mov	r2, r4
 80072f6:	4629      	mov	r1, r5
 80072f8:	4638      	mov	r0, r7
 80072fa:	f7ff ff6f 	bl	80071dc <__ssputs_r>
 80072fe:	3001      	adds	r0, #1
 8007300:	f000 80a9 	beq.w	8007456 <_svfiprintf_r+0x1c6>
 8007304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007306:	445a      	add	r2, fp
 8007308:	9209      	str	r2, [sp, #36]	; 0x24
 800730a:	f89a 3000 	ldrb.w	r3, [sl]
 800730e:	2b00      	cmp	r3, #0
 8007310:	f000 80a1 	beq.w	8007456 <_svfiprintf_r+0x1c6>
 8007314:	2300      	movs	r3, #0
 8007316:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800731a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800731e:	f10a 0a01 	add.w	sl, sl, #1
 8007322:	9304      	str	r3, [sp, #16]
 8007324:	9307      	str	r3, [sp, #28]
 8007326:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800732a:	931a      	str	r3, [sp, #104]	; 0x68
 800732c:	4654      	mov	r4, sl
 800732e:	2205      	movs	r2, #5
 8007330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007334:	4850      	ldr	r0, [pc, #320]	; (8007478 <_svfiprintf_r+0x1e8>)
 8007336:	f7f8 ff73 	bl	8000220 <memchr>
 800733a:	9a04      	ldr	r2, [sp, #16]
 800733c:	b9d8      	cbnz	r0, 8007376 <_svfiprintf_r+0xe6>
 800733e:	06d0      	lsls	r0, r2, #27
 8007340:	bf44      	itt	mi
 8007342:	2320      	movmi	r3, #32
 8007344:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007348:	0711      	lsls	r1, r2, #28
 800734a:	bf44      	itt	mi
 800734c:	232b      	movmi	r3, #43	; 0x2b
 800734e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007352:	f89a 3000 	ldrb.w	r3, [sl]
 8007356:	2b2a      	cmp	r3, #42	; 0x2a
 8007358:	d015      	beq.n	8007386 <_svfiprintf_r+0xf6>
 800735a:	9a07      	ldr	r2, [sp, #28]
 800735c:	4654      	mov	r4, sl
 800735e:	2000      	movs	r0, #0
 8007360:	f04f 0c0a 	mov.w	ip, #10
 8007364:	4621      	mov	r1, r4
 8007366:	f811 3b01 	ldrb.w	r3, [r1], #1
 800736a:	3b30      	subs	r3, #48	; 0x30
 800736c:	2b09      	cmp	r3, #9
 800736e:	d94d      	bls.n	800740c <_svfiprintf_r+0x17c>
 8007370:	b1b0      	cbz	r0, 80073a0 <_svfiprintf_r+0x110>
 8007372:	9207      	str	r2, [sp, #28]
 8007374:	e014      	b.n	80073a0 <_svfiprintf_r+0x110>
 8007376:	eba0 0308 	sub.w	r3, r0, r8
 800737a:	fa09 f303 	lsl.w	r3, r9, r3
 800737e:	4313      	orrs	r3, r2
 8007380:	9304      	str	r3, [sp, #16]
 8007382:	46a2      	mov	sl, r4
 8007384:	e7d2      	b.n	800732c <_svfiprintf_r+0x9c>
 8007386:	9b03      	ldr	r3, [sp, #12]
 8007388:	1d19      	adds	r1, r3, #4
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	9103      	str	r1, [sp, #12]
 800738e:	2b00      	cmp	r3, #0
 8007390:	bfbb      	ittet	lt
 8007392:	425b      	neglt	r3, r3
 8007394:	f042 0202 	orrlt.w	r2, r2, #2
 8007398:	9307      	strge	r3, [sp, #28]
 800739a:	9307      	strlt	r3, [sp, #28]
 800739c:	bfb8      	it	lt
 800739e:	9204      	strlt	r2, [sp, #16]
 80073a0:	7823      	ldrb	r3, [r4, #0]
 80073a2:	2b2e      	cmp	r3, #46	; 0x2e
 80073a4:	d10c      	bne.n	80073c0 <_svfiprintf_r+0x130>
 80073a6:	7863      	ldrb	r3, [r4, #1]
 80073a8:	2b2a      	cmp	r3, #42	; 0x2a
 80073aa:	d134      	bne.n	8007416 <_svfiprintf_r+0x186>
 80073ac:	9b03      	ldr	r3, [sp, #12]
 80073ae:	1d1a      	adds	r2, r3, #4
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	9203      	str	r2, [sp, #12]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	bfb8      	it	lt
 80073b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80073bc:	3402      	adds	r4, #2
 80073be:	9305      	str	r3, [sp, #20]
 80073c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007488 <_svfiprintf_r+0x1f8>
 80073c4:	7821      	ldrb	r1, [r4, #0]
 80073c6:	2203      	movs	r2, #3
 80073c8:	4650      	mov	r0, sl
 80073ca:	f7f8 ff29 	bl	8000220 <memchr>
 80073ce:	b138      	cbz	r0, 80073e0 <_svfiprintf_r+0x150>
 80073d0:	9b04      	ldr	r3, [sp, #16]
 80073d2:	eba0 000a 	sub.w	r0, r0, sl
 80073d6:	2240      	movs	r2, #64	; 0x40
 80073d8:	4082      	lsls	r2, r0
 80073da:	4313      	orrs	r3, r2
 80073dc:	3401      	adds	r4, #1
 80073de:	9304      	str	r3, [sp, #16]
 80073e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073e4:	4825      	ldr	r0, [pc, #148]	; (800747c <_svfiprintf_r+0x1ec>)
 80073e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073ea:	2206      	movs	r2, #6
 80073ec:	f7f8 ff18 	bl	8000220 <memchr>
 80073f0:	2800      	cmp	r0, #0
 80073f2:	d038      	beq.n	8007466 <_svfiprintf_r+0x1d6>
 80073f4:	4b22      	ldr	r3, [pc, #136]	; (8007480 <_svfiprintf_r+0x1f0>)
 80073f6:	bb1b      	cbnz	r3, 8007440 <_svfiprintf_r+0x1b0>
 80073f8:	9b03      	ldr	r3, [sp, #12]
 80073fa:	3307      	adds	r3, #7
 80073fc:	f023 0307 	bic.w	r3, r3, #7
 8007400:	3308      	adds	r3, #8
 8007402:	9303      	str	r3, [sp, #12]
 8007404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007406:	4433      	add	r3, r6
 8007408:	9309      	str	r3, [sp, #36]	; 0x24
 800740a:	e768      	b.n	80072de <_svfiprintf_r+0x4e>
 800740c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007410:	460c      	mov	r4, r1
 8007412:	2001      	movs	r0, #1
 8007414:	e7a6      	b.n	8007364 <_svfiprintf_r+0xd4>
 8007416:	2300      	movs	r3, #0
 8007418:	3401      	adds	r4, #1
 800741a:	9305      	str	r3, [sp, #20]
 800741c:	4619      	mov	r1, r3
 800741e:	f04f 0c0a 	mov.w	ip, #10
 8007422:	4620      	mov	r0, r4
 8007424:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007428:	3a30      	subs	r2, #48	; 0x30
 800742a:	2a09      	cmp	r2, #9
 800742c:	d903      	bls.n	8007436 <_svfiprintf_r+0x1a6>
 800742e:	2b00      	cmp	r3, #0
 8007430:	d0c6      	beq.n	80073c0 <_svfiprintf_r+0x130>
 8007432:	9105      	str	r1, [sp, #20]
 8007434:	e7c4      	b.n	80073c0 <_svfiprintf_r+0x130>
 8007436:	fb0c 2101 	mla	r1, ip, r1, r2
 800743a:	4604      	mov	r4, r0
 800743c:	2301      	movs	r3, #1
 800743e:	e7f0      	b.n	8007422 <_svfiprintf_r+0x192>
 8007440:	ab03      	add	r3, sp, #12
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	462a      	mov	r2, r5
 8007446:	4b0f      	ldr	r3, [pc, #60]	; (8007484 <_svfiprintf_r+0x1f4>)
 8007448:	a904      	add	r1, sp, #16
 800744a:	4638      	mov	r0, r7
 800744c:	f3af 8000 	nop.w
 8007450:	1c42      	adds	r2, r0, #1
 8007452:	4606      	mov	r6, r0
 8007454:	d1d6      	bne.n	8007404 <_svfiprintf_r+0x174>
 8007456:	89ab      	ldrh	r3, [r5, #12]
 8007458:	065b      	lsls	r3, r3, #25
 800745a:	f53f af2d 	bmi.w	80072b8 <_svfiprintf_r+0x28>
 800745e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007460:	b01d      	add	sp, #116	; 0x74
 8007462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007466:	ab03      	add	r3, sp, #12
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	462a      	mov	r2, r5
 800746c:	4b05      	ldr	r3, [pc, #20]	; (8007484 <_svfiprintf_r+0x1f4>)
 800746e:	a904      	add	r1, sp, #16
 8007470:	4638      	mov	r0, r7
 8007472:	f000 f919 	bl	80076a8 <_printf_i>
 8007476:	e7eb      	b.n	8007450 <_svfiprintf_r+0x1c0>
 8007478:	08009b4c 	.word	0x08009b4c
 800747c:	08009b56 	.word	0x08009b56
 8007480:	00000000 	.word	0x00000000
 8007484:	080071dd 	.word	0x080071dd
 8007488:	08009b52 	.word	0x08009b52

0800748c <sbrk_aligned>:
 800748c:	b570      	push	{r4, r5, r6, lr}
 800748e:	4e0e      	ldr	r6, [pc, #56]	; (80074c8 <sbrk_aligned+0x3c>)
 8007490:	460c      	mov	r4, r1
 8007492:	6831      	ldr	r1, [r6, #0]
 8007494:	4605      	mov	r5, r0
 8007496:	b911      	cbnz	r1, 800749e <sbrk_aligned+0x12>
 8007498:	f000 fa7e 	bl	8007998 <_sbrk_r>
 800749c:	6030      	str	r0, [r6, #0]
 800749e:	4621      	mov	r1, r4
 80074a0:	4628      	mov	r0, r5
 80074a2:	f000 fa79 	bl	8007998 <_sbrk_r>
 80074a6:	1c43      	adds	r3, r0, #1
 80074a8:	d00a      	beq.n	80074c0 <sbrk_aligned+0x34>
 80074aa:	1cc4      	adds	r4, r0, #3
 80074ac:	f024 0403 	bic.w	r4, r4, #3
 80074b0:	42a0      	cmp	r0, r4
 80074b2:	d007      	beq.n	80074c4 <sbrk_aligned+0x38>
 80074b4:	1a21      	subs	r1, r4, r0
 80074b6:	4628      	mov	r0, r5
 80074b8:	f000 fa6e 	bl	8007998 <_sbrk_r>
 80074bc:	3001      	adds	r0, #1
 80074be:	d101      	bne.n	80074c4 <sbrk_aligned+0x38>
 80074c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80074c4:	4620      	mov	r0, r4
 80074c6:	bd70      	pop	{r4, r5, r6, pc}
 80074c8:	200050d4 	.word	0x200050d4

080074cc <_malloc_r>:
 80074cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074d0:	1ccd      	adds	r5, r1, #3
 80074d2:	f025 0503 	bic.w	r5, r5, #3
 80074d6:	3508      	adds	r5, #8
 80074d8:	2d0c      	cmp	r5, #12
 80074da:	bf38      	it	cc
 80074dc:	250c      	movcc	r5, #12
 80074de:	2d00      	cmp	r5, #0
 80074e0:	4607      	mov	r7, r0
 80074e2:	db01      	blt.n	80074e8 <_malloc_r+0x1c>
 80074e4:	42a9      	cmp	r1, r5
 80074e6:	d905      	bls.n	80074f4 <_malloc_r+0x28>
 80074e8:	230c      	movs	r3, #12
 80074ea:	603b      	str	r3, [r7, #0]
 80074ec:	2600      	movs	r6, #0
 80074ee:	4630      	mov	r0, r6
 80074f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80075c8 <_malloc_r+0xfc>
 80074f8:	f000 f9f8 	bl	80078ec <__malloc_lock>
 80074fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007500:	461c      	mov	r4, r3
 8007502:	bb5c      	cbnz	r4, 800755c <_malloc_r+0x90>
 8007504:	4629      	mov	r1, r5
 8007506:	4638      	mov	r0, r7
 8007508:	f7ff ffc0 	bl	800748c <sbrk_aligned>
 800750c:	1c43      	adds	r3, r0, #1
 800750e:	4604      	mov	r4, r0
 8007510:	d155      	bne.n	80075be <_malloc_r+0xf2>
 8007512:	f8d8 4000 	ldr.w	r4, [r8]
 8007516:	4626      	mov	r6, r4
 8007518:	2e00      	cmp	r6, #0
 800751a:	d145      	bne.n	80075a8 <_malloc_r+0xdc>
 800751c:	2c00      	cmp	r4, #0
 800751e:	d048      	beq.n	80075b2 <_malloc_r+0xe6>
 8007520:	6823      	ldr	r3, [r4, #0]
 8007522:	4631      	mov	r1, r6
 8007524:	4638      	mov	r0, r7
 8007526:	eb04 0903 	add.w	r9, r4, r3
 800752a:	f000 fa35 	bl	8007998 <_sbrk_r>
 800752e:	4581      	cmp	r9, r0
 8007530:	d13f      	bne.n	80075b2 <_malloc_r+0xe6>
 8007532:	6821      	ldr	r1, [r4, #0]
 8007534:	1a6d      	subs	r5, r5, r1
 8007536:	4629      	mov	r1, r5
 8007538:	4638      	mov	r0, r7
 800753a:	f7ff ffa7 	bl	800748c <sbrk_aligned>
 800753e:	3001      	adds	r0, #1
 8007540:	d037      	beq.n	80075b2 <_malloc_r+0xe6>
 8007542:	6823      	ldr	r3, [r4, #0]
 8007544:	442b      	add	r3, r5
 8007546:	6023      	str	r3, [r4, #0]
 8007548:	f8d8 3000 	ldr.w	r3, [r8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d038      	beq.n	80075c2 <_malloc_r+0xf6>
 8007550:	685a      	ldr	r2, [r3, #4]
 8007552:	42a2      	cmp	r2, r4
 8007554:	d12b      	bne.n	80075ae <_malloc_r+0xe2>
 8007556:	2200      	movs	r2, #0
 8007558:	605a      	str	r2, [r3, #4]
 800755a:	e00f      	b.n	800757c <_malloc_r+0xb0>
 800755c:	6822      	ldr	r2, [r4, #0]
 800755e:	1b52      	subs	r2, r2, r5
 8007560:	d41f      	bmi.n	80075a2 <_malloc_r+0xd6>
 8007562:	2a0b      	cmp	r2, #11
 8007564:	d917      	bls.n	8007596 <_malloc_r+0xca>
 8007566:	1961      	adds	r1, r4, r5
 8007568:	42a3      	cmp	r3, r4
 800756a:	6025      	str	r5, [r4, #0]
 800756c:	bf18      	it	ne
 800756e:	6059      	strne	r1, [r3, #4]
 8007570:	6863      	ldr	r3, [r4, #4]
 8007572:	bf08      	it	eq
 8007574:	f8c8 1000 	streq.w	r1, [r8]
 8007578:	5162      	str	r2, [r4, r5]
 800757a:	604b      	str	r3, [r1, #4]
 800757c:	4638      	mov	r0, r7
 800757e:	f104 060b 	add.w	r6, r4, #11
 8007582:	f000 f9b9 	bl	80078f8 <__malloc_unlock>
 8007586:	f026 0607 	bic.w	r6, r6, #7
 800758a:	1d23      	adds	r3, r4, #4
 800758c:	1af2      	subs	r2, r6, r3
 800758e:	d0ae      	beq.n	80074ee <_malloc_r+0x22>
 8007590:	1b9b      	subs	r3, r3, r6
 8007592:	50a3      	str	r3, [r4, r2]
 8007594:	e7ab      	b.n	80074ee <_malloc_r+0x22>
 8007596:	42a3      	cmp	r3, r4
 8007598:	6862      	ldr	r2, [r4, #4]
 800759a:	d1dd      	bne.n	8007558 <_malloc_r+0x8c>
 800759c:	f8c8 2000 	str.w	r2, [r8]
 80075a0:	e7ec      	b.n	800757c <_malloc_r+0xb0>
 80075a2:	4623      	mov	r3, r4
 80075a4:	6864      	ldr	r4, [r4, #4]
 80075a6:	e7ac      	b.n	8007502 <_malloc_r+0x36>
 80075a8:	4634      	mov	r4, r6
 80075aa:	6876      	ldr	r6, [r6, #4]
 80075ac:	e7b4      	b.n	8007518 <_malloc_r+0x4c>
 80075ae:	4613      	mov	r3, r2
 80075b0:	e7cc      	b.n	800754c <_malloc_r+0x80>
 80075b2:	230c      	movs	r3, #12
 80075b4:	603b      	str	r3, [r7, #0]
 80075b6:	4638      	mov	r0, r7
 80075b8:	f000 f99e 	bl	80078f8 <__malloc_unlock>
 80075bc:	e797      	b.n	80074ee <_malloc_r+0x22>
 80075be:	6025      	str	r5, [r4, #0]
 80075c0:	e7dc      	b.n	800757c <_malloc_r+0xb0>
 80075c2:	605b      	str	r3, [r3, #4]
 80075c4:	deff      	udf	#255	; 0xff
 80075c6:	bf00      	nop
 80075c8:	200050d0 	.word	0x200050d0

080075cc <_printf_common>:
 80075cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075d0:	4616      	mov	r6, r2
 80075d2:	4699      	mov	r9, r3
 80075d4:	688a      	ldr	r2, [r1, #8]
 80075d6:	690b      	ldr	r3, [r1, #16]
 80075d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80075dc:	4293      	cmp	r3, r2
 80075de:	bfb8      	it	lt
 80075e0:	4613      	movlt	r3, r2
 80075e2:	6033      	str	r3, [r6, #0]
 80075e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80075e8:	4607      	mov	r7, r0
 80075ea:	460c      	mov	r4, r1
 80075ec:	b10a      	cbz	r2, 80075f2 <_printf_common+0x26>
 80075ee:	3301      	adds	r3, #1
 80075f0:	6033      	str	r3, [r6, #0]
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	0699      	lsls	r1, r3, #26
 80075f6:	bf42      	ittt	mi
 80075f8:	6833      	ldrmi	r3, [r6, #0]
 80075fa:	3302      	addmi	r3, #2
 80075fc:	6033      	strmi	r3, [r6, #0]
 80075fe:	6825      	ldr	r5, [r4, #0]
 8007600:	f015 0506 	ands.w	r5, r5, #6
 8007604:	d106      	bne.n	8007614 <_printf_common+0x48>
 8007606:	f104 0a19 	add.w	sl, r4, #25
 800760a:	68e3      	ldr	r3, [r4, #12]
 800760c:	6832      	ldr	r2, [r6, #0]
 800760e:	1a9b      	subs	r3, r3, r2
 8007610:	42ab      	cmp	r3, r5
 8007612:	dc26      	bgt.n	8007662 <_printf_common+0x96>
 8007614:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007618:	1e13      	subs	r3, r2, #0
 800761a:	6822      	ldr	r2, [r4, #0]
 800761c:	bf18      	it	ne
 800761e:	2301      	movne	r3, #1
 8007620:	0692      	lsls	r2, r2, #26
 8007622:	d42b      	bmi.n	800767c <_printf_common+0xb0>
 8007624:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007628:	4649      	mov	r1, r9
 800762a:	4638      	mov	r0, r7
 800762c:	47c0      	blx	r8
 800762e:	3001      	adds	r0, #1
 8007630:	d01e      	beq.n	8007670 <_printf_common+0xa4>
 8007632:	6823      	ldr	r3, [r4, #0]
 8007634:	6922      	ldr	r2, [r4, #16]
 8007636:	f003 0306 	and.w	r3, r3, #6
 800763a:	2b04      	cmp	r3, #4
 800763c:	bf02      	ittt	eq
 800763e:	68e5      	ldreq	r5, [r4, #12]
 8007640:	6833      	ldreq	r3, [r6, #0]
 8007642:	1aed      	subeq	r5, r5, r3
 8007644:	68a3      	ldr	r3, [r4, #8]
 8007646:	bf0c      	ite	eq
 8007648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800764c:	2500      	movne	r5, #0
 800764e:	4293      	cmp	r3, r2
 8007650:	bfc4      	itt	gt
 8007652:	1a9b      	subgt	r3, r3, r2
 8007654:	18ed      	addgt	r5, r5, r3
 8007656:	2600      	movs	r6, #0
 8007658:	341a      	adds	r4, #26
 800765a:	42b5      	cmp	r5, r6
 800765c:	d11a      	bne.n	8007694 <_printf_common+0xc8>
 800765e:	2000      	movs	r0, #0
 8007660:	e008      	b.n	8007674 <_printf_common+0xa8>
 8007662:	2301      	movs	r3, #1
 8007664:	4652      	mov	r2, sl
 8007666:	4649      	mov	r1, r9
 8007668:	4638      	mov	r0, r7
 800766a:	47c0      	blx	r8
 800766c:	3001      	adds	r0, #1
 800766e:	d103      	bne.n	8007678 <_printf_common+0xac>
 8007670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007678:	3501      	adds	r5, #1
 800767a:	e7c6      	b.n	800760a <_printf_common+0x3e>
 800767c:	18e1      	adds	r1, r4, r3
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	2030      	movs	r0, #48	; 0x30
 8007682:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007686:	4422      	add	r2, r4
 8007688:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800768c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007690:	3302      	adds	r3, #2
 8007692:	e7c7      	b.n	8007624 <_printf_common+0x58>
 8007694:	2301      	movs	r3, #1
 8007696:	4622      	mov	r2, r4
 8007698:	4649      	mov	r1, r9
 800769a:	4638      	mov	r0, r7
 800769c:	47c0      	blx	r8
 800769e:	3001      	adds	r0, #1
 80076a0:	d0e6      	beq.n	8007670 <_printf_common+0xa4>
 80076a2:	3601      	adds	r6, #1
 80076a4:	e7d9      	b.n	800765a <_printf_common+0x8e>
	...

080076a8 <_printf_i>:
 80076a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076ac:	7e0f      	ldrb	r7, [r1, #24]
 80076ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076b0:	2f78      	cmp	r7, #120	; 0x78
 80076b2:	4691      	mov	r9, r2
 80076b4:	4680      	mov	r8, r0
 80076b6:	460c      	mov	r4, r1
 80076b8:	469a      	mov	sl, r3
 80076ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80076be:	d807      	bhi.n	80076d0 <_printf_i+0x28>
 80076c0:	2f62      	cmp	r7, #98	; 0x62
 80076c2:	d80a      	bhi.n	80076da <_printf_i+0x32>
 80076c4:	2f00      	cmp	r7, #0
 80076c6:	f000 80d4 	beq.w	8007872 <_printf_i+0x1ca>
 80076ca:	2f58      	cmp	r7, #88	; 0x58
 80076cc:	f000 80c0 	beq.w	8007850 <_printf_i+0x1a8>
 80076d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80076d8:	e03a      	b.n	8007750 <_printf_i+0xa8>
 80076da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80076de:	2b15      	cmp	r3, #21
 80076e0:	d8f6      	bhi.n	80076d0 <_printf_i+0x28>
 80076e2:	a101      	add	r1, pc, #4	; (adr r1, 80076e8 <_printf_i+0x40>)
 80076e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076e8:	08007741 	.word	0x08007741
 80076ec:	08007755 	.word	0x08007755
 80076f0:	080076d1 	.word	0x080076d1
 80076f4:	080076d1 	.word	0x080076d1
 80076f8:	080076d1 	.word	0x080076d1
 80076fc:	080076d1 	.word	0x080076d1
 8007700:	08007755 	.word	0x08007755
 8007704:	080076d1 	.word	0x080076d1
 8007708:	080076d1 	.word	0x080076d1
 800770c:	080076d1 	.word	0x080076d1
 8007710:	080076d1 	.word	0x080076d1
 8007714:	08007859 	.word	0x08007859
 8007718:	08007781 	.word	0x08007781
 800771c:	08007813 	.word	0x08007813
 8007720:	080076d1 	.word	0x080076d1
 8007724:	080076d1 	.word	0x080076d1
 8007728:	0800787b 	.word	0x0800787b
 800772c:	080076d1 	.word	0x080076d1
 8007730:	08007781 	.word	0x08007781
 8007734:	080076d1 	.word	0x080076d1
 8007738:	080076d1 	.word	0x080076d1
 800773c:	0800781b 	.word	0x0800781b
 8007740:	682b      	ldr	r3, [r5, #0]
 8007742:	1d1a      	adds	r2, r3, #4
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	602a      	str	r2, [r5, #0]
 8007748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800774c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007750:	2301      	movs	r3, #1
 8007752:	e09f      	b.n	8007894 <_printf_i+0x1ec>
 8007754:	6820      	ldr	r0, [r4, #0]
 8007756:	682b      	ldr	r3, [r5, #0]
 8007758:	0607      	lsls	r7, r0, #24
 800775a:	f103 0104 	add.w	r1, r3, #4
 800775e:	6029      	str	r1, [r5, #0]
 8007760:	d501      	bpl.n	8007766 <_printf_i+0xbe>
 8007762:	681e      	ldr	r6, [r3, #0]
 8007764:	e003      	b.n	800776e <_printf_i+0xc6>
 8007766:	0646      	lsls	r6, r0, #25
 8007768:	d5fb      	bpl.n	8007762 <_printf_i+0xba>
 800776a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800776e:	2e00      	cmp	r6, #0
 8007770:	da03      	bge.n	800777a <_printf_i+0xd2>
 8007772:	232d      	movs	r3, #45	; 0x2d
 8007774:	4276      	negs	r6, r6
 8007776:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800777a:	485a      	ldr	r0, [pc, #360]	; (80078e4 <_printf_i+0x23c>)
 800777c:	230a      	movs	r3, #10
 800777e:	e012      	b.n	80077a6 <_printf_i+0xfe>
 8007780:	682b      	ldr	r3, [r5, #0]
 8007782:	6820      	ldr	r0, [r4, #0]
 8007784:	1d19      	adds	r1, r3, #4
 8007786:	6029      	str	r1, [r5, #0]
 8007788:	0605      	lsls	r5, r0, #24
 800778a:	d501      	bpl.n	8007790 <_printf_i+0xe8>
 800778c:	681e      	ldr	r6, [r3, #0]
 800778e:	e002      	b.n	8007796 <_printf_i+0xee>
 8007790:	0641      	lsls	r1, r0, #25
 8007792:	d5fb      	bpl.n	800778c <_printf_i+0xe4>
 8007794:	881e      	ldrh	r6, [r3, #0]
 8007796:	4853      	ldr	r0, [pc, #332]	; (80078e4 <_printf_i+0x23c>)
 8007798:	2f6f      	cmp	r7, #111	; 0x6f
 800779a:	bf0c      	ite	eq
 800779c:	2308      	moveq	r3, #8
 800779e:	230a      	movne	r3, #10
 80077a0:	2100      	movs	r1, #0
 80077a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077a6:	6865      	ldr	r5, [r4, #4]
 80077a8:	60a5      	str	r5, [r4, #8]
 80077aa:	2d00      	cmp	r5, #0
 80077ac:	bfa2      	ittt	ge
 80077ae:	6821      	ldrge	r1, [r4, #0]
 80077b0:	f021 0104 	bicge.w	r1, r1, #4
 80077b4:	6021      	strge	r1, [r4, #0]
 80077b6:	b90e      	cbnz	r6, 80077bc <_printf_i+0x114>
 80077b8:	2d00      	cmp	r5, #0
 80077ba:	d04b      	beq.n	8007854 <_printf_i+0x1ac>
 80077bc:	4615      	mov	r5, r2
 80077be:	fbb6 f1f3 	udiv	r1, r6, r3
 80077c2:	fb03 6711 	mls	r7, r3, r1, r6
 80077c6:	5dc7      	ldrb	r7, [r0, r7]
 80077c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80077cc:	4637      	mov	r7, r6
 80077ce:	42bb      	cmp	r3, r7
 80077d0:	460e      	mov	r6, r1
 80077d2:	d9f4      	bls.n	80077be <_printf_i+0x116>
 80077d4:	2b08      	cmp	r3, #8
 80077d6:	d10b      	bne.n	80077f0 <_printf_i+0x148>
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	07de      	lsls	r6, r3, #31
 80077dc:	d508      	bpl.n	80077f0 <_printf_i+0x148>
 80077de:	6923      	ldr	r3, [r4, #16]
 80077e0:	6861      	ldr	r1, [r4, #4]
 80077e2:	4299      	cmp	r1, r3
 80077e4:	bfde      	ittt	le
 80077e6:	2330      	movle	r3, #48	; 0x30
 80077e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80077ec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80077f0:	1b52      	subs	r2, r2, r5
 80077f2:	6122      	str	r2, [r4, #16]
 80077f4:	f8cd a000 	str.w	sl, [sp]
 80077f8:	464b      	mov	r3, r9
 80077fa:	aa03      	add	r2, sp, #12
 80077fc:	4621      	mov	r1, r4
 80077fe:	4640      	mov	r0, r8
 8007800:	f7ff fee4 	bl	80075cc <_printf_common>
 8007804:	3001      	adds	r0, #1
 8007806:	d14a      	bne.n	800789e <_printf_i+0x1f6>
 8007808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800780c:	b004      	add	sp, #16
 800780e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007812:	6823      	ldr	r3, [r4, #0]
 8007814:	f043 0320 	orr.w	r3, r3, #32
 8007818:	6023      	str	r3, [r4, #0]
 800781a:	4833      	ldr	r0, [pc, #204]	; (80078e8 <_printf_i+0x240>)
 800781c:	2778      	movs	r7, #120	; 0x78
 800781e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007822:	6823      	ldr	r3, [r4, #0]
 8007824:	6829      	ldr	r1, [r5, #0]
 8007826:	061f      	lsls	r7, r3, #24
 8007828:	f851 6b04 	ldr.w	r6, [r1], #4
 800782c:	d402      	bmi.n	8007834 <_printf_i+0x18c>
 800782e:	065f      	lsls	r7, r3, #25
 8007830:	bf48      	it	mi
 8007832:	b2b6      	uxthmi	r6, r6
 8007834:	07df      	lsls	r7, r3, #31
 8007836:	bf48      	it	mi
 8007838:	f043 0320 	orrmi.w	r3, r3, #32
 800783c:	6029      	str	r1, [r5, #0]
 800783e:	bf48      	it	mi
 8007840:	6023      	strmi	r3, [r4, #0]
 8007842:	b91e      	cbnz	r6, 800784c <_printf_i+0x1a4>
 8007844:	6823      	ldr	r3, [r4, #0]
 8007846:	f023 0320 	bic.w	r3, r3, #32
 800784a:	6023      	str	r3, [r4, #0]
 800784c:	2310      	movs	r3, #16
 800784e:	e7a7      	b.n	80077a0 <_printf_i+0xf8>
 8007850:	4824      	ldr	r0, [pc, #144]	; (80078e4 <_printf_i+0x23c>)
 8007852:	e7e4      	b.n	800781e <_printf_i+0x176>
 8007854:	4615      	mov	r5, r2
 8007856:	e7bd      	b.n	80077d4 <_printf_i+0x12c>
 8007858:	682b      	ldr	r3, [r5, #0]
 800785a:	6826      	ldr	r6, [r4, #0]
 800785c:	6961      	ldr	r1, [r4, #20]
 800785e:	1d18      	adds	r0, r3, #4
 8007860:	6028      	str	r0, [r5, #0]
 8007862:	0635      	lsls	r5, r6, #24
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	d501      	bpl.n	800786c <_printf_i+0x1c4>
 8007868:	6019      	str	r1, [r3, #0]
 800786a:	e002      	b.n	8007872 <_printf_i+0x1ca>
 800786c:	0670      	lsls	r0, r6, #25
 800786e:	d5fb      	bpl.n	8007868 <_printf_i+0x1c0>
 8007870:	8019      	strh	r1, [r3, #0]
 8007872:	2300      	movs	r3, #0
 8007874:	6123      	str	r3, [r4, #16]
 8007876:	4615      	mov	r5, r2
 8007878:	e7bc      	b.n	80077f4 <_printf_i+0x14c>
 800787a:	682b      	ldr	r3, [r5, #0]
 800787c:	1d1a      	adds	r2, r3, #4
 800787e:	602a      	str	r2, [r5, #0]
 8007880:	681d      	ldr	r5, [r3, #0]
 8007882:	6862      	ldr	r2, [r4, #4]
 8007884:	2100      	movs	r1, #0
 8007886:	4628      	mov	r0, r5
 8007888:	f7f8 fcca 	bl	8000220 <memchr>
 800788c:	b108      	cbz	r0, 8007892 <_printf_i+0x1ea>
 800788e:	1b40      	subs	r0, r0, r5
 8007890:	6060      	str	r0, [r4, #4]
 8007892:	6863      	ldr	r3, [r4, #4]
 8007894:	6123      	str	r3, [r4, #16]
 8007896:	2300      	movs	r3, #0
 8007898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800789c:	e7aa      	b.n	80077f4 <_printf_i+0x14c>
 800789e:	6923      	ldr	r3, [r4, #16]
 80078a0:	462a      	mov	r2, r5
 80078a2:	4649      	mov	r1, r9
 80078a4:	4640      	mov	r0, r8
 80078a6:	47d0      	blx	sl
 80078a8:	3001      	adds	r0, #1
 80078aa:	d0ad      	beq.n	8007808 <_printf_i+0x160>
 80078ac:	6823      	ldr	r3, [r4, #0]
 80078ae:	079b      	lsls	r3, r3, #30
 80078b0:	d413      	bmi.n	80078da <_printf_i+0x232>
 80078b2:	68e0      	ldr	r0, [r4, #12]
 80078b4:	9b03      	ldr	r3, [sp, #12]
 80078b6:	4298      	cmp	r0, r3
 80078b8:	bfb8      	it	lt
 80078ba:	4618      	movlt	r0, r3
 80078bc:	e7a6      	b.n	800780c <_printf_i+0x164>
 80078be:	2301      	movs	r3, #1
 80078c0:	4632      	mov	r2, r6
 80078c2:	4649      	mov	r1, r9
 80078c4:	4640      	mov	r0, r8
 80078c6:	47d0      	blx	sl
 80078c8:	3001      	adds	r0, #1
 80078ca:	d09d      	beq.n	8007808 <_printf_i+0x160>
 80078cc:	3501      	adds	r5, #1
 80078ce:	68e3      	ldr	r3, [r4, #12]
 80078d0:	9903      	ldr	r1, [sp, #12]
 80078d2:	1a5b      	subs	r3, r3, r1
 80078d4:	42ab      	cmp	r3, r5
 80078d6:	dcf2      	bgt.n	80078be <_printf_i+0x216>
 80078d8:	e7eb      	b.n	80078b2 <_printf_i+0x20a>
 80078da:	2500      	movs	r5, #0
 80078dc:	f104 0619 	add.w	r6, r4, #25
 80078e0:	e7f5      	b.n	80078ce <_printf_i+0x226>
 80078e2:	bf00      	nop
 80078e4:	08009b5d 	.word	0x08009b5d
 80078e8:	08009b6e 	.word	0x08009b6e

080078ec <__malloc_lock>:
 80078ec:	4801      	ldr	r0, [pc, #4]	; (80078f4 <__malloc_lock+0x8>)
 80078ee:	f7ff bc19 	b.w	8007124 <__retarget_lock_acquire_recursive>
 80078f2:	bf00      	nop
 80078f4:	200050cc 	.word	0x200050cc

080078f8 <__malloc_unlock>:
 80078f8:	4801      	ldr	r0, [pc, #4]	; (8007900 <__malloc_unlock+0x8>)
 80078fa:	f7ff bc14 	b.w	8007126 <__retarget_lock_release_recursive>
 80078fe:	bf00      	nop
 8007900:	200050cc 	.word	0x200050cc

08007904 <_realloc_r>:
 8007904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007908:	4680      	mov	r8, r0
 800790a:	4614      	mov	r4, r2
 800790c:	460e      	mov	r6, r1
 800790e:	b921      	cbnz	r1, 800791a <_realloc_r+0x16>
 8007910:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007914:	4611      	mov	r1, r2
 8007916:	f7ff bdd9 	b.w	80074cc <_malloc_r>
 800791a:	b92a      	cbnz	r2, 8007928 <_realloc_r+0x24>
 800791c:	f7ff fc12 	bl	8007144 <_free_r>
 8007920:	4625      	mov	r5, r4
 8007922:	4628      	mov	r0, r5
 8007924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007928:	f000 f846 	bl	80079b8 <_malloc_usable_size_r>
 800792c:	4284      	cmp	r4, r0
 800792e:	4607      	mov	r7, r0
 8007930:	d802      	bhi.n	8007938 <_realloc_r+0x34>
 8007932:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007936:	d812      	bhi.n	800795e <_realloc_r+0x5a>
 8007938:	4621      	mov	r1, r4
 800793a:	4640      	mov	r0, r8
 800793c:	f7ff fdc6 	bl	80074cc <_malloc_r>
 8007940:	4605      	mov	r5, r0
 8007942:	2800      	cmp	r0, #0
 8007944:	d0ed      	beq.n	8007922 <_realloc_r+0x1e>
 8007946:	42bc      	cmp	r4, r7
 8007948:	4622      	mov	r2, r4
 800794a:	4631      	mov	r1, r6
 800794c:	bf28      	it	cs
 800794e:	463a      	movcs	r2, r7
 8007950:	f7ff fbea 	bl	8007128 <memcpy>
 8007954:	4631      	mov	r1, r6
 8007956:	4640      	mov	r0, r8
 8007958:	f7ff fbf4 	bl	8007144 <_free_r>
 800795c:	e7e1      	b.n	8007922 <_realloc_r+0x1e>
 800795e:	4635      	mov	r5, r6
 8007960:	e7df      	b.n	8007922 <_realloc_r+0x1e>

08007962 <memmove>:
 8007962:	4288      	cmp	r0, r1
 8007964:	b510      	push	{r4, lr}
 8007966:	eb01 0402 	add.w	r4, r1, r2
 800796a:	d902      	bls.n	8007972 <memmove+0x10>
 800796c:	4284      	cmp	r4, r0
 800796e:	4623      	mov	r3, r4
 8007970:	d807      	bhi.n	8007982 <memmove+0x20>
 8007972:	1e43      	subs	r3, r0, #1
 8007974:	42a1      	cmp	r1, r4
 8007976:	d008      	beq.n	800798a <memmove+0x28>
 8007978:	f811 2b01 	ldrb.w	r2, [r1], #1
 800797c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007980:	e7f8      	b.n	8007974 <memmove+0x12>
 8007982:	4402      	add	r2, r0
 8007984:	4601      	mov	r1, r0
 8007986:	428a      	cmp	r2, r1
 8007988:	d100      	bne.n	800798c <memmove+0x2a>
 800798a:	bd10      	pop	{r4, pc}
 800798c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007990:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007994:	e7f7      	b.n	8007986 <memmove+0x24>
	...

08007998 <_sbrk_r>:
 8007998:	b538      	push	{r3, r4, r5, lr}
 800799a:	4d06      	ldr	r5, [pc, #24]	; (80079b4 <_sbrk_r+0x1c>)
 800799c:	2300      	movs	r3, #0
 800799e:	4604      	mov	r4, r0
 80079a0:	4608      	mov	r0, r1
 80079a2:	602b      	str	r3, [r5, #0]
 80079a4:	f7f9 fef6 	bl	8001794 <_sbrk>
 80079a8:	1c43      	adds	r3, r0, #1
 80079aa:	d102      	bne.n	80079b2 <_sbrk_r+0x1a>
 80079ac:	682b      	ldr	r3, [r5, #0]
 80079ae:	b103      	cbz	r3, 80079b2 <_sbrk_r+0x1a>
 80079b0:	6023      	str	r3, [r4, #0]
 80079b2:	bd38      	pop	{r3, r4, r5, pc}
 80079b4:	200050c8 	.word	0x200050c8

080079b8 <_malloc_usable_size_r>:
 80079b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079bc:	1f18      	subs	r0, r3, #4
 80079be:	2b00      	cmp	r3, #0
 80079c0:	bfbc      	itt	lt
 80079c2:	580b      	ldrlt	r3, [r1, r0]
 80079c4:	18c0      	addlt	r0, r0, r3
 80079c6:	4770      	bx	lr

080079c8 <_init>:
 80079c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ca:	bf00      	nop
 80079cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ce:	bc08      	pop	{r3}
 80079d0:	469e      	mov	lr, r3
 80079d2:	4770      	bx	lr

080079d4 <_fini>:
 80079d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d6:	bf00      	nop
 80079d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079da:	bc08      	pop	{r3}
 80079dc:	469e      	mov	lr, r3
 80079de:	4770      	bx	lr
