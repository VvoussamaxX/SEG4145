
ADC_Single_Channel_Potentiometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a648  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024bc  0800a818  0800a818  0001a818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ccd4  0800ccd4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ccd4  0800ccd4  0001ccd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ccdc  0800ccdc  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ccdc  0800ccdc  0001ccdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cce0  0800cce0  0001cce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800cce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000509c  200001e8  0800cecc  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005284  0800cecc  00025284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001da5b  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f30  00000000  00000000  0003dcb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019c8  00000000  00000000  00041be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000142c  00000000  00000000  000435b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002663a  00000000  00000000  000449dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e234  00000000  00000000  0006b016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec8fe  00000000  00000000  0008924a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007f48  00000000  00000000  00175b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  0017da90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a800 	.word	0x0800a800

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800a800 	.word	0x0800a800

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <uart2_write>:
//uint32_t sensorValue = 0, value = 0;
uint32_t sensorValue = 0;
float fvoltage = 0;

int uart2_write(int ch)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & USART_SR_TXE)){}
 8000f8c:	bf00      	nop
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <uart2_write+0x2c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0f9      	beq.n	8000f8e <uart2_write+0xa>

	 /*Write to transmit data register*/
	USART2->DR	=  (ch & 0xFF);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <uart2_write+0x2c>)
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	6053      	str	r3, [r2, #4]
	return ch;
 8000fa2:	687b      	ldr	r3, [r7, #4]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	40004400 	.word	0x40004400

08000fb4 <__io_putchar>:

int __io_putchar(int ch)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ffe1 	bl	8000f84 <uart2_write>
	return ch;
 8000fc2:	687b      	ldr	r3, [r7, #4]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd0:	f000 ff76 	bl	8001ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd4:	f000 f842 	bl	800105c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd8:	f000 f956 	bl	8001288 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000fdc:	f000 f8aa 	bl	8001134 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000fe0:	f000 f928 	bl	8001234 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000fe4:	f000 f8f8 	bl	80011d8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8000fe8:	f000 fa0e 	bl	8001408 <SSD1306_Init>
  SSD1306_Clear();
 8000fec:	f000 fc31 	bl	8001852 <SSD1306_Clear>
  SSD1306_GotoXY(0, 0);
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f000 fb72 	bl	80016dc <SSD1306_GotoXY>
  SSD1306_Puts("Voltage: ", &Font_11x18, 1);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	490f      	ldr	r1, [pc, #60]	; (8001038 <main+0x6c>)
 8000ffc:	480f      	ldr	r0, [pc, #60]	; (800103c <main+0x70>)
 8000ffe:	f000 fc03 	bl	8001808 <SSD1306_Puts>
  MX_I2C1_Init();
 8001002:	f000 f8e9 	bl	80011d8 <MX_I2C1_Init>
  HAL_ADC_Start(&hadc1);
 8001006:	480e      	ldr	r0, [pc, #56]	; (8001040 <main+0x74>)
 8001008:	f001 f804 	bl	8002014 <HAL_ADC_Start>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800100c:	f003 ffa0 	bl	8004f50 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OLEDTask */
  OLEDTaskHandle = osThreadNew(StartTask02, NULL, &OLEDTask_attributes);
 8001010:	4a0c      	ldr	r2, [pc, #48]	; (8001044 <main+0x78>)
 8001012:	2100      	movs	r1, #0
 8001014:	480c      	ldr	r0, [pc, #48]	; (8001048 <main+0x7c>)
 8001016:	f003 ffe5 	bl	8004fe4 <osThreadNew>
 800101a:	4603      	mov	r3, r0
 800101c:	4a0b      	ldr	r2, [pc, #44]	; (800104c <main+0x80>)
 800101e:	6013      	str	r3, [r2, #0]

  /* creation of VoltageTask */
  VoltageTaskHandle = osThreadNew(StartTask01, NULL, &VoltageTask_attributes);
 8001020:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <main+0x84>)
 8001022:	2100      	movs	r1, #0
 8001024:	480b      	ldr	r0, [pc, #44]	; (8001054 <main+0x88>)
 8001026:	f003 ffdd 	bl	8004fe4 <osThreadNew>
 800102a:	4603      	mov	r3, r0
 800102c:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <main+0x8c>)
 800102e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001030:	f003 ffb2 	bl	8004f98 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001034:	e7fe      	b.n	8001034 <main+0x68>
 8001036:	bf00      	nop
 8001038:	20000000 	.word	0x20000000
 800103c:	0800a830 	.word	0x0800a830
 8001040:	20000204 	.word	0x20000204
 8001044:	0800c904 	.word	0x0800c904
 8001048:	08001385 	.word	0x08001385
 800104c:	200002e8 	.word	0x200002e8
 8001050:	0800c928 	.word	0x0800c928
 8001054:	08001311 	.word	0x08001311
 8001058:	200002ec 	.word	0x200002ec

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b094      	sub	sp, #80	; 0x50
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	2234      	movs	r2, #52	; 0x34
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f007 fa36 	bl	80084dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	f107 0308 	add.w	r3, r7, #8
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	4b29      	ldr	r3, [pc, #164]	; (800112c <SystemClock_Config+0xd0>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	4a28      	ldr	r2, [pc, #160]	; (800112c <SystemClock_Config+0xd0>)
 800108a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108e:	6413      	str	r3, [r2, #64]	; 0x40
 8001090:	4b26      	ldr	r3, [pc, #152]	; (800112c <SystemClock_Config+0xd0>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800109c:	2300      	movs	r3, #0
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	4b23      	ldr	r3, [pc, #140]	; (8001130 <SystemClock_Config+0xd4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010a8:	4a21      	ldr	r2, [pc, #132]	; (8001130 <SystemClock_Config+0xd4>)
 80010aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <SystemClock_Config+0xd4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010bc:	2302      	movs	r3, #2
 80010be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c0:	2301      	movs	r3, #1
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c4:	2310      	movs	r3, #16
 80010c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c8:	2302      	movs	r3, #2
 80010ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010cc:	2300      	movs	r3, #0
 80010ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010d0:	2308      	movs	r3, #8
 80010d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 80010d4:	2340      	movs	r3, #64	; 0x40
 80010d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d8:	2302      	movs	r3, #2
 80010da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010dc:	2302      	movs	r3, #2
 80010de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010e0:	2302      	movs	r3, #2
 80010e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	4618      	mov	r0, r3
 80010ea:	f002 fee9 	bl	8003ec0 <HAL_RCC_OscConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80010f4:	f000 f982 	bl	80013fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f8:	230f      	movs	r3, #15
 80010fa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fc:	2302      	movs	r3, #2
 80010fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001108:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	2102      	movs	r1, #2
 8001114:	4618      	mov	r0, r3
 8001116:	f002 fb57 	bl	80037c8 <HAL_RCC_ClockConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001120:	f000 f96c 	bl	80013fc <Error_Handler>
  }
}
 8001124:	bf00      	nop
 8001126:	3750      	adds	r7, #80	; 0x50
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40023800 	.word	0x40023800
 8001130:	40007000 	.word	0x40007000

08001134 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800113a:	463b      	mov	r3, r7
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001146:	4b21      	ldr	r3, [pc, #132]	; (80011cc <MX_ADC1_Init+0x98>)
 8001148:	4a21      	ldr	r2, [pc, #132]	; (80011d0 <MX_ADC1_Init+0x9c>)
 800114a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800114c:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <MX_ADC1_Init+0x98>)
 800114e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001152:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001154:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <MX_ADC1_Init+0x98>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <MX_ADC1_Init+0x98>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <MX_ADC1_Init+0x98>)
 8001162:	2201      	movs	r2, #1
 8001164:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001166:	4b19      	ldr	r3, [pc, #100]	; (80011cc <MX_ADC1_Init+0x98>)
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <MX_ADC1_Init+0x98>)
 8001170:	2200      	movs	r2, #0
 8001172:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001174:	4b15      	ldr	r3, [pc, #84]	; (80011cc <MX_ADC1_Init+0x98>)
 8001176:	4a17      	ldr	r2, [pc, #92]	; (80011d4 <MX_ADC1_Init+0xa0>)
 8001178:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <MX_ADC1_Init+0x98>)
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <MX_ADC1_Init+0x98>)
 8001182:	2201      	movs	r2, #1
 8001184:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MX_ADC1_Init+0x98>)
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <MX_ADC1_Init+0x98>)
 8001190:	2201      	movs	r2, #1
 8001192:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001194:	480d      	ldr	r0, [pc, #52]	; (80011cc <MX_ADC1_Init+0x98>)
 8001196:	f000 fef9 	bl	8001f8c <HAL_ADC_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011a0:	f000 f92c 	bl	80013fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b0:	463b      	mov	r3, r7
 80011b2:	4619      	mov	r1, r3
 80011b4:	4805      	ldr	r0, [pc, #20]	; (80011cc <MX_ADC1_Init+0x98>)
 80011b6:	f001 f897 	bl	80022e8 <HAL_ADC_ConfigChannel>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011c0:	f000 f91c 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000204 	.word	0x20000204
 80011d0:	40012000 	.word	0x40012000
 80011d4:	0f000001 	.word	0x0f000001

080011d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <MX_I2C1_Init+0x50>)
 80011de:	4a13      	ldr	r2, [pc, #76]	; (800122c <MX_I2C1_Init+0x54>)
 80011e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_I2C1_Init+0x50>)
 80011e4:	4a12      	ldr	r2, [pc, #72]	; (8001230 <MX_I2C1_Init+0x58>)
 80011e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <MX_I2C1_Init+0x50>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <MX_I2C1_Init+0x50>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_I2C1_Init+0x50>)
 80011f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <MX_I2C1_Init+0x50>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_I2C1_Init+0x50>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <MX_I2C1_Init+0x50>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <MX_I2C1_Init+0x50>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001214:	4804      	ldr	r0, [pc, #16]	; (8001228 <MX_I2C1_Init+0x50>)
 8001216:	f001 fd0b 	bl	8002c30 <HAL_I2C_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001220:	f000 f8ec 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	2000024c 	.word	0x2000024c
 800122c:	40005400 	.word	0x40005400
 8001230:	00061a80 	.word	0x00061a80

08001234 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <MX_USART2_UART_Init+0x4c>)
 800123a:	4a12      	ldr	r2, [pc, #72]	; (8001284 <MX_USART2_UART_Init+0x50>)
 800123c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <MX_USART2_UART_Init+0x4c>)
 8001240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001244:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <MX_USART2_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_USART2_UART_Init+0x4c>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <MX_USART2_UART_Init+0x4c>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_USART2_UART_Init+0x4c>)
 800125a:	220c      	movs	r2, #12
 800125c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <MX_USART2_UART_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_USART2_UART_Init+0x4c>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_USART2_UART_Init+0x4c>)
 800126c:	f003 fb68 	bl	8004940 <HAL_UART_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001276:	f000 f8c1 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200002a0 	.word	0x200002a0
 8001284:	40004400 	.word	0x40004400

08001288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b1e      	ldr	r3, [pc, #120]	; (800130c <MX_GPIO_Init+0x84>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a1d      	ldr	r2, [pc, #116]	; (800130c <MX_GPIO_Init+0x84>)
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b1b      	ldr	r3, [pc, #108]	; (800130c <MX_GPIO_Init+0x84>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	4b17      	ldr	r3, [pc, #92]	; (800130c <MX_GPIO_Init+0x84>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a16      	ldr	r2, [pc, #88]	; (800130c <MX_GPIO_Init+0x84>)
 80012b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b14      	ldr	r3, [pc, #80]	; (800130c <MX_GPIO_Init+0x84>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <MX_GPIO_Init+0x84>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a0f      	ldr	r2, [pc, #60]	; (800130c <MX_GPIO_Init+0x84>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b0d      	ldr	r3, [pc, #52]	; (800130c <MX_GPIO_Init+0x84>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_GPIO_Init+0x84>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a08      	ldr	r2, [pc, #32]	; (800130c <MX_GPIO_Init+0x84>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_GPIO_Init+0x84>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800

08001310 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 8001318:	4817      	ldr	r0, [pc, #92]	; (8001378 <StartTask01+0x68>)
 800131a:	f000 fe7b 	bl	8002014 <HAL_ADC_Start>

		 /*2. Poll for conversion */
		 HAL_ADC_PollForConversion(&hadc1,1);
 800131e:	2101      	movs	r1, #1
 8001320:	4815      	ldr	r0, [pc, #84]	; (8001378 <StartTask01+0x68>)
 8001322:	f000 ff49 	bl	80021b8 <HAL_ADC_PollForConversion>

		 /*3. Get conversion */
		 sensorValue = HAL_ADC_GetValue(&hadc1);
 8001326:	4814      	ldr	r0, [pc, #80]	; (8001378 <StartTask01+0x68>)
 8001328:	f000 ffd1 	bl	80022ce <HAL_ADC_GetValue>
 800132c:	4603      	mov	r3, r0
 800132e:	4a13      	ldr	r2, [pc, #76]	; (800137c <StartTask01+0x6c>)
 8001330:	6013      	str	r3, [r2, #0]
		 fvoltage = (float)sensorValue * (3.3/4095.0);
 8001332:	4b12      	ldr	r3, [pc, #72]	; (800137c <StartTask01+0x6c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	ee07 3a90 	vmov	s15, r3
 800133a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800133e:	ee17 0a90 	vmov	r0, s15
 8001342:	f7ff f921 	bl	8000588 <__aeabi_f2d>
 8001346:	a30a      	add	r3, pc, #40	; (adr r3, 8001370 <StartTask01+0x60>)
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	f7ff f974 	bl	8000638 <__aeabi_dmul>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	f7ff fc46 	bl	8000be8 <__aeabi_d2f>
 800135c:	4603      	mov	r3, r0
 800135e:	4a08      	ldr	r2, [pc, #32]	; (8001380 <StartTask01+0x70>)
 8001360:	6013      	str	r3, [r2, #0]

		 HAL_Delay(500);
 8001362:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001366:	f000 fded 	bl	8001f44 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 800136a:	e7d5      	b.n	8001318 <StartTask01+0x8>
 800136c:	f3af 8000 	nop.w
 8001370:	e734d9b4 	.word	0xe734d9b4
 8001374:	3f4a680c 	.word	0x3f4a680c
 8001378:	20000204 	.word	0x20000204
 800137c:	200002f0 	.word	0x200002f0
 8001380:	200002f4 	.word	0x200002f4

08001384 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  SSD1306_Clear();
 800138c:	f000 fa61 	bl	8001852 <SSD1306_Clear>
		  char finalString[10];
		  sprintf(finalString, "%.3f V", fvoltage);
 8001390:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <StartTask02+0x48>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f8f7 	bl	8000588 <__aeabi_f2d>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	f107 000c 	add.w	r0, r7, #12
 80013a2:	490b      	ldr	r1, [pc, #44]	; (80013d0 <StartTask02+0x4c>)
 80013a4:	f006 ffb8 	bl	8008318 <siprintf>
		  SSD1306_GotoXY(0, 0);
 80013a8:	2100      	movs	r1, #0
 80013aa:	2000      	movs	r0, #0
 80013ac:	f000 f996 	bl	80016dc <SSD1306_GotoXY>
		  SSD1306_Puts(finalString, &Font_16x26, 1);
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	2201      	movs	r2, #1
 80013b6:	4907      	ldr	r1, [pc, #28]	; (80013d4 <StartTask02+0x50>)
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 fa25 	bl	8001808 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 80013be:	f000 f8e7 	bl	8001590 <SSD1306_UpdateScreen>
		  osDelay(1000);
 80013c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013c6:	f003 fe9f 	bl	8005108 <osDelay>
  {
 80013ca:	e7df      	b.n	800138c <StartTask02+0x8>
 80013cc:	200002f4 	.word	0x200002f4
 80013d0:	0800a83c 	.word	0x0800a83c
 80013d4:	20000008 	.word	0x20000008

080013d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d101      	bne.n	80013ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013ea:	f000 fd8b 	bl	8001f04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40010000 	.word	0x40010000

080013fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001400:	b672      	cpsid	i
}
 8001402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001404:	e7fe      	b.n	8001404 <Error_Handler+0x8>
	...

08001408 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800140e:	f000 fa29 	bl	8001864 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001412:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001416:	2201      	movs	r2, #1
 8001418:	2178      	movs	r1, #120	; 0x78
 800141a:	485b      	ldr	r0, [pc, #364]	; (8001588 <SSD1306_Init+0x180>)
 800141c:	f001 fe4a 	bl	80030b4 <HAL_I2C_IsDeviceReady>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001426:	2300      	movs	r3, #0
 8001428:	e0a9      	b.n	800157e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800142a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800142e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001430:	e002      	b.n	8001438 <SSD1306_Init+0x30>
		p--;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3b01      	subs	r3, #1
 8001436:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f9      	bne.n	8001432 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800143e:	22ae      	movs	r2, #174	; 0xae
 8001440:	2100      	movs	r1, #0
 8001442:	2078      	movs	r0, #120	; 0x78
 8001444:	f000 fa8a 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001448:	2220      	movs	r2, #32
 800144a:	2100      	movs	r1, #0
 800144c:	2078      	movs	r0, #120	; 0x78
 800144e:	f000 fa85 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001452:	2210      	movs	r2, #16
 8001454:	2100      	movs	r1, #0
 8001456:	2078      	movs	r0, #120	; 0x78
 8001458:	f000 fa80 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800145c:	22b0      	movs	r2, #176	; 0xb0
 800145e:	2100      	movs	r1, #0
 8001460:	2078      	movs	r0, #120	; 0x78
 8001462:	f000 fa7b 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001466:	22c8      	movs	r2, #200	; 0xc8
 8001468:	2100      	movs	r1, #0
 800146a:	2078      	movs	r0, #120	; 0x78
 800146c:	f000 fa76 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001470:	2200      	movs	r2, #0
 8001472:	2100      	movs	r1, #0
 8001474:	2078      	movs	r0, #120	; 0x78
 8001476:	f000 fa71 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800147a:	2210      	movs	r2, #16
 800147c:	2100      	movs	r1, #0
 800147e:	2078      	movs	r0, #120	; 0x78
 8001480:	f000 fa6c 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001484:	2240      	movs	r2, #64	; 0x40
 8001486:	2100      	movs	r1, #0
 8001488:	2078      	movs	r0, #120	; 0x78
 800148a:	f000 fa67 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800148e:	2281      	movs	r2, #129	; 0x81
 8001490:	2100      	movs	r1, #0
 8001492:	2078      	movs	r0, #120	; 0x78
 8001494:	f000 fa62 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001498:	22ff      	movs	r2, #255	; 0xff
 800149a:	2100      	movs	r1, #0
 800149c:	2078      	movs	r0, #120	; 0x78
 800149e:	f000 fa5d 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80014a2:	22a1      	movs	r2, #161	; 0xa1
 80014a4:	2100      	movs	r1, #0
 80014a6:	2078      	movs	r0, #120	; 0x78
 80014a8:	f000 fa58 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80014ac:	22a6      	movs	r2, #166	; 0xa6
 80014ae:	2100      	movs	r1, #0
 80014b0:	2078      	movs	r0, #120	; 0x78
 80014b2:	f000 fa53 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80014b6:	22a8      	movs	r2, #168	; 0xa8
 80014b8:	2100      	movs	r1, #0
 80014ba:	2078      	movs	r0, #120	; 0x78
 80014bc:	f000 fa4e 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80014c0:	223f      	movs	r2, #63	; 0x3f
 80014c2:	2100      	movs	r1, #0
 80014c4:	2078      	movs	r0, #120	; 0x78
 80014c6:	f000 fa49 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80014ca:	22a4      	movs	r2, #164	; 0xa4
 80014cc:	2100      	movs	r1, #0
 80014ce:	2078      	movs	r0, #120	; 0x78
 80014d0:	f000 fa44 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80014d4:	22d3      	movs	r2, #211	; 0xd3
 80014d6:	2100      	movs	r1, #0
 80014d8:	2078      	movs	r0, #120	; 0x78
 80014da:	f000 fa3f 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	2078      	movs	r0, #120	; 0x78
 80014e4:	f000 fa3a 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80014e8:	22d5      	movs	r2, #213	; 0xd5
 80014ea:	2100      	movs	r1, #0
 80014ec:	2078      	movs	r0, #120	; 0x78
 80014ee:	f000 fa35 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80014f2:	22f0      	movs	r2, #240	; 0xf0
 80014f4:	2100      	movs	r1, #0
 80014f6:	2078      	movs	r0, #120	; 0x78
 80014f8:	f000 fa30 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80014fc:	22d9      	movs	r2, #217	; 0xd9
 80014fe:	2100      	movs	r1, #0
 8001500:	2078      	movs	r0, #120	; 0x78
 8001502:	f000 fa2b 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001506:	2222      	movs	r2, #34	; 0x22
 8001508:	2100      	movs	r1, #0
 800150a:	2078      	movs	r0, #120	; 0x78
 800150c:	f000 fa26 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001510:	22da      	movs	r2, #218	; 0xda
 8001512:	2100      	movs	r1, #0
 8001514:	2078      	movs	r0, #120	; 0x78
 8001516:	f000 fa21 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800151a:	2212      	movs	r2, #18
 800151c:	2100      	movs	r1, #0
 800151e:	2078      	movs	r0, #120	; 0x78
 8001520:	f000 fa1c 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001524:	22db      	movs	r2, #219	; 0xdb
 8001526:	2100      	movs	r1, #0
 8001528:	2078      	movs	r0, #120	; 0x78
 800152a:	f000 fa17 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800152e:	2220      	movs	r2, #32
 8001530:	2100      	movs	r1, #0
 8001532:	2078      	movs	r0, #120	; 0x78
 8001534:	f000 fa12 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001538:	228d      	movs	r2, #141	; 0x8d
 800153a:	2100      	movs	r1, #0
 800153c:	2078      	movs	r0, #120	; 0x78
 800153e:	f000 fa0d 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001542:	2214      	movs	r2, #20
 8001544:	2100      	movs	r1, #0
 8001546:	2078      	movs	r0, #120	; 0x78
 8001548:	f000 fa08 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800154c:	22af      	movs	r2, #175	; 0xaf
 800154e:	2100      	movs	r1, #0
 8001550:	2078      	movs	r0, #120	; 0x78
 8001552:	f000 fa03 	bl	800195c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001556:	222e      	movs	r2, #46	; 0x2e
 8001558:	2100      	movs	r1, #0
 800155a:	2078      	movs	r0, #120	; 0x78
 800155c:	f000 f9fe 	bl	800195c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001560:	2000      	movs	r0, #0
 8001562:	f000 f843 	bl	80015ec <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001566:	f000 f813 	bl	8001590 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <SSD1306_Init+0x184>)
 800156c:	2200      	movs	r2, #0
 800156e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <SSD1306_Init+0x184>)
 8001572:	2200      	movs	r2, #0
 8001574:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <SSD1306_Init+0x184>)
 8001578:	2201      	movs	r2, #1
 800157a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800157c:	2301      	movs	r3, #1
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	2000024c 	.word	0x2000024c
 800158c:	200006f8 	.word	0x200006f8

08001590 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001596:	2300      	movs	r3, #0
 8001598:	71fb      	strb	r3, [r7, #7]
 800159a:	e01d      	b.n	80015d8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	3b50      	subs	r3, #80	; 0x50
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	461a      	mov	r2, r3
 80015a4:	2100      	movs	r1, #0
 80015a6:	2078      	movs	r0, #120	; 0x78
 80015a8:	f000 f9d8 	bl	800195c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2100      	movs	r1, #0
 80015b0:	2078      	movs	r0, #120	; 0x78
 80015b2:	f000 f9d3 	bl	800195c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80015b6:	2210      	movs	r2, #16
 80015b8:	2100      	movs	r1, #0
 80015ba:	2078      	movs	r0, #120	; 0x78
 80015bc:	f000 f9ce 	bl	800195c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	01db      	lsls	r3, r3, #7
 80015c4:	4a08      	ldr	r2, [pc, #32]	; (80015e8 <SSD1306_UpdateScreen+0x58>)
 80015c6:	441a      	add	r2, r3
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	2140      	movs	r1, #64	; 0x40
 80015cc:	2078      	movs	r0, #120	; 0x78
 80015ce:	f000 f95f 	bl	8001890 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	3301      	adds	r3, #1
 80015d6:	71fb      	strb	r3, [r7, #7]
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	2b07      	cmp	r3, #7
 80015dc:	d9de      	bls.n	800159c <SSD1306_UpdateScreen+0xc>
	}
}
 80015de:	bf00      	nop
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	200002f8 	.word	0x200002f8

080015ec <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <SSD1306_Fill+0x14>
 80015fc:	2300      	movs	r3, #0
 80015fe:	e000      	b.n	8001602 <SSD1306_Fill+0x16>
 8001600:	23ff      	movs	r3, #255	; 0xff
 8001602:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001606:	4619      	mov	r1, r3
 8001608:	4803      	ldr	r0, [pc, #12]	; (8001618 <SSD1306_Fill+0x2c>)
 800160a:	f006 ff67 	bl	80084dc <memset>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200002f8 	.word	0x200002f8

0800161c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	80fb      	strh	r3, [r7, #6]
 8001626:	460b      	mov	r3, r1
 8001628:	80bb      	strh	r3, [r7, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	70fb      	strb	r3, [r7, #3]
	if (
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	2b7f      	cmp	r3, #127	; 0x7f
 8001632:	d848      	bhi.n	80016c6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001634:	88bb      	ldrh	r3, [r7, #4]
 8001636:	2b3f      	cmp	r3, #63	; 0x3f
 8001638:	d845      	bhi.n	80016c6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800163a:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <SSD1306_DrawPixel+0xb8>)
 800163c:	791b      	ldrb	r3, [r3, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d006      	beq.n	8001650 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001642:	78fb      	ldrb	r3, [r7, #3]
 8001644:	2b00      	cmp	r3, #0
 8001646:	bf0c      	ite	eq
 8001648:	2301      	moveq	r3, #1
 800164a:	2300      	movne	r3, #0
 800164c:	b2db      	uxtb	r3, r3
 800164e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001650:	78fb      	ldrb	r3, [r7, #3]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d11a      	bne.n	800168c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001656:	88fa      	ldrh	r2, [r7, #6]
 8001658:	88bb      	ldrh	r3, [r7, #4]
 800165a:	08db      	lsrs	r3, r3, #3
 800165c:	b298      	uxth	r0, r3
 800165e:	4603      	mov	r3, r0
 8001660:	01db      	lsls	r3, r3, #7
 8001662:	4413      	add	r3, r2
 8001664:	4a1c      	ldr	r2, [pc, #112]	; (80016d8 <SSD1306_DrawPixel+0xbc>)
 8001666:	5cd3      	ldrb	r3, [r2, r3]
 8001668:	b25a      	sxtb	r2, r3
 800166a:	88bb      	ldrh	r3, [r7, #4]
 800166c:	f003 0307 	and.w	r3, r3, #7
 8001670:	2101      	movs	r1, #1
 8001672:	fa01 f303 	lsl.w	r3, r1, r3
 8001676:	b25b      	sxtb	r3, r3
 8001678:	4313      	orrs	r3, r2
 800167a:	b259      	sxtb	r1, r3
 800167c:	88fa      	ldrh	r2, [r7, #6]
 800167e:	4603      	mov	r3, r0
 8001680:	01db      	lsls	r3, r3, #7
 8001682:	4413      	add	r3, r2
 8001684:	b2c9      	uxtb	r1, r1
 8001686:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <SSD1306_DrawPixel+0xbc>)
 8001688:	54d1      	strb	r1, [r2, r3]
 800168a:	e01d      	b.n	80016c8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800168c:	88fa      	ldrh	r2, [r7, #6]
 800168e:	88bb      	ldrh	r3, [r7, #4]
 8001690:	08db      	lsrs	r3, r3, #3
 8001692:	b298      	uxth	r0, r3
 8001694:	4603      	mov	r3, r0
 8001696:	01db      	lsls	r3, r3, #7
 8001698:	4413      	add	r3, r2
 800169a:	4a0f      	ldr	r2, [pc, #60]	; (80016d8 <SSD1306_DrawPixel+0xbc>)
 800169c:	5cd3      	ldrb	r3, [r2, r3]
 800169e:	b25a      	sxtb	r2, r3
 80016a0:	88bb      	ldrh	r3, [r7, #4]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	2101      	movs	r1, #1
 80016a8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	b25b      	sxtb	r3, r3
 80016b2:	4013      	ands	r3, r2
 80016b4:	b259      	sxtb	r1, r3
 80016b6:	88fa      	ldrh	r2, [r7, #6]
 80016b8:	4603      	mov	r3, r0
 80016ba:	01db      	lsls	r3, r3, #7
 80016bc:	4413      	add	r3, r2
 80016be:	b2c9      	uxtb	r1, r1
 80016c0:	4a05      	ldr	r2, [pc, #20]	; (80016d8 <SSD1306_DrawPixel+0xbc>)
 80016c2:	54d1      	strb	r1, [r2, r3]
 80016c4:	e000      	b.n	80016c8 <SSD1306_DrawPixel+0xac>
		return;
 80016c6:	bf00      	nop
	}
}
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	200006f8 	.word	0x200006f8
 80016d8:	200002f8 	.word	0x200002f8

080016dc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	460a      	mov	r2, r1
 80016e6:	80fb      	strh	r3, [r7, #6]
 80016e8:	4613      	mov	r3, r2
 80016ea:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80016ec:	4a05      	ldr	r2, [pc, #20]	; (8001704 <SSD1306_GotoXY+0x28>)
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80016f2:	4a04      	ldr	r2, [pc, #16]	; (8001704 <SSD1306_GotoXY+0x28>)
 80016f4:	88bb      	ldrh	r3, [r7, #4]
 80016f6:	8053      	strh	r3, [r2, #2]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	200006f8 	.word	0x200006f8

08001708 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
 8001714:	4613      	mov	r3, r2
 8001716:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001718:	4b3a      	ldr	r3, [pc, #232]	; (8001804 <SSD1306_Putc+0xfc>)
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	4413      	add	r3, r2
	if (
 8001724:	2b7f      	cmp	r3, #127	; 0x7f
 8001726:	dc07      	bgt.n	8001738 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001728:	4b36      	ldr	r3, [pc, #216]	; (8001804 <SSD1306_Putc+0xfc>)
 800172a:	885b      	ldrh	r3, [r3, #2]
 800172c:	461a      	mov	r2, r3
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	785b      	ldrb	r3, [r3, #1]
 8001732:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001734:	2b3f      	cmp	r3, #63	; 0x3f
 8001736:	dd01      	ble.n	800173c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001738:	2300      	movs	r3, #0
 800173a:	e05e      	b.n	80017fa <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	e04b      	b.n	80017da <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	3b20      	subs	r3, #32
 800174a:	6839      	ldr	r1, [r7, #0]
 800174c:	7849      	ldrb	r1, [r1, #1]
 800174e:	fb01 f303 	mul.w	r3, r1, r3
 8001752:	4619      	mov	r1, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	440b      	add	r3, r1
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4413      	add	r3, r2
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	e030      	b.n	80017c8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d010      	beq.n	8001798 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001776:	4b23      	ldr	r3, [pc, #140]	; (8001804 <SSD1306_Putc+0xfc>)
 8001778:	881a      	ldrh	r2, [r3, #0]
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	b29b      	uxth	r3, r3
 800177e:	4413      	add	r3, r2
 8001780:	b298      	uxth	r0, r3
 8001782:	4b20      	ldr	r3, [pc, #128]	; (8001804 <SSD1306_Putc+0xfc>)
 8001784:	885a      	ldrh	r2, [r3, #2]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	b29b      	uxth	r3, r3
 800178a:	4413      	add	r3, r2
 800178c:	b29b      	uxth	r3, r3
 800178e:	79ba      	ldrb	r2, [r7, #6]
 8001790:	4619      	mov	r1, r3
 8001792:	f7ff ff43 	bl	800161c <SSD1306_DrawPixel>
 8001796:	e014      	b.n	80017c2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001798:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <SSD1306_Putc+0xfc>)
 800179a:	881a      	ldrh	r2, [r3, #0]
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	4413      	add	r3, r2
 80017a2:	b298      	uxth	r0, r3
 80017a4:	4b17      	ldr	r3, [pc, #92]	; (8001804 <SSD1306_Putc+0xfc>)
 80017a6:	885a      	ldrh	r2, [r3, #2]
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	b299      	uxth	r1, r3
 80017b0:	79bb      	ldrb	r3, [r7, #6]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	bf0c      	ite	eq
 80017b6:	2301      	moveq	r3, #1
 80017b8:	2300      	movne	r3, #0
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	461a      	mov	r2, r3
 80017be:	f7ff ff2d 	bl	800161c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	3301      	adds	r3, #1
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d3c8      	bcc.n	8001766 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	3301      	adds	r3, #1
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	785b      	ldrb	r3, [r3, #1]
 80017de:	461a      	mov	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d3ad      	bcc.n	8001742 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <SSD1306_Putc+0xfc>)
 80017e8:	881a      	ldrh	r2, [r3, #0]
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	4413      	add	r3, r2
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <SSD1306_Putc+0xfc>)
 80017f6:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80017f8:	79fb      	ldrb	r3, [r7, #7]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200006f8 	.word	0x200006f8

08001808 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	4613      	mov	r3, r2
 8001814:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001816:	e012      	b.n	800183e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	79fa      	ldrb	r2, [r7, #7]
 800181e:	68b9      	ldr	r1, [r7, #8]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff71 	bl	8001708 <SSD1306_Putc>
 8001826:	4603      	mov	r3, r0
 8001828:	461a      	mov	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	429a      	cmp	r2, r3
 8001830:	d002      	beq.n	8001838 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	e008      	b.n	800184a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3301      	adds	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1e8      	bne.n	8001818 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	781b      	ldrb	r3, [r3, #0]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001856:	2000      	movs	r0, #0
 8001858:	f7ff fec8 	bl	80015ec <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800185c:	f7ff fe98 	bl	8001590 <SSD1306_UpdateScreen>
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}

08001864 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <ssd1306_I2C_Init+0x28>)
 800186c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800186e:	e002      	b.n	8001876 <ssd1306_I2C_Init+0x12>
		p--;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f9      	bne.n	8001870 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800187c:	bf00      	nop
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	0003d090 	.word	0x0003d090

08001890 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b0c7      	sub	sp, #284	; 0x11c
 8001894:	af02      	add	r7, sp, #8
 8001896:	4604      	mov	r4, r0
 8001898:	4608      	mov	r0, r1
 800189a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800189e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80018a2:	600a      	str	r2, [r1, #0]
 80018a4:	4619      	mov	r1, r3
 80018a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018aa:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80018ae:	4622      	mov	r2, r4
 80018b0:	701a      	strb	r2, [r3, #0]
 80018b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018b6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80018ba:	4602      	mov	r2, r0
 80018bc:	701a      	strb	r2, [r3, #0]
 80018be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018c6:	460a      	mov	r2, r1
 80018c8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80018ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80018d2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80018d6:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80018da:	7812      	ldrb	r2, [r2, #0]
 80018dc:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80018de:	2300      	movs	r3, #0
 80018e0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80018e4:	e015      	b.n	8001912 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80018e6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80018ea:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80018ee:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	441a      	add	r2, r3
 80018f6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80018fa:	3301      	adds	r3, #1
 80018fc:	7811      	ldrb	r1, [r2, #0]
 80018fe:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001902:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001906:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001908:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800190c:	3301      	adds	r3, #1
 800190e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001912:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001916:	b29b      	uxth	r3, r3
 8001918:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800191c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001920:	8812      	ldrh	r2, [r2, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d8df      	bhi.n	80018e6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001926:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800192a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	b299      	uxth	r1, r3
 8001932:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001936:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	3301      	adds	r3, #1
 800193e:	b29b      	uxth	r3, r3
 8001940:	f107 020c 	add.w	r2, r7, #12
 8001944:	200a      	movs	r0, #10
 8001946:	9000      	str	r0, [sp, #0]
 8001948:	4803      	ldr	r0, [pc, #12]	; (8001958 <ssd1306_I2C_WriteMulti+0xc8>)
 800194a:	f001 fab5 	bl	8002eb8 <HAL_I2C_Master_Transmit>
}
 800194e:	bf00      	nop
 8001950:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001954:	46bd      	mov	sp, r7
 8001956:	bd90      	pop	{r4, r7, pc}
 8001958:	2000024c 	.word	0x2000024c

0800195c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af02      	add	r7, sp, #8
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
 8001966:	460b      	mov	r3, r1
 8001968:	71bb      	strb	r3, [r7, #6]
 800196a:	4613      	mov	r3, r2
 800196c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800196e:	79bb      	ldrb	r3, [r7, #6]
 8001970:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001972:	797b      	ldrb	r3, [r7, #5]
 8001974:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	b299      	uxth	r1, r3
 800197a:	f107 020c 	add.w	r2, r7, #12
 800197e:	230a      	movs	r3, #10
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	2302      	movs	r3, #2
 8001984:	4803      	ldr	r0, [pc, #12]	; (8001994 <ssd1306_I2C_Write+0x38>)
 8001986:	f001 fa97 	bl	8002eb8 <HAL_I2C_Master_Transmit>
}
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	2000024c 	.word	0x2000024c

08001998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_MspInit+0x54>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	4a11      	ldr	r2, [pc, #68]	; (80019ec <HAL_MspInit+0x54>)
 80019a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ac:	6453      	str	r3, [r2, #68]	; 0x44
 80019ae:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <HAL_MspInit+0x54>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <HAL_MspInit+0x54>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <HAL_MspInit+0x54>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <HAL_MspInit+0x54>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	210f      	movs	r1, #15
 80019da:	f06f 0001 	mvn.w	r0, #1
 80019de:	f000 ff69 	bl	80028b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800

080019f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	; 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a17      	ldr	r2, [pc, #92]	; (8001a6c <HAL_ADC_MspInit+0x7c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d127      	bne.n	8001a62 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <HAL_ADC_MspInit+0x80>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	4a15      	ldr	r2, [pc, #84]	; (8001a70 <HAL_ADC_MspInit+0x80>)
 8001a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a20:	6453      	str	r3, [r2, #68]	; 0x44
 8001a22:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <HAL_ADC_MspInit+0x80>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <HAL_ADC_MspInit+0x80>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a0e      	ldr	r2, [pc, #56]	; (8001a70 <HAL_ADC_MspInit+0x80>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <HAL_ADC_MspInit+0x80>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4805      	ldr	r0, [pc, #20]	; (8001a74 <HAL_ADC_MspInit+0x84>)
 8001a5e:	f000 ff53 	bl	8002908 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a62:	bf00      	nop
 8001a64:	3728      	adds	r7, #40	; 0x28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40012000 	.word	0x40012000
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40020000 	.word	0x40020000

08001a78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	; 0x28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a19      	ldr	r2, [pc, #100]	; (8001afc <HAL_I2C_MspInit+0x84>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d12b      	bne.n	8001af2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <HAL_I2C_MspInit+0x88>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a17      	ldr	r2, [pc, #92]	; (8001b00 <HAL_I2C_MspInit+0x88>)
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <HAL_I2C_MspInit+0x88>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ab6:	23c0      	movs	r3, #192	; 0xc0
 8001ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aba:	2312      	movs	r3, #18
 8001abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ac6:	2304      	movs	r3, #4
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	4619      	mov	r1, r3
 8001ad0:	480c      	ldr	r0, [pc, #48]	; (8001b04 <HAL_I2C_MspInit+0x8c>)
 8001ad2:	f000 ff19 	bl	8002908 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_I2C_MspInit+0x88>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	4a08      	ldr	r2, [pc, #32]	; (8001b00 <HAL_I2C_MspInit+0x88>)
 8001ae0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_I2C_MspInit+0x88>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001af2:	bf00      	nop
 8001af4:	3728      	adds	r7, #40	; 0x28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40005400 	.word	0x40005400
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40020400 	.word	0x40020400

08001b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a19      	ldr	r2, [pc, #100]	; (8001b8c <HAL_UART_MspInit+0x84>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d12b      	bne.n	8001b82 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <HAL_UART_MspInit+0x88>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a17      	ldr	r2, [pc, #92]	; (8001b90 <HAL_UART_MspInit+0x88>)
 8001b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_UART_MspInit+0x88>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HAL_UART_MspInit+0x88>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a10      	ldr	r2, [pc, #64]	; (8001b90 <HAL_UART_MspInit+0x88>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <HAL_UART_MspInit+0x88>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b62:	230c      	movs	r3, #12
 8001b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b72:	2307      	movs	r3, #7
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4805      	ldr	r0, [pc, #20]	; (8001b94 <HAL_UART_MspInit+0x8c>)
 8001b7e:	f000 fec3 	bl	8002908 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b82:	bf00      	nop
 8001b84:	3728      	adds	r7, #40	; 0x28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40004400 	.word	0x40004400
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40020000 	.word	0x40020000

08001b98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08c      	sub	sp, #48	; 0x30
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	4b2e      	ldr	r3, [pc, #184]	; (8001c68 <HAL_InitTick+0xd0>)
 8001bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb0:	4a2d      	ldr	r2, [pc, #180]	; (8001c68 <HAL_InitTick+0xd0>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb8:	4b2b      	ldr	r3, [pc, #172]	; (8001c68 <HAL_InitTick+0xd0>)
 8001bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bc4:	f107 020c 	add.w	r2, r7, #12
 8001bc8:	f107 0310 	add.w	r3, r7, #16
 8001bcc:	4611      	mov	r1, r2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f001 ff14 	bl	80039fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001bd4:	f001 fefe 	bl	80039d4 <HAL_RCC_GetPCLK2Freq>
 8001bd8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bdc:	4a23      	ldr	r2, [pc, #140]	; (8001c6c <HAL_InitTick+0xd4>)
 8001bde:	fba2 2303 	umull	r2, r3, r2, r3
 8001be2:	0c9b      	lsrs	r3, r3, #18
 8001be4:	3b01      	subs	r3, #1
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001be8:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <HAL_InitTick+0xd8>)
 8001bea:	4a22      	ldr	r2, [pc, #136]	; (8001c74 <HAL_InitTick+0xdc>)
 8001bec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001bee:	4b20      	ldr	r3, [pc, #128]	; (8001c70 <HAL_InitTick+0xd8>)
 8001bf0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bf4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001bf6:	4a1e      	ldr	r2, [pc, #120]	; (8001c70 <HAL_InitTick+0xd8>)
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001bfc:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <HAL_InitTick+0xd8>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c02:	4b1b      	ldr	r3, [pc, #108]	; (8001c70 <HAL_InitTick+0xd8>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c08:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <HAL_InitTick+0xd8>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001c0e:	4818      	ldr	r0, [pc, #96]	; (8001c70 <HAL_InitTick+0xd8>)
 8001c10:	f002 fbf4 	bl	80043fc <HAL_TIM_Base_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001c1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d11b      	bne.n	8001c5a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001c22:	4813      	ldr	r0, [pc, #76]	; (8001c70 <HAL_InitTick+0xd8>)
 8001c24:	f002 fc44 	bl	80044b0 <HAL_TIM_Base_Start_IT>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001c2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d111      	bne.n	8001c5a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c36:	2019      	movs	r0, #25
 8001c38:	f000 fe58 	bl	80028ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b0f      	cmp	r3, #15
 8001c40:	d808      	bhi.n	8001c54 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001c42:	2200      	movs	r2, #0
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	2019      	movs	r0, #25
 8001c48:	f000 fe34 	bl	80028b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c4c:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <HAL_InitTick+0xe0>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e002      	b.n	8001c5a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001c5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3730      	adds	r7, #48	; 0x30
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	431bde83 	.word	0x431bde83
 8001c70:	20000700 	.word	0x20000700
 8001c74:	40010000 	.word	0x40010000
 8001c78:	20000014 	.word	0x20000014

08001c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c80:	e7fe      	b.n	8001c80 <NMI_Handler+0x4>

08001c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <HardFault_Handler+0x4>

08001c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <MemManage_Handler+0x4>

08001c8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c92:	e7fe      	b.n	8001c92 <BusFault_Handler+0x4>

08001c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c98:	e7fe      	b.n	8001c98 <UsageFault_Handler+0x4>

08001c9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cac:	4802      	ldr	r0, [pc, #8]	; (8001cb8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001cae:	f002 fc6f 	bl	8004590 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000700 	.word	0x20000700

08001cbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return 1;
 8001cc0:	2301      	movs	r3, #1
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <_kill>:

int _kill(int pid, int sig)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cd6:	f006 fc63 	bl	80085a0 <__errno>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2216      	movs	r2, #22
 8001cde:	601a      	str	r2, [r3, #0]
  return -1;
 8001ce0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <_exit>:

void _exit (int status)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff ffe7 	bl	8001ccc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cfe:	e7fe      	b.n	8001cfe <_exit+0x12>

08001d00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	e00a      	b.n	8001d28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d12:	f3af 8000 	nop.w
 8001d16:	4601      	mov	r1, r0
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	60ba      	str	r2, [r7, #8]
 8001d1e:	b2ca      	uxtb	r2, r1
 8001d20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	3301      	adds	r3, #1
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	dbf0      	blt.n	8001d12 <_read+0x12>
  }

  return len;
 8001d30:	687b      	ldr	r3, [r7, #4]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	60f8      	str	r0, [r7, #12]
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	e009      	b.n	8001d60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	1c5a      	adds	r2, r3, #1
 8001d50:	60ba      	str	r2, [r7, #8]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff f92d 	bl	8000fb4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	dbf1      	blt.n	8001d4c <_write+0x12>
  }
  return len;
 8001d68:	687b      	ldr	r3, [r7, #4]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <_close>:

int _close(int file)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d9a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <_isatty>:

int _isatty(int file)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001db2:	2301      	movs	r3, #1
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
	...

08001ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de4:	4a14      	ldr	r2, [pc, #80]	; (8001e38 <_sbrk+0x5c>)
 8001de6:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <_sbrk+0x60>)
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001df0:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <_sbrk+0x64>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d102      	bne.n	8001dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <_sbrk+0x64>)
 8001dfa:	4a12      	ldr	r2, [pc, #72]	; (8001e44 <_sbrk+0x68>)
 8001dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <_sbrk+0x64>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d207      	bcs.n	8001e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e0c:	f006 fbc8 	bl	80085a0 <__errno>
 8001e10:	4603      	mov	r3, r0
 8001e12:	220c      	movs	r2, #12
 8001e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e1a:	e009      	b.n	8001e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <_sbrk+0x64>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e22:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <_sbrk+0x64>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	4a05      	ldr	r2, [pc, #20]	; (8001e40 <_sbrk+0x64>)
 8001e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20020000 	.word	0x20020000
 8001e3c:	00000400 	.word	0x00000400
 8001e40:	20000748 	.word	0x20000748
 8001e44:	20005288 	.word	0x20005288

08001e48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <SystemInit+0x20>)
 8001e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e52:	4a05      	ldr	r2, [pc, #20]	; (8001e68 <SystemInit+0x20>)
 8001e54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ea4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e70:	f7ff ffea 	bl	8001e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e74:	480c      	ldr	r0, [pc, #48]	; (8001ea8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e76:	490d      	ldr	r1, [pc, #52]	; (8001eac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e78:	4a0d      	ldr	r2, [pc, #52]	; (8001eb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e7c:	e002      	b.n	8001e84 <LoopCopyDataInit>

08001e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e82:	3304      	adds	r3, #4

08001e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e88:	d3f9      	bcc.n	8001e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e8c:	4c0a      	ldr	r4, [pc, #40]	; (8001eb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e90:	e001      	b.n	8001e96 <LoopFillZerobss>

08001e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e94:	3204      	adds	r2, #4

08001e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e98:	d3fb      	bcc.n	8001e92 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e9a:	f006 fb87 	bl	80085ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e9e:	f7ff f895 	bl	8000fcc <main>
  bx  lr    
 8001ea2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ea4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eac:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001eb0:	0800cce4 	.word	0x0800cce4
  ldr r2, =_sbss
 8001eb4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001eb8:	20005284 	.word	0x20005284

08001ebc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ebc:	e7fe      	b.n	8001ebc <ADC_IRQHandler>
	...

08001ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <HAL_Init+0x40>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0d      	ldr	r2, [pc, #52]	; (8001f00 <HAL_Init+0x40>)
 8001eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ece:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_Init+0x40>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <HAL_Init+0x40>)
 8001ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <HAL_Init+0x40>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <HAL_Init+0x40>)
 8001ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee8:	2003      	movs	r0, #3
 8001eea:	f000 fcd8 	bl	800289e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eee:	200f      	movs	r0, #15
 8001ef0:	f7ff fe52 	bl	8001b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef4:	f7ff fd50 	bl	8001998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40023c00 	.word	0x40023c00

08001f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_IncTick+0x20>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_IncTick+0x24>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4413      	add	r3, r2
 8001f14:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <HAL_IncTick+0x24>)
 8001f16:	6013      	str	r3, [r2, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20000018 	.word	0x20000018
 8001f28:	2000074c 	.word	0x2000074c

08001f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <HAL_GetTick+0x14>)
 8001f32:	681b      	ldr	r3, [r3, #0]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	2000074c 	.word	0x2000074c

08001f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f4c:	f7ff ffee 	bl	8001f2c <HAL_GetTick>
 8001f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f5c:	d005      	beq.n	8001f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <HAL_Delay+0x44>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4413      	add	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f6a:	bf00      	nop
 8001f6c:	f7ff ffde 	bl	8001f2c <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d8f7      	bhi.n	8001f6c <HAL_Delay+0x28>
  {
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	bf00      	nop
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000018 	.word	0x20000018

08001f8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e033      	b.n	800200a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d109      	bne.n	8001fbe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff fd20 	bl	80019f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	f003 0310 	and.w	r3, r3, #16
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d118      	bne.n	8001ffc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fd2:	f023 0302 	bic.w	r3, r3, #2
 8001fd6:	f043 0202 	orr.w	r2, r3, #2
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 fab4 	bl	800254c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f023 0303 	bic.w	r3, r3, #3
 8001ff2:	f043 0201 	orr.w	r2, r3, #1
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	641a      	str	r2, [r3, #64]	; 0x40
 8001ffa:	e001      	b.n	8002000 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002008:	7bfb      	ldrb	r3, [r7, #15]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002026:	2b01      	cmp	r3, #1
 8002028:	d101      	bne.n	800202e <HAL_ADC_Start+0x1a>
 800202a:	2302      	movs	r3, #2
 800202c:	e0b2      	b.n	8002194 <HAL_ADC_Start+0x180>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b01      	cmp	r3, #1
 8002042:	d018      	beq.n	8002076 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0201 	orr.w	r2, r2, #1
 8002052:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002054:	4b52      	ldr	r3, [pc, #328]	; (80021a0 <HAL_ADC_Start+0x18c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a52      	ldr	r2, [pc, #328]	; (80021a4 <HAL_ADC_Start+0x190>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	0c9a      	lsrs	r2, r3, #18
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002068:	e002      	b.n	8002070 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	3b01      	subs	r3, #1
 800206e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f9      	bne.n	800206a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b01      	cmp	r3, #1
 8002082:	d17a      	bne.n	800217a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800208c:	f023 0301 	bic.w	r3, r3, #1
 8002090:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d007      	beq.n	80020b6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020c2:	d106      	bne.n	80020d2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c8:	f023 0206 	bic.w	r2, r3, #6
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	645a      	str	r2, [r3, #68]	; 0x44
 80020d0:	e002      	b.n	80020d8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020e0:	4b31      	ldr	r3, [pc, #196]	; (80021a8 <HAL_ADC_Start+0x194>)
 80020e2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020ec:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 031f 	and.w	r3, r3, #31
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d12a      	bne.n	8002150 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a2b      	ldr	r2, [pc, #172]	; (80021ac <HAL_ADC_Start+0x198>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d015      	beq.n	8002130 <HAL_ADC_Start+0x11c>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a29      	ldr	r2, [pc, #164]	; (80021b0 <HAL_ADC_Start+0x19c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d105      	bne.n	800211a <HAL_ADC_Start+0x106>
 800210e:	4b26      	ldr	r3, [pc, #152]	; (80021a8 <HAL_ADC_Start+0x194>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 031f 	and.w	r3, r3, #31
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00a      	beq.n	8002130 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a25      	ldr	r2, [pc, #148]	; (80021b4 <HAL_ADC_Start+0x1a0>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d136      	bne.n	8002192 <HAL_ADC_Start+0x17e>
 8002124:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <HAL_ADC_Start+0x194>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0310 	and.w	r3, r3, #16
 800212c:	2b00      	cmp	r3, #0
 800212e:	d130      	bne.n	8002192 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d129      	bne.n	8002192 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	e020      	b.n	8002192 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a15      	ldr	r2, [pc, #84]	; (80021ac <HAL_ADC_Start+0x198>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d11b      	bne.n	8002192 <HAL_ADC_Start+0x17e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d114      	bne.n	8002192 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	e00b      	b.n	8002192 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f043 0210 	orr.w	r2, r3, #16
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	f043 0201 	orr.w	r2, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	20000010 	.word	0x20000010
 80021a4:	431bde83 	.word	0x431bde83
 80021a8:	40012300 	.word	0x40012300
 80021ac:	40012000 	.word	0x40012000
 80021b0:	40012100 	.word	0x40012100
 80021b4:	40012200 	.word	0x40012200

080021b8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d4:	d113      	bne.n	80021fe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021e4:	d10b      	bne.n	80021fe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f043 0220 	orr.w	r2, r3, #32
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e063      	b.n	80022c6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80021fe:	f7ff fe95 	bl	8001f2c <HAL_GetTick>
 8002202:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002204:	e021      	b.n	800224a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800220c:	d01d      	beq.n	800224a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d007      	beq.n	8002224 <HAL_ADC_PollForConversion+0x6c>
 8002214:	f7ff fe8a 	bl	8001f2c <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d212      	bcs.n	800224a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b02      	cmp	r3, #2
 8002230:	d00b      	beq.n	800224a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f043 0204 	orr.w	r2, r3, #4
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e03d      	b.n	80022c6 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b02      	cmp	r3, #2
 8002256:	d1d6      	bne.n	8002206 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f06f 0212 	mvn.w	r2, #18
 8002260:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d123      	bne.n	80022c4 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002280:	2b00      	cmp	r3, #0
 8002282:	d11f      	bne.n	80022c4 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800228e:	2b00      	cmp	r3, #0
 8002290:	d006      	beq.n	80022a0 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800229c:	2b00      	cmp	r3, #0
 800229e:	d111      	bne.n	80022c4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d105      	bne.n	80022c4 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	f043 0201 	orr.w	r2, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x1c>
 8002300:	2302      	movs	r3, #2
 8002302:	e113      	b.n	800252c <HAL_ADC_ConfigChannel+0x244>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b09      	cmp	r3, #9
 8002312:	d925      	bls.n	8002360 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68d9      	ldr	r1, [r3, #12]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	b29b      	uxth	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	4613      	mov	r3, r2
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	4413      	add	r3, r2
 8002328:	3b1e      	subs	r3, #30
 800232a:	2207      	movs	r2, #7
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43da      	mvns	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	400a      	ands	r2, r1
 8002338:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68d9      	ldr	r1, [r3, #12]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	b29b      	uxth	r3, r3
 800234a:	4618      	mov	r0, r3
 800234c:	4603      	mov	r3, r0
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4403      	add	r3, r0
 8002352:	3b1e      	subs	r3, #30
 8002354:	409a      	lsls	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	e022      	b.n	80023a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6919      	ldr	r1, [r3, #16]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	b29b      	uxth	r3, r3
 800236c:	461a      	mov	r2, r3
 800236e:	4613      	mov	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4413      	add	r3, r2
 8002374:	2207      	movs	r2, #7
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43da      	mvns	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	400a      	ands	r2, r1
 8002382:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6919      	ldr	r1, [r3, #16]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	b29b      	uxth	r3, r3
 8002394:	4618      	mov	r0, r3
 8002396:	4603      	mov	r3, r0
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	4403      	add	r3, r0
 800239c:	409a      	lsls	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b06      	cmp	r3, #6
 80023ac:	d824      	bhi.n	80023f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	3b05      	subs	r3, #5
 80023c0:	221f      	movs	r2, #31
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43da      	mvns	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	400a      	ands	r2, r1
 80023ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	4618      	mov	r0, r3
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	3b05      	subs	r3, #5
 80023ea:	fa00 f203 	lsl.w	r2, r0, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	635a      	str	r2, [r3, #52]	; 0x34
 80023f6:	e04c      	b.n	8002492 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b0c      	cmp	r3, #12
 80023fe:	d824      	bhi.n	800244a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	3b23      	subs	r3, #35	; 0x23
 8002412:	221f      	movs	r2, #31
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43da      	mvns	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	400a      	ands	r2, r1
 8002420:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	b29b      	uxth	r3, r3
 800242e:	4618      	mov	r0, r3
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	3b23      	subs	r3, #35	; 0x23
 800243c:	fa00 f203 	lsl.w	r2, r0, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	631a      	str	r2, [r3, #48]	; 0x30
 8002448:	e023      	b.n	8002492 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	3b41      	subs	r3, #65	; 0x41
 800245c:	221f      	movs	r2, #31
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43da      	mvns	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	400a      	ands	r2, r1
 800246a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	b29b      	uxth	r3, r3
 8002478:	4618      	mov	r0, r3
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	3b41      	subs	r3, #65	; 0x41
 8002486:	fa00 f203 	lsl.w	r2, r0, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002492:	4b29      	ldr	r3, [pc, #164]	; (8002538 <HAL_ADC_ConfigChannel+0x250>)
 8002494:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a28      	ldr	r2, [pc, #160]	; (800253c <HAL_ADC_ConfigChannel+0x254>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d10f      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x1d8>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b12      	cmp	r3, #18
 80024a6:	d10b      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a1d      	ldr	r2, [pc, #116]	; (800253c <HAL_ADC_ConfigChannel+0x254>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d12b      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x23a>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a1c      	ldr	r2, [pc, #112]	; (8002540 <HAL_ADC_ConfigChannel+0x258>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d003      	beq.n	80024dc <HAL_ADC_ConfigChannel+0x1f4>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b11      	cmp	r3, #17
 80024da:	d122      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a11      	ldr	r2, [pc, #68]	; (8002540 <HAL_ADC_ConfigChannel+0x258>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d111      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024fe:	4b11      	ldr	r3, [pc, #68]	; (8002544 <HAL_ADC_ConfigChannel+0x25c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a11      	ldr	r2, [pc, #68]	; (8002548 <HAL_ADC_ConfigChannel+0x260>)
 8002504:	fba2 2303 	umull	r2, r3, r2, r3
 8002508:	0c9a      	lsrs	r2, r3, #18
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002514:	e002      	b.n	800251c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	3b01      	subs	r3, #1
 800251a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f9      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	40012300 	.word	0x40012300
 800253c:	40012000 	.word	0x40012000
 8002540:	10000012 	.word	0x10000012
 8002544:	20000010 	.word	0x20000010
 8002548:	431bde83 	.word	0x431bde83

0800254c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002554:	4b79      	ldr	r3, [pc, #484]	; (800273c <ADC_Init+0x1f0>)
 8002556:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	431a      	orrs	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002580:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6859      	ldr	r1, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	021a      	lsls	r2, r3, #8
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6859      	ldr	r1, [r3, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6899      	ldr	r1, [r3, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025de:	4a58      	ldr	r2, [pc, #352]	; (8002740 <ADC_Init+0x1f4>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d022      	beq.n	800262a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6899      	ldr	r1, [r3, #8]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002614:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6899      	ldr	r1, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	e00f      	b.n	800264a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002638:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002648:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0202 	bic.w	r2, r2, #2
 8002658:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6899      	ldr	r1, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	7e1b      	ldrb	r3, [r3, #24]
 8002664:	005a      	lsls	r2, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d01b      	beq.n	80026b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002686:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002696:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6859      	ldr	r1, [r3, #4]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	3b01      	subs	r3, #1
 80026a4:	035a      	lsls	r2, r3, #13
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	e007      	b.n	80026c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026be:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80026ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	3b01      	subs	r3, #1
 80026dc:	051a      	lsls	r2, r3, #20
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6899      	ldr	r1, [r3, #8]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002702:	025a      	lsls	r2, r3, #9
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800271a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6899      	ldr	r1, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	029a      	lsls	r2, r3, #10
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	609a      	str	r2, [r3, #8]
}
 8002730:	bf00      	nop
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	40012300 	.word	0x40012300
 8002740:	0f000001 	.word	0x0f000001

08002744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <__NVIC_SetPriorityGrouping+0x44>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002760:	4013      	ands	r3, r2
 8002762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800276c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002776:	4a04      	ldr	r2, [pc, #16]	; (8002788 <__NVIC_SetPriorityGrouping+0x44>)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	60d3      	str	r3, [r2, #12]
}
 800277c:	bf00      	nop
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002790:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	0a1b      	lsrs	r3, r3, #8
 8002796:	f003 0307 	and.w	r3, r3, #7
}
 800279a:	4618      	mov	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	db0b      	blt.n	80027d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	f003 021f 	and.w	r2, r3, #31
 80027c0:	4907      	ldr	r1, [pc, #28]	; (80027e0 <__NVIC_EnableIRQ+0x38>)
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	2001      	movs	r0, #1
 80027ca:	fa00 f202 	lsl.w	r2, r0, r2
 80027ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	e000e100 	.word	0xe000e100

080027e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	6039      	str	r1, [r7, #0]
 80027ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	db0a      	blt.n	800280e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	490c      	ldr	r1, [pc, #48]	; (8002830 <__NVIC_SetPriority+0x4c>)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	0112      	lsls	r2, r2, #4
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	440b      	add	r3, r1
 8002808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800280c:	e00a      	b.n	8002824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	b2da      	uxtb	r2, r3
 8002812:	4908      	ldr	r1, [pc, #32]	; (8002834 <__NVIC_SetPriority+0x50>)
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	3b04      	subs	r3, #4
 800281c:	0112      	lsls	r2, r2, #4
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	440b      	add	r3, r1
 8002822:	761a      	strb	r2, [r3, #24]
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	e000e100 	.word	0xe000e100
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002838:	b480      	push	{r7}
 800283a:	b089      	sub	sp, #36	; 0x24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f1c3 0307 	rsb	r3, r3, #7
 8002852:	2b04      	cmp	r3, #4
 8002854:	bf28      	it	cs
 8002856:	2304      	movcs	r3, #4
 8002858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3304      	adds	r3, #4
 800285e:	2b06      	cmp	r3, #6
 8002860:	d902      	bls.n	8002868 <NVIC_EncodePriority+0x30>
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3b03      	subs	r3, #3
 8002866:	e000      	b.n	800286a <NVIC_EncodePriority+0x32>
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800286c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43da      	mvns	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	401a      	ands	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002880:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	fa01 f303 	lsl.w	r3, r1, r3
 800288a:	43d9      	mvns	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002890:	4313      	orrs	r3, r2
         );
}
 8002892:	4618      	mov	r0, r3
 8002894:	3724      	adds	r7, #36	; 0x24
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff ff4c 	bl	8002744 <__NVIC_SetPriorityGrouping>
}
 80028ac:	bf00      	nop
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
 80028c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028c6:	f7ff ff61 	bl	800278c <__NVIC_GetPriorityGrouping>
 80028ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	68b9      	ldr	r1, [r7, #8]
 80028d0:	6978      	ldr	r0, [r7, #20]
 80028d2:	f7ff ffb1 	bl	8002838 <NVIC_EncodePriority>
 80028d6:	4602      	mov	r2, r0
 80028d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff ff80 	bl	80027e4 <__NVIC_SetPriority>
}
 80028e4:	bf00      	nop
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff ff54 	bl	80027a8 <__NVIC_EnableIRQ>
}
 8002900:	bf00      	nop
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002908:	b480      	push	{r7}
 800290a:	b089      	sub	sp, #36	; 0x24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800291a:	2300      	movs	r3, #0
 800291c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800291e:	2300      	movs	r3, #0
 8002920:	61fb      	str	r3, [r7, #28]
 8002922:	e165      	b.n	8002bf0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002924:	2201      	movs	r2, #1
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	4013      	ands	r3, r2
 8002936:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	429a      	cmp	r2, r3
 800293e:	f040 8154 	bne.w	8002bea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	2b01      	cmp	r3, #1
 800294c:	d005      	beq.n	800295a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002956:	2b02      	cmp	r3, #2
 8002958:	d130      	bne.n	80029bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	2203      	movs	r2, #3
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002990:	2201      	movs	r2, #1
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	f003 0201 	and.w	r2, r3, #1
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d017      	beq.n	80029f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	2203      	movs	r2, #3
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d123      	bne.n	8002a4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	08da      	lsrs	r2, r3, #3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3208      	adds	r2, #8
 8002a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	220f      	movs	r2, #15
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	691a      	ldr	r2, [r3, #16]
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	08da      	lsrs	r2, r3, #3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3208      	adds	r2, #8
 8002a46:	69b9      	ldr	r1, [r7, #24]
 8002a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	2203      	movs	r2, #3
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 0203 	and.w	r2, r3, #3
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 80ae 	beq.w	8002bea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	4b5d      	ldr	r3, [pc, #372]	; (8002c08 <HAL_GPIO_Init+0x300>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	4a5c      	ldr	r2, [pc, #368]	; (8002c08 <HAL_GPIO_Init+0x300>)
 8002a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a9e:	4b5a      	ldr	r3, [pc, #360]	; (8002c08 <HAL_GPIO_Init+0x300>)
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aaa:	4a58      	ldr	r2, [pc, #352]	; (8002c0c <HAL_GPIO_Init+0x304>)
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	089b      	lsrs	r3, r3, #2
 8002ab0:	3302      	adds	r3, #2
 8002ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	220f      	movs	r2, #15
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4013      	ands	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a4f      	ldr	r2, [pc, #316]	; (8002c10 <HAL_GPIO_Init+0x308>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d025      	beq.n	8002b22 <HAL_GPIO_Init+0x21a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a4e      	ldr	r2, [pc, #312]	; (8002c14 <HAL_GPIO_Init+0x30c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d01f      	beq.n	8002b1e <HAL_GPIO_Init+0x216>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a4d      	ldr	r2, [pc, #308]	; (8002c18 <HAL_GPIO_Init+0x310>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d019      	beq.n	8002b1a <HAL_GPIO_Init+0x212>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a4c      	ldr	r2, [pc, #304]	; (8002c1c <HAL_GPIO_Init+0x314>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d013      	beq.n	8002b16 <HAL_GPIO_Init+0x20e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a4b      	ldr	r2, [pc, #300]	; (8002c20 <HAL_GPIO_Init+0x318>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d00d      	beq.n	8002b12 <HAL_GPIO_Init+0x20a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a4a      	ldr	r2, [pc, #296]	; (8002c24 <HAL_GPIO_Init+0x31c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d007      	beq.n	8002b0e <HAL_GPIO_Init+0x206>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a49      	ldr	r2, [pc, #292]	; (8002c28 <HAL_GPIO_Init+0x320>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d101      	bne.n	8002b0a <HAL_GPIO_Init+0x202>
 8002b06:	2306      	movs	r3, #6
 8002b08:	e00c      	b.n	8002b24 <HAL_GPIO_Init+0x21c>
 8002b0a:	2307      	movs	r3, #7
 8002b0c:	e00a      	b.n	8002b24 <HAL_GPIO_Init+0x21c>
 8002b0e:	2305      	movs	r3, #5
 8002b10:	e008      	b.n	8002b24 <HAL_GPIO_Init+0x21c>
 8002b12:	2304      	movs	r3, #4
 8002b14:	e006      	b.n	8002b24 <HAL_GPIO_Init+0x21c>
 8002b16:	2303      	movs	r3, #3
 8002b18:	e004      	b.n	8002b24 <HAL_GPIO_Init+0x21c>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e002      	b.n	8002b24 <HAL_GPIO_Init+0x21c>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <HAL_GPIO_Init+0x21c>
 8002b22:	2300      	movs	r3, #0
 8002b24:	69fa      	ldr	r2, [r7, #28]
 8002b26:	f002 0203 	and.w	r2, r2, #3
 8002b2a:	0092      	lsls	r2, r2, #2
 8002b2c:	4093      	lsls	r3, r2
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b34:	4935      	ldr	r1, [pc, #212]	; (8002c0c <HAL_GPIO_Init+0x304>)
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	089b      	lsrs	r3, r3, #2
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b42:	4b3a      	ldr	r3, [pc, #232]	; (8002c2c <HAL_GPIO_Init+0x324>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b66:	4a31      	ldr	r2, [pc, #196]	; (8002c2c <HAL_GPIO_Init+0x324>)
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b6c:	4b2f      	ldr	r3, [pc, #188]	; (8002c2c <HAL_GPIO_Init+0x324>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b90:	4a26      	ldr	r2, [pc, #152]	; (8002c2c <HAL_GPIO_Init+0x324>)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b96:	4b25      	ldr	r3, [pc, #148]	; (8002c2c <HAL_GPIO_Init+0x324>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bba:	4a1c      	ldr	r2, [pc, #112]	; (8002c2c <HAL_GPIO_Init+0x324>)
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bc0:	4b1a      	ldr	r3, [pc, #104]	; (8002c2c <HAL_GPIO_Init+0x324>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002be4:	4a11      	ldr	r2, [pc, #68]	; (8002c2c <HAL_GPIO_Init+0x324>)
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	3301      	adds	r3, #1
 8002bee:	61fb      	str	r3, [r7, #28]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	2b0f      	cmp	r3, #15
 8002bf4:	f67f ae96 	bls.w	8002924 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	bf00      	nop
 8002bfc:	3724      	adds	r7, #36	; 0x24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40013800 	.word	0x40013800
 8002c10:	40020000 	.word	0x40020000
 8002c14:	40020400 	.word	0x40020400
 8002c18:	40020800 	.word	0x40020800
 8002c1c:	40020c00 	.word	0x40020c00
 8002c20:	40021000 	.word	0x40021000
 8002c24:	40021400 	.word	0x40021400
 8002c28:	40021800 	.word	0x40021800
 8002c2c:	40013c00 	.word	0x40013c00

08002c30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e12b      	b.n	8002e9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fe ff0e 	bl	8001a78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2224      	movs	r2, #36	; 0x24
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0201 	bic.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c94:	f000 fe8a 	bl	80039ac <HAL_RCC_GetPCLK1Freq>
 8002c98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4a81      	ldr	r2, [pc, #516]	; (8002ea4 <HAL_I2C_Init+0x274>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d807      	bhi.n	8002cb4 <HAL_I2C_Init+0x84>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4a80      	ldr	r2, [pc, #512]	; (8002ea8 <HAL_I2C_Init+0x278>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	bf94      	ite	ls
 8002cac:	2301      	movls	r3, #1
 8002cae:	2300      	movhi	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	e006      	b.n	8002cc2 <HAL_I2C_Init+0x92>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4a7d      	ldr	r2, [pc, #500]	; (8002eac <HAL_I2C_Init+0x27c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	bf94      	ite	ls
 8002cbc:	2301      	movls	r3, #1
 8002cbe:	2300      	movhi	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e0e7      	b.n	8002e9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4a78      	ldr	r2, [pc, #480]	; (8002eb0 <HAL_I2C_Init+0x280>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	0c9b      	lsrs	r3, r3, #18
 8002cd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	4a6a      	ldr	r2, [pc, #424]	; (8002ea4 <HAL_I2C_Init+0x274>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d802      	bhi.n	8002d04 <HAL_I2C_Init+0xd4>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	3301      	adds	r3, #1
 8002d02:	e009      	b.n	8002d18 <HAL_I2C_Init+0xe8>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d0a:	fb02 f303 	mul.w	r3, r2, r3
 8002d0e:	4a69      	ldr	r2, [pc, #420]	; (8002eb4 <HAL_I2C_Init+0x284>)
 8002d10:	fba2 2303 	umull	r2, r3, r2, r3
 8002d14:	099b      	lsrs	r3, r3, #6
 8002d16:	3301      	adds	r3, #1
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	495c      	ldr	r1, [pc, #368]	; (8002ea4 <HAL_I2C_Init+0x274>)
 8002d34:	428b      	cmp	r3, r1
 8002d36:	d819      	bhi.n	8002d6c <HAL_I2C_Init+0x13c>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1e59      	subs	r1, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d46:	1c59      	adds	r1, r3, #1
 8002d48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d4c:	400b      	ands	r3, r1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_I2C_Init+0x138>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	1e59      	subs	r1, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d60:	3301      	adds	r3, #1
 8002d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d66:	e051      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002d68:	2304      	movs	r3, #4
 8002d6a:	e04f      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d111      	bne.n	8002d98 <HAL_I2C_Init+0x168>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1e58      	subs	r0, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6859      	ldr	r1, [r3, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	440b      	add	r3, r1
 8002d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d86:	3301      	adds	r3, #1
 8002d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	e012      	b.n	8002dbe <HAL_I2C_Init+0x18e>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1e58      	subs	r0, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6859      	ldr	r1, [r3, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	0099      	lsls	r1, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dae:	3301      	adds	r3, #1
 8002db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_I2C_Init+0x196>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e022      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10e      	bne.n	8002dec <HAL_I2C_Init+0x1bc>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1e58      	subs	r0, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6859      	ldr	r1, [r3, #4]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	440b      	add	r3, r1
 8002ddc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de0:	3301      	adds	r3, #1
 8002de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dea:	e00f      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1e58      	subs	r0, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6859      	ldr	r1, [r3, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	0099      	lsls	r1, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e02:	3301      	adds	r3, #1
 8002e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	6809      	ldr	r1, [r1, #0]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69da      	ldr	r2, [r3, #28]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6911      	ldr	r1, [r2, #16]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68d2      	ldr	r2, [r2, #12]
 8002e46:	4311      	orrs	r1, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	000186a0 	.word	0x000186a0
 8002ea8:	001e847f 	.word	0x001e847f
 8002eac:	003d08ff 	.word	0x003d08ff
 8002eb0:	431bde83 	.word	0x431bde83
 8002eb4:	10624dd3 	.word	0x10624dd3

08002eb8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	607a      	str	r2, [r7, #4]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	817b      	strh	r3, [r7, #10]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ecc:	f7ff f82e 	bl	8001f2c <HAL_GetTick>
 8002ed0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	f040 80e0 	bne.w	80030a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	2319      	movs	r3, #25
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	4970      	ldr	r1, [pc, #448]	; (80030ac <HAL_I2C_Master_Transmit+0x1f4>)
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 fa92 	bl	8003414 <I2C_WaitOnFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e0d3      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_I2C_Master_Transmit+0x50>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e0cc      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d007      	beq.n	8002f2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f042 0201 	orr.w	r2, r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2221      	movs	r2, #33	; 0x21
 8002f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2210      	movs	r2, #16
 8002f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	893a      	ldrh	r2, [r7, #8]
 8002f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4a50      	ldr	r2, [pc, #320]	; (80030b0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f70:	8979      	ldrh	r1, [r7, #10]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	6a3a      	ldr	r2, [r7, #32]
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 f9ca 	bl	8003310 <I2C_MasterRequestWrite>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e08d      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f86:	2300      	movs	r3, #0
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f9c:	e066      	b.n	800306c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	6a39      	ldr	r1, [r7, #32]
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 fb50 	bl	8003648 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00d      	beq.n	8002fca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d107      	bne.n	8002fc6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e06b      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	781a      	ldrb	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b04      	cmp	r3, #4
 8003006:	d11b      	bne.n	8003040 <HAL_I2C_Master_Transmit+0x188>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300c:	2b00      	cmp	r3, #0
 800300e:	d017      	beq.n	8003040 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	781a      	ldrb	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	6a39      	ldr	r1, [r7, #32]
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 fb47 	bl	80036d8 <I2C_WaitOnBTFFlagUntilTimeout>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00d      	beq.n	800306c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	2b04      	cmp	r3, #4
 8003056:	d107      	bne.n	8003068 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003066:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e01a      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003070:	2b00      	cmp	r3, #0
 8003072:	d194      	bne.n	8002f9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003082:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	e000      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030a0:	2302      	movs	r3, #2
  }
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	00100002 	.word	0x00100002
 80030b0:	ffff0000 	.word	0xffff0000

080030b4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08a      	sub	sp, #40	; 0x28
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	607a      	str	r2, [r7, #4]
 80030be:	603b      	str	r3, [r7, #0]
 80030c0:	460b      	mov	r3, r1
 80030c2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80030c4:	f7fe ff32 	bl	8001f2c <HAL_GetTick>
 80030c8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b20      	cmp	r3, #32
 80030d8:	f040 8111 	bne.w	80032fe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	2319      	movs	r3, #25
 80030e2:	2201      	movs	r2, #1
 80030e4:	4988      	ldr	r1, [pc, #544]	; (8003308 <HAL_I2C_IsDeviceReady+0x254>)
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 f994 	bl	8003414 <I2C_WaitOnFlagUntilTimeout>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80030f2:	2302      	movs	r3, #2
 80030f4:	e104      	b.n	8003300 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <HAL_I2C_IsDeviceReady+0x50>
 8003100:	2302      	movs	r3, #2
 8003102:	e0fd      	b.n	8003300 <HAL_I2C_IsDeviceReady+0x24c>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b01      	cmp	r3, #1
 8003118:	d007      	beq.n	800312a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f042 0201 	orr.w	r2, r2, #1
 8003128:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003138:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2224      	movs	r2, #36	; 0x24
 800313e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4a70      	ldr	r2, [pc, #448]	; (800330c <HAL_I2C_IsDeviceReady+0x258>)
 800314c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800315c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2200      	movs	r2, #0
 8003166:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 f952 	bl	8003414 <I2C_WaitOnFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00d      	beq.n	8003192 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003184:	d103      	bne.n	800318e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f44f 7200 	mov.w	r2, #512	; 0x200
 800318c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e0b6      	b.n	8003300 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003192:	897b      	ldrh	r3, [r7, #10]
 8003194:	b2db      	uxtb	r3, r3
 8003196:	461a      	mov	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031a0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80031a2:	f7fe fec3 	bl	8001f2c <HAL_GetTick>
 80031a6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	bf0c      	ite	eq
 80031b6:	2301      	moveq	r3, #1
 80031b8:	2300      	movne	r3, #0
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031cc:	bf0c      	ite	eq
 80031ce:	2301      	moveq	r3, #1
 80031d0:	2300      	movne	r3, #0
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80031d6:	e025      	b.n	8003224 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031d8:	f7fe fea8 	bl	8001f2c <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d302      	bcc.n	80031ee <HAL_I2C_IsDeviceReady+0x13a>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d103      	bne.n	80031f6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	22a0      	movs	r2, #160	; 0xa0
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b02      	cmp	r3, #2
 8003202:	bf0c      	ite	eq
 8003204:	2301      	moveq	r3, #1
 8003206:	2300      	movne	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2ba0      	cmp	r3, #160	; 0xa0
 800322e:	d005      	beq.n	800323c <HAL_I2C_IsDeviceReady+0x188>
 8003230:	7dfb      	ldrb	r3, [r7, #23]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d102      	bne.n	800323c <HAL_I2C_IsDeviceReady+0x188>
 8003236:	7dbb      	ldrb	r3, [r7, #22]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0cd      	beq.n	80031d8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b02      	cmp	r3, #2
 8003250:	d129      	bne.n	80032a6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003260:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003262:	2300      	movs	r3, #0
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	2319      	movs	r3, #25
 800327e:	2201      	movs	r2, #1
 8003280:	4921      	ldr	r1, [pc, #132]	; (8003308 <HAL_I2C_IsDeviceReady+0x254>)
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f8c6 	bl	8003414 <I2C_WaitOnFlagUntilTimeout>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e036      	b.n	8003300 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2220      	movs	r2, #32
 8003296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	e02c      	b.n	8003300 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032be:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	2319      	movs	r3, #25
 80032c6:	2201      	movs	r2, #1
 80032c8:	490f      	ldr	r1, [pc, #60]	; (8003308 <HAL_I2C_IsDeviceReady+0x254>)
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 f8a2 	bl	8003414 <I2C_WaitOnFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e012      	b.n	8003300 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	3301      	adds	r3, #1
 80032de:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	f4ff af32 	bcc.w	800314e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80032fe:	2302      	movs	r3, #2
  }
}
 8003300:	4618      	mov	r0, r3
 8003302:	3720      	adds	r7, #32
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	00100002 	.word	0x00100002
 800330c:	ffff0000 	.word	0xffff0000

08003310 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af02      	add	r7, sp, #8
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	607a      	str	r2, [r7, #4]
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	460b      	mov	r3, r1
 800331e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b08      	cmp	r3, #8
 800332a:	d006      	beq.n	800333a <I2C_MasterRequestWrite+0x2a>
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d003      	beq.n	800333a <I2C_MasterRequestWrite+0x2a>
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003338:	d108      	bne.n	800334c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	e00b      	b.n	8003364 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003350:	2b12      	cmp	r3, #18
 8003352:	d107      	bne.n	8003364 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003362:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 f84f 	bl	8003414 <I2C_WaitOnFlagUntilTimeout>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00d      	beq.n	8003398 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800338a:	d103      	bne.n	8003394 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003392:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e035      	b.n	8003404 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033a0:	d108      	bne.n	80033b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033a2:	897b      	ldrh	r3, [r7, #10]
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	461a      	mov	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033b0:	611a      	str	r2, [r3, #16]
 80033b2:	e01b      	b.n	80033ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033b4:	897b      	ldrh	r3, [r7, #10]
 80033b6:	11db      	asrs	r3, r3, #7
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	f003 0306 	and.w	r3, r3, #6
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	f063 030f 	orn	r3, r3, #15
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	490e      	ldr	r1, [pc, #56]	; (800340c <I2C_MasterRequestWrite+0xfc>)
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f898 	bl	8003508 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e010      	b.n	8003404 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033e2:	897b      	ldrh	r3, [r7, #10]
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	4907      	ldr	r1, [pc, #28]	; (8003410 <I2C_MasterRequestWrite+0x100>)
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 f888 	bl	8003508 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e000      	b.n	8003404 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	00010008 	.word	0x00010008
 8003410:	00010002 	.word	0x00010002

08003414 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	4613      	mov	r3, r2
 8003422:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003424:	e048      	b.n	80034b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800342c:	d044      	beq.n	80034b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342e:	f7fe fd7d 	bl	8001f2c <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d302      	bcc.n	8003444 <I2C_WaitOnFlagUntilTimeout+0x30>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d139      	bne.n	80034b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	0c1b      	lsrs	r3, r3, #16
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b01      	cmp	r3, #1
 800344c:	d10d      	bne.n	800346a <I2C_WaitOnFlagUntilTimeout+0x56>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	43da      	mvns	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	4013      	ands	r3, r2
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	bf0c      	ite	eq
 8003460:	2301      	moveq	r3, #1
 8003462:	2300      	movne	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	e00c      	b.n	8003484 <I2C_WaitOnFlagUntilTimeout+0x70>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	43da      	mvns	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	4013      	ands	r3, r2
 8003476:	b29b      	uxth	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	bf0c      	ite	eq
 800347c:	2301      	moveq	r3, #1
 800347e:	2300      	movne	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	429a      	cmp	r2, r3
 8003488:	d116      	bne.n	80034b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	f043 0220 	orr.w	r2, r3, #32
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e023      	b.n	8003500 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	0c1b      	lsrs	r3, r3, #16
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d10d      	bne.n	80034de <I2C_WaitOnFlagUntilTimeout+0xca>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	43da      	mvns	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	4013      	ands	r3, r2
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	bf0c      	ite	eq
 80034d4:	2301      	moveq	r3, #1
 80034d6:	2300      	movne	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	461a      	mov	r2, r3
 80034dc:	e00c      	b.n	80034f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	43da      	mvns	r2, r3
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	4013      	ands	r3, r2
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf0c      	ite	eq
 80034f0:	2301      	moveq	r3, #1
 80034f2:	2300      	movne	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d093      	beq.n	8003426 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003516:	e071      	b.n	80035fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003526:	d123      	bne.n	8003570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003536:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003540:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2220      	movs	r2, #32
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	f043 0204 	orr.w	r2, r3, #4
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e067      	b.n	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003576:	d041      	beq.n	80035fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003578:	f7fe fcd8 	bl	8001f2c <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	429a      	cmp	r2, r3
 8003586:	d302      	bcc.n	800358e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d136      	bne.n	80035fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	0c1b      	lsrs	r3, r3, #16
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b01      	cmp	r3, #1
 8003596:	d10c      	bne.n	80035b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	43da      	mvns	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4013      	ands	r3, r2
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	bf14      	ite	ne
 80035aa:	2301      	movne	r3, #1
 80035ac:	2300      	moveq	r3, #0
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	e00b      	b.n	80035ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	43da      	mvns	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	4013      	ands	r3, r2
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	bf14      	ite	ne
 80035c4:	2301      	movne	r3, #1
 80035c6:	2300      	moveq	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d016      	beq.n	80035fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	f043 0220 	orr.w	r2, r3, #32
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e021      	b.n	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	0c1b      	lsrs	r3, r3, #16
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b01      	cmp	r3, #1
 8003604:	d10c      	bne.n	8003620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	43da      	mvns	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	4013      	ands	r3, r2
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	bf14      	ite	ne
 8003618:	2301      	movne	r3, #1
 800361a:	2300      	moveq	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	e00b      	b.n	8003638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	43da      	mvns	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4013      	ands	r3, r2
 800362c:	b29b      	uxth	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	bf14      	ite	ne
 8003632:	2301      	movne	r3, #1
 8003634:	2300      	moveq	r3, #0
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	f47f af6d 	bne.w	8003518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003654:	e034      	b.n	80036c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 f886 	bl	8003768 <I2C_IsAcknowledgeFailed>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e034      	b.n	80036d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800366c:	d028      	beq.n	80036c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366e:	f7fe fc5d 	bl	8001f2c <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	429a      	cmp	r2, r3
 800367c:	d302      	bcc.n	8003684 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d11d      	bne.n	80036c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368e:	2b80      	cmp	r3, #128	; 0x80
 8003690:	d016      	beq.n	80036c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	f043 0220 	orr.w	r2, r3, #32
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e007      	b.n	80036d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ca:	2b80      	cmp	r3, #128	; 0x80
 80036cc:	d1c3      	bne.n	8003656 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036e4:	e034      	b.n	8003750 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 f83e 	bl	8003768 <I2C_IsAcknowledgeFailed>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e034      	b.n	8003760 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036fc:	d028      	beq.n	8003750 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fe:	f7fe fc15 	bl	8001f2c <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	429a      	cmp	r2, r3
 800370c:	d302      	bcc.n	8003714 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d11d      	bne.n	8003750 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b04      	cmp	r3, #4
 8003720:	d016      	beq.n	8003750 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	f043 0220 	orr.w	r2, r3, #32
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e007      	b.n	8003760 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	f003 0304 	and.w	r3, r3, #4
 800375a:	2b04      	cmp	r3, #4
 800375c:	d1c3      	bne.n	80036e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800377a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800377e:	d11b      	bne.n	80037b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003788:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2220      	movs	r2, #32
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	f043 0204 	orr.w	r2, r3, #4
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
	...

080037c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e0cc      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037dc:	4b68      	ldr	r3, [pc, #416]	; (8003980 <HAL_RCC_ClockConfig+0x1b8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 030f 	and.w	r3, r3, #15
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d90c      	bls.n	8003804 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ea:	4b65      	ldr	r3, [pc, #404]	; (8003980 <HAL_RCC_ClockConfig+0x1b8>)
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f2:	4b63      	ldr	r3, [pc, #396]	; (8003980 <HAL_RCC_ClockConfig+0x1b8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d001      	beq.n	8003804 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0b8      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d020      	beq.n	8003852 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800381c:	4b59      	ldr	r3, [pc, #356]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	4a58      	ldr	r2, [pc, #352]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003826:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b00      	cmp	r3, #0
 8003832:	d005      	beq.n	8003840 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003834:	4b53      	ldr	r3, [pc, #332]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	4a52      	ldr	r2, [pc, #328]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800383e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003840:	4b50      	ldr	r3, [pc, #320]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	494d      	ldr	r1, [pc, #308]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	4313      	orrs	r3, r2
 8003850:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d044      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d107      	bne.n	8003876 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003866:	4b47      	ldr	r3, [pc, #284]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d119      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e07f      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b02      	cmp	r3, #2
 800387c:	d003      	beq.n	8003886 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003882:	2b03      	cmp	r3, #3
 8003884:	d107      	bne.n	8003896 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003886:	4b3f      	ldr	r3, [pc, #252]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d109      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e06f      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003896:	4b3b      	ldr	r3, [pc, #236]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e067      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038a6:	4b37      	ldr	r3, [pc, #220]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f023 0203 	bic.w	r2, r3, #3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	4934      	ldr	r1, [pc, #208]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038b8:	f7fe fb38 	bl	8001f2c <HAL_GetTick>
 80038bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038be:	e00a      	b.n	80038d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038c0:	f7fe fb34 	bl	8001f2c <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e04f      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d6:	4b2b      	ldr	r3, [pc, #172]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 020c 	and.w	r2, r3, #12
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d1eb      	bne.n	80038c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038e8:	4b25      	ldr	r3, [pc, #148]	; (8003980 <HAL_RCC_ClockConfig+0x1b8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 030f 	and.w	r3, r3, #15
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d20c      	bcs.n	8003910 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f6:	4b22      	ldr	r3, [pc, #136]	; (8003980 <HAL_RCC_ClockConfig+0x1b8>)
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fe:	4b20      	ldr	r3, [pc, #128]	; (8003980 <HAL_RCC_ClockConfig+0x1b8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d001      	beq.n	8003910 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e032      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d008      	beq.n	800392e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800391c:	4b19      	ldr	r3, [pc, #100]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	4916      	ldr	r1, [pc, #88]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	4313      	orrs	r3, r2
 800392c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b00      	cmp	r3, #0
 8003938:	d009      	beq.n	800394e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800393a:	4b12      	ldr	r3, [pc, #72]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	490e      	ldr	r1, [pc, #56]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	4313      	orrs	r3, r2
 800394c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800394e:	f000 f887 	bl	8003a60 <HAL_RCC_GetSysClockFreq>
 8003952:	4602      	mov	r2, r0
 8003954:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	091b      	lsrs	r3, r3, #4
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	490a      	ldr	r1, [pc, #40]	; (8003988 <HAL_RCC_ClockConfig+0x1c0>)
 8003960:	5ccb      	ldrb	r3, [r1, r3]
 8003962:	fa22 f303 	lsr.w	r3, r2, r3
 8003966:	4a09      	ldr	r2, [pc, #36]	; (800398c <HAL_RCC_ClockConfig+0x1c4>)
 8003968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800396a:	4b09      	ldr	r3, [pc, #36]	; (8003990 <HAL_RCC_ClockConfig+0x1c8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f7fe f912 	bl	8001b98 <HAL_InitTick>

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40023c00 	.word	0x40023c00
 8003984:	40023800 	.word	0x40023800
 8003988:	0800c94c 	.word	0x0800c94c
 800398c:	20000010 	.word	0x20000010
 8003990:	20000014 	.word	0x20000014

08003994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003998:	4b03      	ldr	r3, [pc, #12]	; (80039a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800399a:	681b      	ldr	r3, [r3, #0]
}
 800399c:	4618      	mov	r0, r3
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	20000010 	.word	0x20000010

080039ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039b0:	f7ff fff0 	bl	8003994 <HAL_RCC_GetHCLKFreq>
 80039b4:	4602      	mov	r2, r0
 80039b6:	4b05      	ldr	r3, [pc, #20]	; (80039cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	0a9b      	lsrs	r3, r3, #10
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	4903      	ldr	r1, [pc, #12]	; (80039d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039c2:	5ccb      	ldrb	r3, [r1, r3]
 80039c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40023800 	.word	0x40023800
 80039d0:	0800c95c 	.word	0x0800c95c

080039d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039d8:	f7ff ffdc 	bl	8003994 <HAL_RCC_GetHCLKFreq>
 80039dc:	4602      	mov	r2, r0
 80039de:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	0b5b      	lsrs	r3, r3, #13
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	4903      	ldr	r1, [pc, #12]	; (80039f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ea:	5ccb      	ldrb	r3, [r1, r3]
 80039ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40023800 	.word	0x40023800
 80039f8:	0800c95c 	.word	0x0800c95c

080039fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	220f      	movs	r2, #15
 8003a0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a0c:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <HAL_RCC_GetClockConfig+0x5c>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 0203 	and.w	r2, r3, #3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a18:	4b0f      	ldr	r3, [pc, #60]	; (8003a58 <HAL_RCC_GetClockConfig+0x5c>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a24:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <HAL_RCC_GetClockConfig+0x5c>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a30:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <HAL_RCC_GetClockConfig+0x5c>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	08db      	lsrs	r3, r3, #3
 8003a36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a3e:	4b07      	ldr	r3, [pc, #28]	; (8003a5c <HAL_RCC_GetClockConfig+0x60>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 020f 	and.w	r2, r3, #15
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	601a      	str	r2, [r3, #0]
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40023c00 	.word	0x40023c00

08003a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a64:	b0ae      	sub	sp, #184	; 0xb8
 8003a66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a86:	4bcb      	ldr	r3, [pc, #812]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	2b0c      	cmp	r3, #12
 8003a90:	f200 8206 	bhi.w	8003ea0 <HAL_RCC_GetSysClockFreq+0x440>
 8003a94:	a201      	add	r2, pc, #4	; (adr r2, 8003a9c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9a:	bf00      	nop
 8003a9c:	08003ad1 	.word	0x08003ad1
 8003aa0:	08003ea1 	.word	0x08003ea1
 8003aa4:	08003ea1 	.word	0x08003ea1
 8003aa8:	08003ea1 	.word	0x08003ea1
 8003aac:	08003ad9 	.word	0x08003ad9
 8003ab0:	08003ea1 	.word	0x08003ea1
 8003ab4:	08003ea1 	.word	0x08003ea1
 8003ab8:	08003ea1 	.word	0x08003ea1
 8003abc:	08003ae1 	.word	0x08003ae1
 8003ac0:	08003ea1 	.word	0x08003ea1
 8003ac4:	08003ea1 	.word	0x08003ea1
 8003ac8:	08003ea1 	.word	0x08003ea1
 8003acc:	08003cd1 	.word	0x08003cd1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ad0:	4bb9      	ldr	r3, [pc, #740]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ad2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003ad6:	e1e7      	b.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ad8:	4bb8      	ldr	r3, [pc, #736]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x35c>)
 8003ada:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003ade:	e1e3      	b.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ae0:	4bb4      	ldr	r3, [pc, #720]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aec:	4bb1      	ldr	r3, [pc, #708]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d071      	beq.n	8003bdc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af8:	4bae      	ldr	r3, [pc, #696]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	099b      	lsrs	r3, r3, #6
 8003afe:	2200      	movs	r2, #0
 8003b00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b04:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003b08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b14:	2300      	movs	r3, #0
 8003b16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003b1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b1e:	4622      	mov	r2, r4
 8003b20:	462b      	mov	r3, r5
 8003b22:	f04f 0000 	mov.w	r0, #0
 8003b26:	f04f 0100 	mov.w	r1, #0
 8003b2a:	0159      	lsls	r1, r3, #5
 8003b2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b30:	0150      	lsls	r0, r2, #5
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	4621      	mov	r1, r4
 8003b38:	1a51      	subs	r1, r2, r1
 8003b3a:	6439      	str	r1, [r7, #64]	; 0x40
 8003b3c:	4629      	mov	r1, r5
 8003b3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b42:	647b      	str	r3, [r7, #68]	; 0x44
 8003b44:	f04f 0200 	mov.w	r2, #0
 8003b48:	f04f 0300 	mov.w	r3, #0
 8003b4c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003b50:	4649      	mov	r1, r9
 8003b52:	018b      	lsls	r3, r1, #6
 8003b54:	4641      	mov	r1, r8
 8003b56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b5a:	4641      	mov	r1, r8
 8003b5c:	018a      	lsls	r2, r1, #6
 8003b5e:	4641      	mov	r1, r8
 8003b60:	1a51      	subs	r1, r2, r1
 8003b62:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b64:	4649      	mov	r1, r9
 8003b66:	eb63 0301 	sbc.w	r3, r3, r1
 8003b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003b78:	4649      	mov	r1, r9
 8003b7a:	00cb      	lsls	r3, r1, #3
 8003b7c:	4641      	mov	r1, r8
 8003b7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b82:	4641      	mov	r1, r8
 8003b84:	00ca      	lsls	r2, r1, #3
 8003b86:	4610      	mov	r0, r2
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	4622      	mov	r2, r4
 8003b8e:	189b      	adds	r3, r3, r2
 8003b90:	633b      	str	r3, [r7, #48]	; 0x30
 8003b92:	462b      	mov	r3, r5
 8003b94:	460a      	mov	r2, r1
 8003b96:	eb42 0303 	adc.w	r3, r2, r3
 8003b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	f04f 0300 	mov.w	r3, #0
 8003ba4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ba8:	4629      	mov	r1, r5
 8003baa:	024b      	lsls	r3, r1, #9
 8003bac:	4621      	mov	r1, r4
 8003bae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bb2:	4621      	mov	r1, r4
 8003bb4:	024a      	lsls	r2, r1, #9
 8003bb6:	4610      	mov	r0, r2
 8003bb8:	4619      	mov	r1, r3
 8003bba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bc4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003bc8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003bcc:	f7fd f85c 	bl	8000c88 <__aeabi_uldivmod>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bda:	e067      	b.n	8003cac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bdc:	4b75      	ldr	r3, [pc, #468]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	099b      	lsrs	r3, r3, #6
 8003be2:	2200      	movs	r2, #0
 8003be4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003be8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003bec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bf4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003bfa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003bfe:	4622      	mov	r2, r4
 8003c00:	462b      	mov	r3, r5
 8003c02:	f04f 0000 	mov.w	r0, #0
 8003c06:	f04f 0100 	mov.w	r1, #0
 8003c0a:	0159      	lsls	r1, r3, #5
 8003c0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c10:	0150      	lsls	r0, r2, #5
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	4621      	mov	r1, r4
 8003c18:	1a51      	subs	r1, r2, r1
 8003c1a:	62b9      	str	r1, [r7, #40]	; 0x28
 8003c1c:	4629      	mov	r1, r5
 8003c1e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003c30:	4649      	mov	r1, r9
 8003c32:	018b      	lsls	r3, r1, #6
 8003c34:	4641      	mov	r1, r8
 8003c36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c3a:	4641      	mov	r1, r8
 8003c3c:	018a      	lsls	r2, r1, #6
 8003c3e:	4641      	mov	r1, r8
 8003c40:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c44:	4649      	mov	r1, r9
 8003c46:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	f04f 0300 	mov.w	r3, #0
 8003c52:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c56:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c5e:	4692      	mov	sl, r2
 8003c60:	469b      	mov	fp, r3
 8003c62:	4623      	mov	r3, r4
 8003c64:	eb1a 0303 	adds.w	r3, sl, r3
 8003c68:	623b      	str	r3, [r7, #32]
 8003c6a:	462b      	mov	r3, r5
 8003c6c:	eb4b 0303 	adc.w	r3, fp, r3
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	f04f 0300 	mov.w	r3, #0
 8003c7a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003c7e:	4629      	mov	r1, r5
 8003c80:	028b      	lsls	r3, r1, #10
 8003c82:	4621      	mov	r1, r4
 8003c84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c88:	4621      	mov	r1, r4
 8003c8a:	028a      	lsls	r2, r1, #10
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	4619      	mov	r1, r3
 8003c90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c94:	2200      	movs	r2, #0
 8003c96:	673b      	str	r3, [r7, #112]	; 0x70
 8003c98:	677a      	str	r2, [r7, #116]	; 0x74
 8003c9a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003c9e:	f7fc fff3 	bl	8000c88 <__aeabi_uldivmod>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cac:	4b41      	ldr	r3, [pc, #260]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	0c1b      	lsrs	r3, r3, #16
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003cbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003cce:	e0eb      	b.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cd0:	4b38      	ldr	r3, [pc, #224]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cdc:	4b35      	ldr	r3, [pc, #212]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d06b      	beq.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce8:	4b32      	ldr	r3, [pc, #200]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	099b      	lsrs	r3, r3, #6
 8003cee:	2200      	movs	r2, #0
 8003cf0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cf2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003cf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cfa:	663b      	str	r3, [r7, #96]	; 0x60
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	667b      	str	r3, [r7, #100]	; 0x64
 8003d00:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003d04:	4622      	mov	r2, r4
 8003d06:	462b      	mov	r3, r5
 8003d08:	f04f 0000 	mov.w	r0, #0
 8003d0c:	f04f 0100 	mov.w	r1, #0
 8003d10:	0159      	lsls	r1, r3, #5
 8003d12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d16:	0150      	lsls	r0, r2, #5
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	1a51      	subs	r1, r2, r1
 8003d20:	61b9      	str	r1, [r7, #24]
 8003d22:	4629      	mov	r1, r5
 8003d24:	eb63 0301 	sbc.w	r3, r3, r1
 8003d28:	61fb      	str	r3, [r7, #28]
 8003d2a:	f04f 0200 	mov.w	r2, #0
 8003d2e:	f04f 0300 	mov.w	r3, #0
 8003d32:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003d36:	4659      	mov	r1, fp
 8003d38:	018b      	lsls	r3, r1, #6
 8003d3a:	4651      	mov	r1, sl
 8003d3c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d40:	4651      	mov	r1, sl
 8003d42:	018a      	lsls	r2, r1, #6
 8003d44:	4651      	mov	r1, sl
 8003d46:	ebb2 0801 	subs.w	r8, r2, r1
 8003d4a:	4659      	mov	r1, fp
 8003d4c:	eb63 0901 	sbc.w	r9, r3, r1
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	f04f 0300 	mov.w	r3, #0
 8003d58:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d5c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d60:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d64:	4690      	mov	r8, r2
 8003d66:	4699      	mov	r9, r3
 8003d68:	4623      	mov	r3, r4
 8003d6a:	eb18 0303 	adds.w	r3, r8, r3
 8003d6e:	613b      	str	r3, [r7, #16]
 8003d70:	462b      	mov	r3, r5
 8003d72:	eb49 0303 	adc.w	r3, r9, r3
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003d84:	4629      	mov	r1, r5
 8003d86:	024b      	lsls	r3, r1, #9
 8003d88:	4621      	mov	r1, r4
 8003d8a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d8e:	4621      	mov	r1, r4
 8003d90:	024a      	lsls	r2, r1, #9
 8003d92:	4610      	mov	r0, r2
 8003d94:	4619      	mov	r1, r3
 8003d96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d9e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003da0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003da4:	f7fc ff70 	bl	8000c88 <__aeabi_uldivmod>
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	4613      	mov	r3, r2
 8003dae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003db2:	e065      	b.n	8003e80 <HAL_RCC_GetSysClockFreq+0x420>
 8003db4:	40023800 	.word	0x40023800
 8003db8:	00f42400 	.word	0x00f42400
 8003dbc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dc0:	4b3d      	ldr	r3, [pc, #244]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	099b      	lsrs	r3, r3, #6
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	4618      	mov	r0, r3
 8003dca:	4611      	mov	r1, r2
 8003dcc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003dd0:	653b      	str	r3, [r7, #80]	; 0x50
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	657b      	str	r3, [r7, #84]	; 0x54
 8003dd6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003dda:	4642      	mov	r2, r8
 8003ddc:	464b      	mov	r3, r9
 8003dde:	f04f 0000 	mov.w	r0, #0
 8003de2:	f04f 0100 	mov.w	r1, #0
 8003de6:	0159      	lsls	r1, r3, #5
 8003de8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dec:	0150      	lsls	r0, r2, #5
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	4641      	mov	r1, r8
 8003df4:	1a51      	subs	r1, r2, r1
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	4649      	mov	r1, r9
 8003dfa:	eb63 0301 	sbc.w	r3, r3, r1
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	f04f 0200 	mov.w	r2, #0
 8003e04:	f04f 0300 	mov.w	r3, #0
 8003e08:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003e0c:	4659      	mov	r1, fp
 8003e0e:	018b      	lsls	r3, r1, #6
 8003e10:	4651      	mov	r1, sl
 8003e12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e16:	4651      	mov	r1, sl
 8003e18:	018a      	lsls	r2, r1, #6
 8003e1a:	4651      	mov	r1, sl
 8003e1c:	1a54      	subs	r4, r2, r1
 8003e1e:	4659      	mov	r1, fp
 8003e20:	eb63 0501 	sbc.w	r5, r3, r1
 8003e24:	f04f 0200 	mov.w	r2, #0
 8003e28:	f04f 0300 	mov.w	r3, #0
 8003e2c:	00eb      	lsls	r3, r5, #3
 8003e2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e32:	00e2      	lsls	r2, r4, #3
 8003e34:	4614      	mov	r4, r2
 8003e36:	461d      	mov	r5, r3
 8003e38:	4643      	mov	r3, r8
 8003e3a:	18e3      	adds	r3, r4, r3
 8003e3c:	603b      	str	r3, [r7, #0]
 8003e3e:	464b      	mov	r3, r9
 8003e40:	eb45 0303 	adc.w	r3, r5, r3
 8003e44:	607b      	str	r3, [r7, #4]
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	f04f 0300 	mov.w	r3, #0
 8003e4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e52:	4629      	mov	r1, r5
 8003e54:	028b      	lsls	r3, r1, #10
 8003e56:	4621      	mov	r1, r4
 8003e58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e5c:	4621      	mov	r1, r4
 8003e5e:	028a      	lsls	r2, r1, #10
 8003e60:	4610      	mov	r0, r2
 8003e62:	4619      	mov	r1, r3
 8003e64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e68:	2200      	movs	r2, #0
 8003e6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e6c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003e6e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e72:	f7fc ff09 	bl	8000c88 <__aeabi_uldivmod>
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003e80:	4b0d      	ldr	r3, [pc, #52]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	0f1b      	lsrs	r3, r3, #28
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003e8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e9e:	e003      	b.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ea0:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x45c>)
 8003ea2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003ea6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ea8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	37b8      	adds	r7, #184	; 0xb8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	00f42400 	.word	0x00f42400

08003ec0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e28d      	b.n	80043ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 8083 	beq.w	8003fe6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ee0:	4b94      	ldr	r3, [pc, #592]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 030c 	and.w	r3, r3, #12
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d019      	beq.n	8003f20 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003eec:	4b91      	ldr	r3, [pc, #580]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d106      	bne.n	8003f06 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ef8:	4b8e      	ldr	r3, [pc, #568]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f04:	d00c      	beq.n	8003f20 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f06:	4b8b      	ldr	r3, [pc, #556]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f0e:	2b0c      	cmp	r3, #12
 8003f10:	d112      	bne.n	8003f38 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f12:	4b88      	ldr	r3, [pc, #544]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f1e:	d10b      	bne.n	8003f38 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f20:	4b84      	ldr	r3, [pc, #528]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d05b      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x124>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d157      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e25a      	b.n	80043ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f40:	d106      	bne.n	8003f50 <HAL_RCC_OscConfig+0x90>
 8003f42:	4b7c      	ldr	r3, [pc, #496]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a7b      	ldr	r2, [pc, #492]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 8003f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	e01d      	b.n	8003f8c <HAL_RCC_OscConfig+0xcc>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f58:	d10c      	bne.n	8003f74 <HAL_RCC_OscConfig+0xb4>
 8003f5a:	4b76      	ldr	r3, [pc, #472]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a75      	ldr	r2, [pc, #468]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 8003f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	4b73      	ldr	r3, [pc, #460]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a72      	ldr	r2, [pc, #456]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 8003f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	e00b      	b.n	8003f8c <HAL_RCC_OscConfig+0xcc>
 8003f74:	4b6f      	ldr	r3, [pc, #444]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a6e      	ldr	r2, [pc, #440]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 8003f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f7e:	6013      	str	r3, [r2, #0]
 8003f80:	4b6c      	ldr	r3, [pc, #432]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a6b      	ldr	r2, [pc, #428]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 8003f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d013      	beq.n	8003fbc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f94:	f7fd ffca 	bl	8001f2c <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f9c:	f7fd ffc6 	bl	8001f2c <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b64      	cmp	r3, #100	; 0x64
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e21f      	b.n	80043ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fae:	4b61      	ldr	r3, [pc, #388]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0f0      	beq.n	8003f9c <HAL_RCC_OscConfig+0xdc>
 8003fba:	e014      	b.n	8003fe6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fbc:	f7fd ffb6 	bl	8001f2c <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fc4:	f7fd ffb2 	bl	8001f2c <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b64      	cmp	r3, #100	; 0x64
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e20b      	b.n	80043ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fd6:	4b57      	ldr	r3, [pc, #348]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f0      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x104>
 8003fe2:	e000      	b.n	8003fe6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d06f      	beq.n	80040d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ff2:	4b50      	ldr	r3, [pc, #320]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 030c 	and.w	r3, r3, #12
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d017      	beq.n	800402e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ffe:	4b4d      	ldr	r3, [pc, #308]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004006:	2b08      	cmp	r3, #8
 8004008:	d105      	bne.n	8004016 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800400a:	4b4a      	ldr	r3, [pc, #296]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00b      	beq.n	800402e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004016:	4b47      	ldr	r3, [pc, #284]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800401e:	2b0c      	cmp	r3, #12
 8004020:	d11c      	bne.n	800405c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004022:	4b44      	ldr	r3, [pc, #272]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d116      	bne.n	800405c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402e:	4b41      	ldr	r3, [pc, #260]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d005      	beq.n	8004046 <HAL_RCC_OscConfig+0x186>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d001      	beq.n	8004046 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e1d3      	b.n	80043ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004046:	4b3b      	ldr	r3, [pc, #236]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	4937      	ldr	r1, [pc, #220]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 8004056:	4313      	orrs	r3, r2
 8004058:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800405a:	e03a      	b.n	80040d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d020      	beq.n	80040a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004064:	4b34      	ldr	r3, [pc, #208]	; (8004138 <HAL_RCC_OscConfig+0x278>)
 8004066:	2201      	movs	r2, #1
 8004068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406a:	f7fd ff5f 	bl	8001f2c <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004072:	f7fd ff5b 	bl	8001f2c <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e1b4      	b.n	80043ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004084:	4b2b      	ldr	r3, [pc, #172]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0f0      	beq.n	8004072 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004090:	4b28      	ldr	r3, [pc, #160]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	4925      	ldr	r1, [pc, #148]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	600b      	str	r3, [r1, #0]
 80040a4:	e015      	b.n	80040d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040a6:	4b24      	ldr	r3, [pc, #144]	; (8004138 <HAL_RCC_OscConfig+0x278>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ac:	f7fd ff3e 	bl	8001f2c <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040b4:	f7fd ff3a 	bl	8001f2c <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e193      	b.n	80043ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c6:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d036      	beq.n	800414c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d016      	beq.n	8004114 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040e6:	4b15      	ldr	r3, [pc, #84]	; (800413c <HAL_RCC_OscConfig+0x27c>)
 80040e8:	2201      	movs	r2, #1
 80040ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ec:	f7fd ff1e 	bl	8001f2c <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040f4:	f7fd ff1a 	bl	8001f2c <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e173      	b.n	80043ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004106:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <HAL_RCC_OscConfig+0x274>)
 8004108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0f0      	beq.n	80040f4 <HAL_RCC_OscConfig+0x234>
 8004112:	e01b      	b.n	800414c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004114:	4b09      	ldr	r3, [pc, #36]	; (800413c <HAL_RCC_OscConfig+0x27c>)
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800411a:	f7fd ff07 	bl	8001f2c <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004120:	e00e      	b.n	8004140 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004122:	f7fd ff03 	bl	8001f2c <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d907      	bls.n	8004140 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e15c      	b.n	80043ee <HAL_RCC_OscConfig+0x52e>
 8004134:	40023800 	.word	0x40023800
 8004138:	42470000 	.word	0x42470000
 800413c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004140:	4b8a      	ldr	r3, [pc, #552]	; (800436c <HAL_RCC_OscConfig+0x4ac>)
 8004142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1ea      	bne.n	8004122 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 8097 	beq.w	8004288 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800415a:	2300      	movs	r3, #0
 800415c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800415e:	4b83      	ldr	r3, [pc, #524]	; (800436c <HAL_RCC_OscConfig+0x4ac>)
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10f      	bne.n	800418a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800416a:	2300      	movs	r3, #0
 800416c:	60bb      	str	r3, [r7, #8]
 800416e:	4b7f      	ldr	r3, [pc, #508]	; (800436c <HAL_RCC_OscConfig+0x4ac>)
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	4a7e      	ldr	r2, [pc, #504]	; (800436c <HAL_RCC_OscConfig+0x4ac>)
 8004174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004178:	6413      	str	r3, [r2, #64]	; 0x40
 800417a:	4b7c      	ldr	r3, [pc, #496]	; (800436c <HAL_RCC_OscConfig+0x4ac>)
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004182:	60bb      	str	r3, [r7, #8]
 8004184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004186:	2301      	movs	r3, #1
 8004188:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418a:	4b79      	ldr	r3, [pc, #484]	; (8004370 <HAL_RCC_OscConfig+0x4b0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004192:	2b00      	cmp	r3, #0
 8004194:	d118      	bne.n	80041c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004196:	4b76      	ldr	r3, [pc, #472]	; (8004370 <HAL_RCC_OscConfig+0x4b0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a75      	ldr	r2, [pc, #468]	; (8004370 <HAL_RCC_OscConfig+0x4b0>)
 800419c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041a2:	f7fd fec3 	bl	8001f2c <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041aa:	f7fd febf 	bl	8001f2c <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e118      	b.n	80043ee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041bc:	4b6c      	ldr	r3, [pc, #432]	; (8004370 <HAL_RCC_OscConfig+0x4b0>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0f0      	beq.n	80041aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d106      	bne.n	80041de <HAL_RCC_OscConfig+0x31e>
 80041d0:	4b66      	ldr	r3, [pc, #408]	; (800436c <HAL_RCC_OscConfig+0x4ac>)
 80041d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d4:	4a65      	ldr	r2, [pc, #404]	; (800436c <HAL_RCC_OscConfig+0x4ac>)
 80041d6:	f043 0301 	orr.w	r3, r3, #1
 80041da:	6713      	str	r3, [r2, #112]	; 0x70
 80041dc:	e01c      	b.n	8004218 <HAL_RCC_OscConfig+0x358>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2b05      	cmp	r3, #5
 80041e4:	d10c      	bne.n	8004200 <HAL_RCC_OscConfig+0x340>
 80041e6:	4b61      	ldr	r3, [pc, #388]	; (800436c <HAL_RCC_OscConfig+0x4ac>)
 80041e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ea:	4a60      	ldr	r2, [pc, #384]	; (800436c <HAL_RCC_OscConfig+0x4ac>)
 80041ec:	f043 0304 	orr.w	r3, r3, #4
 80041f0:	6713      	str	r3, [r2, #112]	; 0x70
 80041f2:	4b5e      	ldr	r3, [pc, #376]	; (800436c <HAL_RCC_OscConfig+0x4ac>)
 80041f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f6:	4a5d      	ldr	r2, [pc, #372]	; (800436c <HAL_RCC_OscConfig+0x4ac>)
 80041f8:	f043 0301 	orr.w	r3, r3, #1
 80041fc:	6713      	str	r3, [r2, #112]	; 0x70
 80041fe:	e00b      	b.n	8004218 <HAL_RCC_OscConfig+0x358>
 8004200:	4b5a      	ldr	r3, [pc, #360]	; (800436c <HAL_RCC_OscConfig+0x4ac>)
 8004202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004204:	4a59      	ldr	r2, [pc, #356]	; (800436c <HAL_RCC_OscConfig+0x4ac>)
 8004206:	f023 0301 	bic.w	r3, r3, #1
 800420a:	6713      	str	r3, [r2, #112]	; 0x70
 800420c:	4b57      	ldr	r3, [pc, #348]	; (800436c <HAL_RCC_OscConfig+0x4ac>)
 800420e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004210:	4a56      	ldr	r2, [pc, #344]	; (800436c <HAL_RCC_OscConfig+0x4ac>)
 8004212:	f023 0304 	bic.w	r3, r3, #4
 8004216:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d015      	beq.n	800424c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004220:	f7fd fe84 	bl	8001f2c <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004226:	e00a      	b.n	800423e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004228:	f7fd fe80 	bl	8001f2c <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f241 3288 	movw	r2, #5000	; 0x1388
 8004236:	4293      	cmp	r3, r2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e0d7      	b.n	80043ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423e:	4b4b      	ldr	r3, [pc, #300]	; (800436c <HAL_RCC_OscConfig+0x4ac>)
 8004240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0ee      	beq.n	8004228 <HAL_RCC_OscConfig+0x368>
 800424a:	e014      	b.n	8004276 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424c:	f7fd fe6e 	bl	8001f2c <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004252:	e00a      	b.n	800426a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004254:	f7fd fe6a 	bl	8001f2c <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004262:	4293      	cmp	r3, r2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e0c1      	b.n	80043ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800426a:	4b40      	ldr	r3, [pc, #256]	; (800436c <HAL_RCC_OscConfig+0x4ac>)
 800426c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1ee      	bne.n	8004254 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004276:	7dfb      	ldrb	r3, [r7, #23]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d105      	bne.n	8004288 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800427c:	4b3b      	ldr	r3, [pc, #236]	; (800436c <HAL_RCC_OscConfig+0x4ac>)
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	4a3a      	ldr	r2, [pc, #232]	; (800436c <HAL_RCC_OscConfig+0x4ac>)
 8004282:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004286:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 80ad 	beq.w	80043ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004292:	4b36      	ldr	r3, [pc, #216]	; (800436c <HAL_RCC_OscConfig+0x4ac>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 030c 	and.w	r3, r3, #12
 800429a:	2b08      	cmp	r3, #8
 800429c:	d060      	beq.n	8004360 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d145      	bne.n	8004332 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a6:	4b33      	ldr	r3, [pc, #204]	; (8004374 <HAL_RCC_OscConfig+0x4b4>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ac:	f7fd fe3e 	bl	8001f2c <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042b4:	f7fd fe3a 	bl	8001f2c <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e093      	b.n	80043ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c6:	4b29      	ldr	r3, [pc, #164]	; (800436c <HAL_RCC_OscConfig+0x4ac>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f0      	bne.n	80042b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69da      	ldr	r2, [r3, #28]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	019b      	lsls	r3, r3, #6
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e8:	085b      	lsrs	r3, r3, #1
 80042ea:	3b01      	subs	r3, #1
 80042ec:	041b      	lsls	r3, r3, #16
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f4:	061b      	lsls	r3, r3, #24
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fc:	071b      	lsls	r3, r3, #28
 80042fe:	491b      	ldr	r1, [pc, #108]	; (800436c <HAL_RCC_OscConfig+0x4ac>)
 8004300:	4313      	orrs	r3, r2
 8004302:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004304:	4b1b      	ldr	r3, [pc, #108]	; (8004374 <HAL_RCC_OscConfig+0x4b4>)
 8004306:	2201      	movs	r2, #1
 8004308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430a:	f7fd fe0f 	bl	8001f2c <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004312:	f7fd fe0b 	bl	8001f2c <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e064      	b.n	80043ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004324:	4b11      	ldr	r3, [pc, #68]	; (800436c <HAL_RCC_OscConfig+0x4ac>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0f0      	beq.n	8004312 <HAL_RCC_OscConfig+0x452>
 8004330:	e05c      	b.n	80043ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004332:	4b10      	ldr	r3, [pc, #64]	; (8004374 <HAL_RCC_OscConfig+0x4b4>)
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004338:	f7fd fdf8 	bl	8001f2c <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004340:	f7fd fdf4 	bl	8001f2c <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e04d      	b.n	80043ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004352:	4b06      	ldr	r3, [pc, #24]	; (800436c <HAL_RCC_OscConfig+0x4ac>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1f0      	bne.n	8004340 <HAL_RCC_OscConfig+0x480>
 800435e:	e045      	b.n	80043ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d107      	bne.n	8004378 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e040      	b.n	80043ee <HAL_RCC_OscConfig+0x52e>
 800436c:	40023800 	.word	0x40023800
 8004370:	40007000 	.word	0x40007000
 8004374:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004378:	4b1f      	ldr	r3, [pc, #124]	; (80043f8 <HAL_RCC_OscConfig+0x538>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d030      	beq.n	80043e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004390:	429a      	cmp	r2, r3
 8004392:	d129      	bne.n	80043e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800439e:	429a      	cmp	r2, r3
 80043a0:	d122      	bne.n	80043e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043a8:	4013      	ands	r3, r2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d119      	bne.n	80043e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043be:	085b      	lsrs	r3, r3, #1
 80043c0:	3b01      	subs	r3, #1
 80043c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d10f      	bne.n	80043e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d107      	bne.n	80043e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d001      	beq.n	80043ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e000      	b.n	80043ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40023800 	.word	0x40023800

080043fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e041      	b.n	8004492 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d106      	bne.n	8004428 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f839 	bl	800449a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3304      	adds	r3, #4
 8004438:	4619      	mov	r1, r3
 800443a:	4610      	mov	r0, r2
 800443c:	f000 f9c0 	bl	80047c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
	...

080044b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d001      	beq.n	80044c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e04e      	b.n	8004566 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0201 	orr.w	r2, r2, #1
 80044de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a23      	ldr	r2, [pc, #140]	; (8004574 <HAL_TIM_Base_Start_IT+0xc4>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d022      	beq.n	8004530 <HAL_TIM_Base_Start_IT+0x80>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f2:	d01d      	beq.n	8004530 <HAL_TIM_Base_Start_IT+0x80>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a1f      	ldr	r2, [pc, #124]	; (8004578 <HAL_TIM_Base_Start_IT+0xc8>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d018      	beq.n	8004530 <HAL_TIM_Base_Start_IT+0x80>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a1e      	ldr	r2, [pc, #120]	; (800457c <HAL_TIM_Base_Start_IT+0xcc>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d013      	beq.n	8004530 <HAL_TIM_Base_Start_IT+0x80>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a1c      	ldr	r2, [pc, #112]	; (8004580 <HAL_TIM_Base_Start_IT+0xd0>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d00e      	beq.n	8004530 <HAL_TIM_Base_Start_IT+0x80>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a1b      	ldr	r2, [pc, #108]	; (8004584 <HAL_TIM_Base_Start_IT+0xd4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d009      	beq.n	8004530 <HAL_TIM_Base_Start_IT+0x80>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a19      	ldr	r2, [pc, #100]	; (8004588 <HAL_TIM_Base_Start_IT+0xd8>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d004      	beq.n	8004530 <HAL_TIM_Base_Start_IT+0x80>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a18      	ldr	r2, [pc, #96]	; (800458c <HAL_TIM_Base_Start_IT+0xdc>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d111      	bne.n	8004554 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2b06      	cmp	r3, #6
 8004540:	d010      	beq.n	8004564 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f042 0201 	orr.w	r2, r2, #1
 8004550:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004552:	e007      	b.n	8004564 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0201 	orr.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	40010000 	.word	0x40010000
 8004578:	40000400 	.word	0x40000400
 800457c:	40000800 	.word	0x40000800
 8004580:	40000c00 	.word	0x40000c00
 8004584:	40010400 	.word	0x40010400
 8004588:	40014000 	.word	0x40014000
 800458c:	40001800 	.word	0x40001800

08004590 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d020      	beq.n	80045f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d01b      	beq.n	80045f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f06f 0202 	mvn.w	r2, #2
 80045c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f8d2 	bl	8004784 <HAL_TIM_IC_CaptureCallback>
 80045e0:	e005      	b.n	80045ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f8c4 	bl	8004770 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 f8d5 	bl	8004798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d020      	beq.n	8004640 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	d01b      	beq.n	8004640 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f06f 0204 	mvn.w	r2, #4
 8004610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2202      	movs	r2, #2
 8004616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f8ac 	bl	8004784 <HAL_TIM_IC_CaptureCallback>
 800462c:	e005      	b.n	800463a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f89e 	bl	8004770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f8af 	bl	8004798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	2b00      	cmp	r3, #0
 8004648:	d020      	beq.n	800468c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f003 0308 	and.w	r3, r3, #8
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01b      	beq.n	800468c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0208 	mvn.w	r2, #8
 800465c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2204      	movs	r2, #4
 8004662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f886 	bl	8004784 <HAL_TIM_IC_CaptureCallback>
 8004678:	e005      	b.n	8004686 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f878 	bl	8004770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f889 	bl	8004798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f003 0310 	and.w	r3, r3, #16
 8004692:	2b00      	cmp	r3, #0
 8004694:	d020      	beq.n	80046d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f003 0310 	and.w	r3, r3, #16
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01b      	beq.n	80046d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f06f 0210 	mvn.w	r2, #16
 80046a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2208      	movs	r2, #8
 80046ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f860 	bl	8004784 <HAL_TIM_IC_CaptureCallback>
 80046c4:	e005      	b.n	80046d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f852 	bl	8004770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f863 	bl	8004798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00c      	beq.n	80046fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d007      	beq.n	80046fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f06f 0201 	mvn.w	r2, #1
 80046f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7fc fe6e 	bl	80013d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00c      	beq.n	8004720 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470c:	2b00      	cmp	r3, #0
 800470e:	d007      	beq.n	8004720 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f906 	bl	800492c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00c      	beq.n	8004744 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004730:	2b00      	cmp	r3, #0
 8004732:	d007      	beq.n	8004744 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800473c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f834 	bl	80047ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00c      	beq.n	8004768 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f003 0320 	and.w	r3, r3, #32
 8004754:	2b00      	cmp	r3, #0
 8004756:	d007      	beq.n	8004768 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f06f 0220 	mvn.w	r2, #32
 8004760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f8d8 	bl	8004918 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004768:	bf00      	nop
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a46      	ldr	r2, [pc, #280]	; (80048ec <TIM_Base_SetConfig+0x12c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d013      	beq.n	8004800 <TIM_Base_SetConfig+0x40>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047de:	d00f      	beq.n	8004800 <TIM_Base_SetConfig+0x40>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a43      	ldr	r2, [pc, #268]	; (80048f0 <TIM_Base_SetConfig+0x130>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00b      	beq.n	8004800 <TIM_Base_SetConfig+0x40>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a42      	ldr	r2, [pc, #264]	; (80048f4 <TIM_Base_SetConfig+0x134>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d007      	beq.n	8004800 <TIM_Base_SetConfig+0x40>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a41      	ldr	r2, [pc, #260]	; (80048f8 <TIM_Base_SetConfig+0x138>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d003      	beq.n	8004800 <TIM_Base_SetConfig+0x40>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a40      	ldr	r2, [pc, #256]	; (80048fc <TIM_Base_SetConfig+0x13c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d108      	bne.n	8004812 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	4313      	orrs	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a35      	ldr	r2, [pc, #212]	; (80048ec <TIM_Base_SetConfig+0x12c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d02b      	beq.n	8004872 <TIM_Base_SetConfig+0xb2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004820:	d027      	beq.n	8004872 <TIM_Base_SetConfig+0xb2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a32      	ldr	r2, [pc, #200]	; (80048f0 <TIM_Base_SetConfig+0x130>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d023      	beq.n	8004872 <TIM_Base_SetConfig+0xb2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a31      	ldr	r2, [pc, #196]	; (80048f4 <TIM_Base_SetConfig+0x134>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d01f      	beq.n	8004872 <TIM_Base_SetConfig+0xb2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a30      	ldr	r2, [pc, #192]	; (80048f8 <TIM_Base_SetConfig+0x138>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d01b      	beq.n	8004872 <TIM_Base_SetConfig+0xb2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a2f      	ldr	r2, [pc, #188]	; (80048fc <TIM_Base_SetConfig+0x13c>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d017      	beq.n	8004872 <TIM_Base_SetConfig+0xb2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a2e      	ldr	r2, [pc, #184]	; (8004900 <TIM_Base_SetConfig+0x140>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d013      	beq.n	8004872 <TIM_Base_SetConfig+0xb2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a2d      	ldr	r2, [pc, #180]	; (8004904 <TIM_Base_SetConfig+0x144>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00f      	beq.n	8004872 <TIM_Base_SetConfig+0xb2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a2c      	ldr	r2, [pc, #176]	; (8004908 <TIM_Base_SetConfig+0x148>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00b      	beq.n	8004872 <TIM_Base_SetConfig+0xb2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a2b      	ldr	r2, [pc, #172]	; (800490c <TIM_Base_SetConfig+0x14c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d007      	beq.n	8004872 <TIM_Base_SetConfig+0xb2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a2a      	ldr	r2, [pc, #168]	; (8004910 <TIM_Base_SetConfig+0x150>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d003      	beq.n	8004872 <TIM_Base_SetConfig+0xb2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a29      	ldr	r2, [pc, #164]	; (8004914 <TIM_Base_SetConfig+0x154>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d108      	bne.n	8004884 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	4313      	orrs	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	689a      	ldr	r2, [r3, #8]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a10      	ldr	r2, [pc, #64]	; (80048ec <TIM_Base_SetConfig+0x12c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d003      	beq.n	80048b8 <TIM_Base_SetConfig+0xf8>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a12      	ldr	r2, [pc, #72]	; (80048fc <TIM_Base_SetConfig+0x13c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d103      	bne.n	80048c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	691a      	ldr	r2, [r3, #16]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d105      	bne.n	80048de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	f023 0201 	bic.w	r2, r3, #1
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	611a      	str	r2, [r3, #16]
  }
}
 80048de:	bf00      	nop
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	40010000 	.word	0x40010000
 80048f0:	40000400 	.word	0x40000400
 80048f4:	40000800 	.word	0x40000800
 80048f8:	40000c00 	.word	0x40000c00
 80048fc:	40010400 	.word	0x40010400
 8004900:	40014000 	.word	0x40014000
 8004904:	40014400 	.word	0x40014400
 8004908:	40014800 	.word	0x40014800
 800490c:	40001800 	.word	0x40001800
 8004910:	40001c00 	.word	0x40001c00
 8004914:	40002000 	.word	0x40002000

08004918 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e042      	b.n	80049d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d106      	bne.n	800496c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7fd f8ce 	bl	8001b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2224      	movs	r2, #36	; 0x24
 8004970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004982:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f82b 	bl	80049e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	691a      	ldr	r2, [r3, #16]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004998:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	695a      	ldr	r2, [r3, #20]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049e4:	b0c0      	sub	sp, #256	; 0x100
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fc:	68d9      	ldr	r1, [r3, #12]
 80049fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	ea40 0301 	orr.w	r3, r0, r1
 8004a08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	431a      	orrs	r2, r3
 8004a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a38:	f021 010c 	bic.w	r1, r1, #12
 8004a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a46:	430b      	orrs	r3, r1
 8004a48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5a:	6999      	ldr	r1, [r3, #24]
 8004a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	ea40 0301 	orr.w	r3, r0, r1
 8004a66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	4b8f      	ldr	r3, [pc, #572]	; (8004cac <UART_SetConfig+0x2cc>)
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d005      	beq.n	8004a80 <UART_SetConfig+0xa0>
 8004a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	4b8d      	ldr	r3, [pc, #564]	; (8004cb0 <UART_SetConfig+0x2d0>)
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d104      	bne.n	8004a8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a80:	f7fe ffa8 	bl	80039d4 <HAL_RCC_GetPCLK2Freq>
 8004a84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a88:	e003      	b.n	8004a92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a8a:	f7fe ff8f 	bl	80039ac <HAL_RCC_GetPCLK1Freq>
 8004a8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a9c:	f040 810c 	bne.w	8004cb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004aa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004aaa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004aae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ab2:	4622      	mov	r2, r4
 8004ab4:	462b      	mov	r3, r5
 8004ab6:	1891      	adds	r1, r2, r2
 8004ab8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004aba:	415b      	adcs	r3, r3
 8004abc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004abe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ac2:	4621      	mov	r1, r4
 8004ac4:	eb12 0801 	adds.w	r8, r2, r1
 8004ac8:	4629      	mov	r1, r5
 8004aca:	eb43 0901 	adc.w	r9, r3, r1
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	f04f 0300 	mov.w	r3, #0
 8004ad6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ada:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ade:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ae2:	4690      	mov	r8, r2
 8004ae4:	4699      	mov	r9, r3
 8004ae6:	4623      	mov	r3, r4
 8004ae8:	eb18 0303 	adds.w	r3, r8, r3
 8004aec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004af0:	462b      	mov	r3, r5
 8004af2:	eb49 0303 	adc.w	r3, r9, r3
 8004af6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b0e:	460b      	mov	r3, r1
 8004b10:	18db      	adds	r3, r3, r3
 8004b12:	653b      	str	r3, [r7, #80]	; 0x50
 8004b14:	4613      	mov	r3, r2
 8004b16:	eb42 0303 	adc.w	r3, r2, r3
 8004b1a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b24:	f7fc f8b0 	bl	8000c88 <__aeabi_uldivmod>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4b61      	ldr	r3, [pc, #388]	; (8004cb4 <UART_SetConfig+0x2d4>)
 8004b2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b32:	095b      	lsrs	r3, r3, #5
 8004b34:	011c      	lsls	r4, r3, #4
 8004b36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b48:	4642      	mov	r2, r8
 8004b4a:	464b      	mov	r3, r9
 8004b4c:	1891      	adds	r1, r2, r2
 8004b4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b50:	415b      	adcs	r3, r3
 8004b52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b58:	4641      	mov	r1, r8
 8004b5a:	eb12 0a01 	adds.w	sl, r2, r1
 8004b5e:	4649      	mov	r1, r9
 8004b60:	eb43 0b01 	adc.w	fp, r3, r1
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b78:	4692      	mov	sl, r2
 8004b7a:	469b      	mov	fp, r3
 8004b7c:	4643      	mov	r3, r8
 8004b7e:	eb1a 0303 	adds.w	r3, sl, r3
 8004b82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b86:	464b      	mov	r3, r9
 8004b88:	eb4b 0303 	adc.w	r3, fp, r3
 8004b8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ba0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	18db      	adds	r3, r3, r3
 8004ba8:	643b      	str	r3, [r7, #64]	; 0x40
 8004baa:	4613      	mov	r3, r2
 8004bac:	eb42 0303 	adc.w	r3, r2, r3
 8004bb0:	647b      	str	r3, [r7, #68]	; 0x44
 8004bb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004bb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004bba:	f7fc f865 	bl	8000c88 <__aeabi_uldivmod>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	4b3b      	ldr	r3, [pc, #236]	; (8004cb4 <UART_SetConfig+0x2d4>)
 8004bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8004bca:	095b      	lsrs	r3, r3, #5
 8004bcc:	2264      	movs	r2, #100	; 0x64
 8004bce:	fb02 f303 	mul.w	r3, r2, r3
 8004bd2:	1acb      	subs	r3, r1, r3
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004bda:	4b36      	ldr	r3, [pc, #216]	; (8004cb4 <UART_SetConfig+0x2d4>)
 8004bdc:	fba3 2302 	umull	r2, r3, r3, r2
 8004be0:	095b      	lsrs	r3, r3, #5
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004be8:	441c      	add	r4, r3
 8004bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bf4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004bf8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004bfc:	4642      	mov	r2, r8
 8004bfe:	464b      	mov	r3, r9
 8004c00:	1891      	adds	r1, r2, r2
 8004c02:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c04:	415b      	adcs	r3, r3
 8004c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c0c:	4641      	mov	r1, r8
 8004c0e:	1851      	adds	r1, r2, r1
 8004c10:	6339      	str	r1, [r7, #48]	; 0x30
 8004c12:	4649      	mov	r1, r9
 8004c14:	414b      	adcs	r3, r1
 8004c16:	637b      	str	r3, [r7, #52]	; 0x34
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	f04f 0300 	mov.w	r3, #0
 8004c20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c24:	4659      	mov	r1, fp
 8004c26:	00cb      	lsls	r3, r1, #3
 8004c28:	4651      	mov	r1, sl
 8004c2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c2e:	4651      	mov	r1, sl
 8004c30:	00ca      	lsls	r2, r1, #3
 8004c32:	4610      	mov	r0, r2
 8004c34:	4619      	mov	r1, r3
 8004c36:	4603      	mov	r3, r0
 8004c38:	4642      	mov	r2, r8
 8004c3a:	189b      	adds	r3, r3, r2
 8004c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c40:	464b      	mov	r3, r9
 8004c42:	460a      	mov	r2, r1
 8004c44:	eb42 0303 	adc.w	r3, r2, r3
 8004c48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c60:	460b      	mov	r3, r1
 8004c62:	18db      	adds	r3, r3, r3
 8004c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c66:	4613      	mov	r3, r2
 8004c68:	eb42 0303 	adc.w	r3, r2, r3
 8004c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c76:	f7fc f807 	bl	8000c88 <__aeabi_uldivmod>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	4b0d      	ldr	r3, [pc, #52]	; (8004cb4 <UART_SetConfig+0x2d4>)
 8004c80:	fba3 1302 	umull	r1, r3, r3, r2
 8004c84:	095b      	lsrs	r3, r3, #5
 8004c86:	2164      	movs	r1, #100	; 0x64
 8004c88:	fb01 f303 	mul.w	r3, r1, r3
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	3332      	adds	r3, #50	; 0x32
 8004c92:	4a08      	ldr	r2, [pc, #32]	; (8004cb4 <UART_SetConfig+0x2d4>)
 8004c94:	fba2 2303 	umull	r2, r3, r2, r3
 8004c98:	095b      	lsrs	r3, r3, #5
 8004c9a:	f003 0207 	and.w	r2, r3, #7
 8004c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4422      	add	r2, r4
 8004ca6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ca8:	e106      	b.n	8004eb8 <UART_SetConfig+0x4d8>
 8004caa:	bf00      	nop
 8004cac:	40011000 	.word	0x40011000
 8004cb0:	40011400 	.word	0x40011400
 8004cb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004cc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004cc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004cca:	4642      	mov	r2, r8
 8004ccc:	464b      	mov	r3, r9
 8004cce:	1891      	adds	r1, r2, r2
 8004cd0:	6239      	str	r1, [r7, #32]
 8004cd2:	415b      	adcs	r3, r3
 8004cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cda:	4641      	mov	r1, r8
 8004cdc:	1854      	adds	r4, r2, r1
 8004cde:	4649      	mov	r1, r9
 8004ce0:	eb43 0501 	adc.w	r5, r3, r1
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	00eb      	lsls	r3, r5, #3
 8004cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cf2:	00e2      	lsls	r2, r4, #3
 8004cf4:	4614      	mov	r4, r2
 8004cf6:	461d      	mov	r5, r3
 8004cf8:	4643      	mov	r3, r8
 8004cfa:	18e3      	adds	r3, r4, r3
 8004cfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d00:	464b      	mov	r3, r9
 8004d02:	eb45 0303 	adc.w	r3, r5, r3
 8004d06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	f04f 0300 	mov.w	r3, #0
 8004d22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d26:	4629      	mov	r1, r5
 8004d28:	008b      	lsls	r3, r1, #2
 8004d2a:	4621      	mov	r1, r4
 8004d2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d30:	4621      	mov	r1, r4
 8004d32:	008a      	lsls	r2, r1, #2
 8004d34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d38:	f7fb ffa6 	bl	8000c88 <__aeabi_uldivmod>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	460b      	mov	r3, r1
 8004d40:	4b60      	ldr	r3, [pc, #384]	; (8004ec4 <UART_SetConfig+0x4e4>)
 8004d42:	fba3 2302 	umull	r2, r3, r3, r2
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	011c      	lsls	r4, r3, #4
 8004d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d5c:	4642      	mov	r2, r8
 8004d5e:	464b      	mov	r3, r9
 8004d60:	1891      	adds	r1, r2, r2
 8004d62:	61b9      	str	r1, [r7, #24]
 8004d64:	415b      	adcs	r3, r3
 8004d66:	61fb      	str	r3, [r7, #28]
 8004d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d6c:	4641      	mov	r1, r8
 8004d6e:	1851      	adds	r1, r2, r1
 8004d70:	6139      	str	r1, [r7, #16]
 8004d72:	4649      	mov	r1, r9
 8004d74:	414b      	adcs	r3, r1
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d84:	4659      	mov	r1, fp
 8004d86:	00cb      	lsls	r3, r1, #3
 8004d88:	4651      	mov	r1, sl
 8004d8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d8e:	4651      	mov	r1, sl
 8004d90:	00ca      	lsls	r2, r1, #3
 8004d92:	4610      	mov	r0, r2
 8004d94:	4619      	mov	r1, r3
 8004d96:	4603      	mov	r3, r0
 8004d98:	4642      	mov	r2, r8
 8004d9a:	189b      	adds	r3, r3, r2
 8004d9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004da0:	464b      	mov	r3, r9
 8004da2:	460a      	mov	r2, r1
 8004da4:	eb42 0303 	adc.w	r3, r2, r3
 8004da8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004db6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004db8:	f04f 0200 	mov.w	r2, #0
 8004dbc:	f04f 0300 	mov.w	r3, #0
 8004dc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004dc4:	4649      	mov	r1, r9
 8004dc6:	008b      	lsls	r3, r1, #2
 8004dc8:	4641      	mov	r1, r8
 8004dca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dce:	4641      	mov	r1, r8
 8004dd0:	008a      	lsls	r2, r1, #2
 8004dd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004dd6:	f7fb ff57 	bl	8000c88 <__aeabi_uldivmod>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4611      	mov	r1, r2
 8004de0:	4b38      	ldr	r3, [pc, #224]	; (8004ec4 <UART_SetConfig+0x4e4>)
 8004de2:	fba3 2301 	umull	r2, r3, r3, r1
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	2264      	movs	r2, #100	; 0x64
 8004dea:	fb02 f303 	mul.w	r3, r2, r3
 8004dee:	1acb      	subs	r3, r1, r3
 8004df0:	011b      	lsls	r3, r3, #4
 8004df2:	3332      	adds	r3, #50	; 0x32
 8004df4:	4a33      	ldr	r2, [pc, #204]	; (8004ec4 <UART_SetConfig+0x4e4>)
 8004df6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfa:	095b      	lsrs	r3, r3, #5
 8004dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e00:	441c      	add	r4, r3
 8004e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e06:	2200      	movs	r2, #0
 8004e08:	673b      	str	r3, [r7, #112]	; 0x70
 8004e0a:	677a      	str	r2, [r7, #116]	; 0x74
 8004e0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e10:	4642      	mov	r2, r8
 8004e12:	464b      	mov	r3, r9
 8004e14:	1891      	adds	r1, r2, r2
 8004e16:	60b9      	str	r1, [r7, #8]
 8004e18:	415b      	adcs	r3, r3
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e20:	4641      	mov	r1, r8
 8004e22:	1851      	adds	r1, r2, r1
 8004e24:	6039      	str	r1, [r7, #0]
 8004e26:	4649      	mov	r1, r9
 8004e28:	414b      	adcs	r3, r1
 8004e2a:	607b      	str	r3, [r7, #4]
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e38:	4659      	mov	r1, fp
 8004e3a:	00cb      	lsls	r3, r1, #3
 8004e3c:	4651      	mov	r1, sl
 8004e3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e42:	4651      	mov	r1, sl
 8004e44:	00ca      	lsls	r2, r1, #3
 8004e46:	4610      	mov	r0, r2
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	4642      	mov	r2, r8
 8004e4e:	189b      	adds	r3, r3, r2
 8004e50:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e52:	464b      	mov	r3, r9
 8004e54:	460a      	mov	r2, r1
 8004e56:	eb42 0303 	adc.w	r3, r2, r3
 8004e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	663b      	str	r3, [r7, #96]	; 0x60
 8004e66:	667a      	str	r2, [r7, #100]	; 0x64
 8004e68:	f04f 0200 	mov.w	r2, #0
 8004e6c:	f04f 0300 	mov.w	r3, #0
 8004e70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e74:	4649      	mov	r1, r9
 8004e76:	008b      	lsls	r3, r1, #2
 8004e78:	4641      	mov	r1, r8
 8004e7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e7e:	4641      	mov	r1, r8
 8004e80:	008a      	lsls	r2, r1, #2
 8004e82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e86:	f7fb feff 	bl	8000c88 <__aeabi_uldivmod>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	; (8004ec4 <UART_SetConfig+0x4e4>)
 8004e90:	fba3 1302 	umull	r1, r3, r3, r2
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	2164      	movs	r1, #100	; 0x64
 8004e98:	fb01 f303 	mul.w	r3, r1, r3
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	3332      	adds	r3, #50	; 0x32
 8004ea2:	4a08      	ldr	r2, [pc, #32]	; (8004ec4 <UART_SetConfig+0x4e4>)
 8004ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea8:	095b      	lsrs	r3, r3, #5
 8004eaa:	f003 020f 	and.w	r2, r3, #15
 8004eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4422      	add	r2, r4
 8004eb6:	609a      	str	r2, [r3, #8]
}
 8004eb8:	bf00      	nop
 8004eba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ec4:	51eb851f 	.word	0x51eb851f

08004ec8 <__NVIC_SetPriority>:
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	4603      	mov	r3, r0
 8004ed0:	6039      	str	r1, [r7, #0]
 8004ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	db0a      	blt.n	8004ef2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	490c      	ldr	r1, [pc, #48]	; (8004f14 <__NVIC_SetPriority+0x4c>)
 8004ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ee6:	0112      	lsls	r2, r2, #4
 8004ee8:	b2d2      	uxtb	r2, r2
 8004eea:	440b      	add	r3, r1
 8004eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004ef0:	e00a      	b.n	8004f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	4908      	ldr	r1, [pc, #32]	; (8004f18 <__NVIC_SetPriority+0x50>)
 8004ef8:	79fb      	ldrb	r3, [r7, #7]
 8004efa:	f003 030f 	and.w	r3, r3, #15
 8004efe:	3b04      	subs	r3, #4
 8004f00:	0112      	lsls	r2, r2, #4
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	440b      	add	r3, r1
 8004f06:	761a      	strb	r2, [r3, #24]
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	e000e100 	.word	0xe000e100
 8004f18:	e000ed00 	.word	0xe000ed00

08004f1c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004f20:	4b05      	ldr	r3, [pc, #20]	; (8004f38 <SysTick_Handler+0x1c>)
 8004f22:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004f24:	f001 fd28 	bl	8006978 <xTaskGetSchedulerState>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d001      	beq.n	8004f32 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004f2e:	f002 fb13 	bl	8007558 <xPortSysTickHandler>
  }
}
 8004f32:	bf00      	nop
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	e000e010 	.word	0xe000e010

08004f3c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004f40:	2100      	movs	r1, #0
 8004f42:	f06f 0004 	mvn.w	r0, #4
 8004f46:	f7ff ffbf 	bl	8004ec8 <__NVIC_SetPriority>
#endif
}
 8004f4a:	bf00      	nop
 8004f4c:	bd80      	pop	{r7, pc}
	...

08004f50 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f56:	f3ef 8305 	mrs	r3, IPSR
 8004f5a:	603b      	str	r3, [r7, #0]
  return(result);
 8004f5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004f62:	f06f 0305 	mvn.w	r3, #5
 8004f66:	607b      	str	r3, [r7, #4]
 8004f68:	e00c      	b.n	8004f84 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004f6a:	4b0a      	ldr	r3, [pc, #40]	; (8004f94 <osKernelInitialize+0x44>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d105      	bne.n	8004f7e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004f72:	4b08      	ldr	r3, [pc, #32]	; (8004f94 <osKernelInitialize+0x44>)
 8004f74:	2201      	movs	r2, #1
 8004f76:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	607b      	str	r3, [r7, #4]
 8004f7c:	e002      	b.n	8004f84 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004f7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f84:	687b      	ldr	r3, [r7, #4]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	20000750 	.word	0x20000750

08004f98 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f9e:	f3ef 8305 	mrs	r3, IPSR
 8004fa2:	603b      	str	r3, [r7, #0]
  return(result);
 8004fa4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004faa:	f06f 0305 	mvn.w	r3, #5
 8004fae:	607b      	str	r3, [r7, #4]
 8004fb0:	e010      	b.n	8004fd4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004fb2:	4b0b      	ldr	r3, [pc, #44]	; (8004fe0 <osKernelStart+0x48>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d109      	bne.n	8004fce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004fba:	f7ff ffbf 	bl	8004f3c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004fbe:	4b08      	ldr	r3, [pc, #32]	; (8004fe0 <osKernelStart+0x48>)
 8004fc0:	2202      	movs	r2, #2
 8004fc2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004fc4:	f001 f87c 	bl	80060c0 <vTaskStartScheduler>
      stat = osOK;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	607b      	str	r3, [r7, #4]
 8004fcc:	e002      	b.n	8004fd4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004fce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fd2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004fd4:	687b      	ldr	r3, [r7, #4]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	20000750 	.word	0x20000750

08004fe4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08e      	sub	sp, #56	; 0x38
 8004fe8:	af04      	add	r7, sp, #16
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ff4:	f3ef 8305 	mrs	r3, IPSR
 8004ff8:	617b      	str	r3, [r7, #20]
  return(result);
 8004ffa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d17e      	bne.n	80050fe <osThreadNew+0x11a>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d07b      	beq.n	80050fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005006:	2380      	movs	r3, #128	; 0x80
 8005008:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800500a:	2318      	movs	r3, #24
 800500c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800500e:	2300      	movs	r3, #0
 8005010:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005016:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d045      	beq.n	80050aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d002      	beq.n	800502c <osThreadNew+0x48>
        name = attr->name;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d002      	beq.n	800503a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d008      	beq.n	8005052 <osThreadNew+0x6e>
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	2b38      	cmp	r3, #56	; 0x38
 8005044:	d805      	bhi.n	8005052 <osThreadNew+0x6e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <osThreadNew+0x72>
        return (NULL);
 8005052:	2300      	movs	r3, #0
 8005054:	e054      	b.n	8005100 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	089b      	lsrs	r3, r3, #2
 8005064:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00e      	beq.n	800508c <osThreadNew+0xa8>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	2ba7      	cmp	r3, #167	; 0xa7
 8005074:	d90a      	bls.n	800508c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800507a:	2b00      	cmp	r3, #0
 800507c:	d006      	beq.n	800508c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <osThreadNew+0xa8>
        mem = 1;
 8005086:	2301      	movs	r3, #1
 8005088:	61bb      	str	r3, [r7, #24]
 800508a:	e010      	b.n	80050ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10c      	bne.n	80050ae <osThreadNew+0xca>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d108      	bne.n	80050ae <osThreadNew+0xca>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d104      	bne.n	80050ae <osThreadNew+0xca>
          mem = 0;
 80050a4:	2300      	movs	r3, #0
 80050a6:	61bb      	str	r3, [r7, #24]
 80050a8:	e001      	b.n	80050ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80050aa:	2300      	movs	r3, #0
 80050ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d110      	bne.n	80050d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050bc:	9202      	str	r2, [sp, #8]
 80050be:	9301      	str	r3, [sp, #4]
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	6a3a      	ldr	r2, [r7, #32]
 80050c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 fe0c 	bl	8005ce8 <xTaskCreateStatic>
 80050d0:	4603      	mov	r3, r0
 80050d2:	613b      	str	r3, [r7, #16]
 80050d4:	e013      	b.n	80050fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d110      	bne.n	80050fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80050dc:	6a3b      	ldr	r3, [r7, #32]
 80050de:	b29a      	uxth	r2, r3
 80050e0:	f107 0310 	add.w	r3, r7, #16
 80050e4:	9301      	str	r3, [sp, #4]
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 fe57 	bl	8005da2 <xTaskCreate>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d001      	beq.n	80050fe <osThreadNew+0x11a>
            hTask = NULL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80050fe:	693b      	ldr	r3, [r7, #16]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3728      	adds	r7, #40	; 0x28
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005110:	f3ef 8305 	mrs	r3, IPSR
 8005114:	60bb      	str	r3, [r7, #8]
  return(result);
 8005116:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <osDelay+0x1c>
    stat = osErrorISR;
 800511c:	f06f 0305 	mvn.w	r3, #5
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	e007      	b.n	8005134 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005124:	2300      	movs	r3, #0
 8005126:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <osDelay+0x2c>
      vTaskDelay(ticks);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 ff92 	bl	8006058 <vTaskDelay>
    }
  }

  return (stat);
 8005134:	68fb      	ldr	r3, [r7, #12]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
	...

08005140 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4a07      	ldr	r2, [pc, #28]	; (800516c <vApplicationGetIdleTaskMemory+0x2c>)
 8005150:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	4a06      	ldr	r2, [pc, #24]	; (8005170 <vApplicationGetIdleTaskMemory+0x30>)
 8005156:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2280      	movs	r2, #128	; 0x80
 800515c:	601a      	str	r2, [r3, #0]
}
 800515e:	bf00      	nop
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	20000754 	.word	0x20000754
 8005170:	200007fc 	.word	0x200007fc

08005174 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4a07      	ldr	r2, [pc, #28]	; (80051a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005184:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	4a06      	ldr	r2, [pc, #24]	; (80051a4 <vApplicationGetTimerTaskMemory+0x30>)
 800518a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005192:	601a      	str	r2, [r3, #0]
}
 8005194:	bf00      	nop
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	200009fc 	.word	0x200009fc
 80051a4:	20000aa4 	.word	0x20000aa4

080051a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f103 0208 	add.w	r2, r3, #8
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f103 0208 	add.w	r2, r3, #8
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f103 0208 	add.w	r2, r3, #8
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005202:	b480      	push	{r7}
 8005204:	b085      	sub	sp, #20
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
 800520a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	601a      	str	r2, [r3, #0]
}
 800523e:	bf00      	nop
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800524a:	b480      	push	{r7}
 800524c:	b085      	sub	sp, #20
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005260:	d103      	bne.n	800526a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	e00c      	b.n	8005284 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	3308      	adds	r3, #8
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	e002      	b.n	8005278 <vListInsert+0x2e>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	429a      	cmp	r2, r3
 8005282:	d2f6      	bcs.n	8005272 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	1c5a      	adds	r2, r3, #1
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	601a      	str	r2, [r3, #0]
}
 80052b0:	bf00      	nop
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6892      	ldr	r2, [r2, #8]
 80052d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6852      	ldr	r2, [r2, #4]
 80052dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d103      	bne.n	80052f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	1e5a      	subs	r2, r3, #1
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10a      	bne.n	800533a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005336:	bf00      	nop
 8005338:	e7fe      	b.n	8005338 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800533a:	f002 f87b 	bl	8007434 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005346:	68f9      	ldr	r1, [r7, #12]
 8005348:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800534a:	fb01 f303 	mul.w	r3, r1, r3
 800534e:	441a      	add	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536a:	3b01      	subs	r3, #1
 800536c:	68f9      	ldr	r1, [r7, #12]
 800536e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005370:	fb01 f303 	mul.w	r3, r1, r3
 8005374:	441a      	add	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	22ff      	movs	r2, #255	; 0xff
 800537e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	22ff      	movs	r2, #255	; 0xff
 8005386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d114      	bne.n	80053ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d01a      	beq.n	80053ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	3310      	adds	r3, #16
 800539c:	4618      	mov	r0, r3
 800539e:	f001 f929 	bl	80065f4 <xTaskRemoveFromEventList>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d012      	beq.n	80053ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80053a8:	4b0c      	ldr	r3, [pc, #48]	; (80053dc <xQueueGenericReset+0xcc>)
 80053aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	e009      	b.n	80053ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	3310      	adds	r3, #16
 80053be:	4618      	mov	r0, r3
 80053c0:	f7ff fef2 	bl	80051a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3324      	adds	r3, #36	; 0x24
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7ff feed 	bl	80051a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80053ce:	f002 f861 	bl	8007494 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80053d2:	2301      	movs	r3, #1
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	e000ed04 	.word	0xe000ed04

080053e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b08e      	sub	sp, #56	; 0x38
 80053e4:	af02      	add	r7, sp, #8
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
 80053ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10a      	bne.n	800540a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80053f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005406:	bf00      	nop
 8005408:	e7fe      	b.n	8005408 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10a      	bne.n	8005426 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005422:	bf00      	nop
 8005424:	e7fe      	b.n	8005424 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <xQueueGenericCreateStatic+0x52>
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <xQueueGenericCreateStatic+0x56>
 8005432:	2301      	movs	r3, #1
 8005434:	e000      	b.n	8005438 <xQueueGenericCreateStatic+0x58>
 8005436:	2300      	movs	r3, #0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10a      	bne.n	8005452 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800543c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005440:	f383 8811 	msr	BASEPRI, r3
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	623b      	str	r3, [r7, #32]
}
 800544e:	bf00      	nop
 8005450:	e7fe      	b.n	8005450 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d102      	bne.n	800545e <xQueueGenericCreateStatic+0x7e>
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <xQueueGenericCreateStatic+0x82>
 800545e:	2301      	movs	r3, #1
 8005460:	e000      	b.n	8005464 <xQueueGenericCreateStatic+0x84>
 8005462:	2300      	movs	r3, #0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10a      	bne.n	800547e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546c:	f383 8811 	msr	BASEPRI, r3
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	61fb      	str	r3, [r7, #28]
}
 800547a:	bf00      	nop
 800547c:	e7fe      	b.n	800547c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800547e:	2350      	movs	r3, #80	; 0x50
 8005480:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2b50      	cmp	r3, #80	; 0x50
 8005486:	d00a      	beq.n	800549e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	61bb      	str	r3, [r7, #24]
}
 800549a:	bf00      	nop
 800549c:	e7fe      	b.n	800549c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800549e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80054a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00d      	beq.n	80054c6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80054aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80054b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	4613      	mov	r3, r2
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	68b9      	ldr	r1, [r7, #8]
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 f805 	bl	80054d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80054c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3730      	adds	r7, #48	; 0x30
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
 80054dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d103      	bne.n	80054ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	e002      	b.n	80054f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80054fe:	2101      	movs	r1, #1
 8005500:	69b8      	ldr	r0, [r7, #24]
 8005502:	f7ff ff05 	bl	8005310 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	78fa      	ldrb	r2, [r7, #3]
 800550a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800550e:	bf00      	nop
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
	...

08005518 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b08e      	sub	sp, #56	; 0x38
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
 8005524:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005526:	2300      	movs	r3, #0
 8005528:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800552e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10a      	bne.n	800554a <xQueueGenericSend+0x32>
	__asm volatile
 8005534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005546:	bf00      	nop
 8005548:	e7fe      	b.n	8005548 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d103      	bne.n	8005558 <xQueueGenericSend+0x40>
 8005550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <xQueueGenericSend+0x44>
 8005558:	2301      	movs	r3, #1
 800555a:	e000      	b.n	800555e <xQueueGenericSend+0x46>
 800555c:	2300      	movs	r3, #0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10a      	bne.n	8005578 <xQueueGenericSend+0x60>
	__asm volatile
 8005562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005574:	bf00      	nop
 8005576:	e7fe      	b.n	8005576 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	2b02      	cmp	r3, #2
 800557c:	d103      	bne.n	8005586 <xQueueGenericSend+0x6e>
 800557e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005582:	2b01      	cmp	r3, #1
 8005584:	d101      	bne.n	800558a <xQueueGenericSend+0x72>
 8005586:	2301      	movs	r3, #1
 8005588:	e000      	b.n	800558c <xQueueGenericSend+0x74>
 800558a:	2300      	movs	r3, #0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10a      	bne.n	80055a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8005590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	623b      	str	r3, [r7, #32]
}
 80055a2:	bf00      	nop
 80055a4:	e7fe      	b.n	80055a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055a6:	f001 f9e7 	bl	8006978 <xTaskGetSchedulerState>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d102      	bne.n	80055b6 <xQueueGenericSend+0x9e>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <xQueueGenericSend+0xa2>
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <xQueueGenericSend+0xa4>
 80055ba:	2300      	movs	r3, #0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10a      	bne.n	80055d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	61fb      	str	r3, [r7, #28]
}
 80055d2:	bf00      	nop
 80055d4:	e7fe      	b.n	80055d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055d6:	f001 ff2d 	bl	8007434 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d302      	bcc.n	80055ec <xQueueGenericSend+0xd4>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d129      	bne.n	8005640 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	68b9      	ldr	r1, [r7, #8]
 80055f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055f2:	f000 fa0b 	bl	8005a0c <prvCopyDataToQueue>
 80055f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d010      	beq.n	8005622 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005602:	3324      	adds	r3, #36	; 0x24
 8005604:	4618      	mov	r0, r3
 8005606:	f000 fff5 	bl	80065f4 <xTaskRemoveFromEventList>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d013      	beq.n	8005638 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005610:	4b3f      	ldr	r3, [pc, #252]	; (8005710 <xQueueGenericSend+0x1f8>)
 8005612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	e00a      	b.n	8005638 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005624:	2b00      	cmp	r3, #0
 8005626:	d007      	beq.n	8005638 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005628:	4b39      	ldr	r3, [pc, #228]	; (8005710 <xQueueGenericSend+0x1f8>)
 800562a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005638:	f001 ff2c 	bl	8007494 <vPortExitCritical>
				return pdPASS;
 800563c:	2301      	movs	r3, #1
 800563e:	e063      	b.n	8005708 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d103      	bne.n	800564e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005646:	f001 ff25 	bl	8007494 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800564a:	2300      	movs	r3, #0
 800564c:	e05c      	b.n	8005708 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800564e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005650:	2b00      	cmp	r3, #0
 8005652:	d106      	bne.n	8005662 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005654:	f107 0314 	add.w	r3, r7, #20
 8005658:	4618      	mov	r0, r3
 800565a:	f001 f82f 	bl	80066bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800565e:	2301      	movs	r3, #1
 8005660:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005662:	f001 ff17 	bl	8007494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005666:	f000 fd9b 	bl	80061a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800566a:	f001 fee3 	bl	8007434 <vPortEnterCritical>
 800566e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005670:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005674:	b25b      	sxtb	r3, r3
 8005676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800567a:	d103      	bne.n	8005684 <xQueueGenericSend+0x16c>
 800567c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567e:	2200      	movs	r2, #0
 8005680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005686:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800568a:	b25b      	sxtb	r3, r3
 800568c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005690:	d103      	bne.n	800569a <xQueueGenericSend+0x182>
 8005692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800569a:	f001 fefb 	bl	8007494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800569e:	1d3a      	adds	r2, r7, #4
 80056a0:	f107 0314 	add.w	r3, r7, #20
 80056a4:	4611      	mov	r1, r2
 80056a6:	4618      	mov	r0, r3
 80056a8:	f001 f81e 	bl	80066e8 <xTaskCheckForTimeOut>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d124      	bne.n	80056fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80056b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056b4:	f000 faa2 	bl	8005bfc <prvIsQueueFull>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d018      	beq.n	80056f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80056be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c0:	3310      	adds	r3, #16
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	4611      	mov	r1, r2
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 ff44 	bl	8006554 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80056cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056ce:	f000 fa2d 	bl	8005b2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80056d2:	f000 fd73 	bl	80061bc <xTaskResumeAll>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f47f af7c 	bne.w	80055d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80056de:	4b0c      	ldr	r3, [pc, #48]	; (8005710 <xQueueGenericSend+0x1f8>)
 80056e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	e772      	b.n	80055d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80056f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056f2:	f000 fa1b 	bl	8005b2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056f6:	f000 fd61 	bl	80061bc <xTaskResumeAll>
 80056fa:	e76c      	b.n	80055d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80056fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056fe:	f000 fa15 	bl	8005b2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005702:	f000 fd5b 	bl	80061bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005706:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005708:	4618      	mov	r0, r3
 800570a:	3738      	adds	r7, #56	; 0x38
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	e000ed04 	.word	0xe000ed04

08005714 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b090      	sub	sp, #64	; 0x40
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10a      	bne.n	8005742 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800572c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005730:	f383 8811 	msr	BASEPRI, r3
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800573e:	bf00      	nop
 8005740:	e7fe      	b.n	8005740 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d103      	bne.n	8005750 <xQueueGenericSendFromISR+0x3c>
 8005748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <xQueueGenericSendFromISR+0x40>
 8005750:	2301      	movs	r3, #1
 8005752:	e000      	b.n	8005756 <xQueueGenericSendFromISR+0x42>
 8005754:	2300      	movs	r3, #0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10a      	bne.n	8005770 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800575a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800576c:	bf00      	nop
 800576e:	e7fe      	b.n	800576e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2b02      	cmp	r3, #2
 8005774:	d103      	bne.n	800577e <xQueueGenericSendFromISR+0x6a>
 8005776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <xQueueGenericSendFromISR+0x6e>
 800577e:	2301      	movs	r3, #1
 8005780:	e000      	b.n	8005784 <xQueueGenericSendFromISR+0x70>
 8005782:	2300      	movs	r3, #0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10a      	bne.n	800579e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	623b      	str	r3, [r7, #32]
}
 800579a:	bf00      	nop
 800579c:	e7fe      	b.n	800579c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800579e:	f001 ff2b 	bl	80075f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80057a2:	f3ef 8211 	mrs	r2, BASEPRI
 80057a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	61fa      	str	r2, [r7, #28]
 80057b8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80057ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d302      	bcc.n	80057d0 <xQueueGenericSendFromISR+0xbc>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d12f      	bne.n	8005830 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80057d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	68b9      	ldr	r1, [r7, #8]
 80057e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80057e6:	f000 f911 	bl	8005a0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80057ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80057ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057f2:	d112      	bne.n	800581a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d016      	beq.n	800582a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fe:	3324      	adds	r3, #36	; 0x24
 8005800:	4618      	mov	r0, r3
 8005802:	f000 fef7 	bl	80065f4 <xTaskRemoveFromEventList>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00e      	beq.n	800582a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00b      	beq.n	800582a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	e007      	b.n	800582a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800581a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800581e:	3301      	adds	r3, #1
 8005820:	b2db      	uxtb	r3, r3
 8005822:	b25a      	sxtb	r2, r3
 8005824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800582a:	2301      	movs	r3, #1
 800582c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800582e:	e001      	b.n	8005834 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005830:	2300      	movs	r3, #0
 8005832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005836:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800583e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005842:	4618      	mov	r0, r3
 8005844:	3740      	adds	r7, #64	; 0x40
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
	...

0800584c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08c      	sub	sp, #48	; 0x30
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005858:	2300      	movs	r3, #0
 800585a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10a      	bne.n	800587c <xQueueReceive+0x30>
	__asm volatile
 8005866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	623b      	str	r3, [r7, #32]
}
 8005878:	bf00      	nop
 800587a:	e7fe      	b.n	800587a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d103      	bne.n	800588a <xQueueReceive+0x3e>
 8005882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <xQueueReceive+0x42>
 800588a:	2301      	movs	r3, #1
 800588c:	e000      	b.n	8005890 <xQueueReceive+0x44>
 800588e:	2300      	movs	r3, #0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10a      	bne.n	80058aa <xQueueReceive+0x5e>
	__asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	61fb      	str	r3, [r7, #28]
}
 80058a6:	bf00      	nop
 80058a8:	e7fe      	b.n	80058a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058aa:	f001 f865 	bl	8006978 <xTaskGetSchedulerState>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d102      	bne.n	80058ba <xQueueReceive+0x6e>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <xQueueReceive+0x72>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <xQueueReceive+0x74>
 80058be:	2300      	movs	r3, #0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10a      	bne.n	80058da <xQueueReceive+0x8e>
	__asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	61bb      	str	r3, [r7, #24]
}
 80058d6:	bf00      	nop
 80058d8:	e7fe      	b.n	80058d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058da:	f001 fdab 	bl	8007434 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d01f      	beq.n	800592a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058ee:	f000 f8f7 	bl	8005ae0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	1e5a      	subs	r2, r3, #1
 80058f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00f      	beq.n	8005922 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005904:	3310      	adds	r3, #16
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fe74 	bl	80065f4 <xTaskRemoveFromEventList>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d007      	beq.n	8005922 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005912:	4b3d      	ldr	r3, [pc, #244]	; (8005a08 <xQueueReceive+0x1bc>)
 8005914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005922:	f001 fdb7 	bl	8007494 <vPortExitCritical>
				return pdPASS;
 8005926:	2301      	movs	r3, #1
 8005928:	e069      	b.n	80059fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d103      	bne.n	8005938 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005930:	f001 fdb0 	bl	8007494 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005934:	2300      	movs	r3, #0
 8005936:	e062      	b.n	80059fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593a:	2b00      	cmp	r3, #0
 800593c:	d106      	bne.n	800594c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800593e:	f107 0310 	add.w	r3, r7, #16
 8005942:	4618      	mov	r0, r3
 8005944:	f000 feba 	bl	80066bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005948:	2301      	movs	r3, #1
 800594a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800594c:	f001 fda2 	bl	8007494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005950:	f000 fc26 	bl	80061a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005954:	f001 fd6e 	bl	8007434 <vPortEnterCritical>
 8005958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800595e:	b25b      	sxtb	r3, r3
 8005960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005964:	d103      	bne.n	800596e <xQueueReceive+0x122>
 8005966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800596e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005970:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005974:	b25b      	sxtb	r3, r3
 8005976:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800597a:	d103      	bne.n	8005984 <xQueueReceive+0x138>
 800597c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597e:	2200      	movs	r2, #0
 8005980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005984:	f001 fd86 	bl	8007494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005988:	1d3a      	adds	r2, r7, #4
 800598a:	f107 0310 	add.w	r3, r7, #16
 800598e:	4611      	mov	r1, r2
 8005990:	4618      	mov	r0, r3
 8005992:	f000 fea9 	bl	80066e8 <xTaskCheckForTimeOut>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d123      	bne.n	80059e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800599c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800599e:	f000 f917 	bl	8005bd0 <prvIsQueueEmpty>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d017      	beq.n	80059d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80059a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059aa:	3324      	adds	r3, #36	; 0x24
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	4611      	mov	r1, r2
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 fdcf 	bl	8006554 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80059b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059b8:	f000 f8b8 	bl	8005b2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80059bc:	f000 fbfe 	bl	80061bc <xTaskResumeAll>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d189      	bne.n	80058da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80059c6:	4b10      	ldr	r3, [pc, #64]	; (8005a08 <xQueueReceive+0x1bc>)
 80059c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	e780      	b.n	80058da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80059d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059da:	f000 f8a7 	bl	8005b2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059de:	f000 fbed 	bl	80061bc <xTaskResumeAll>
 80059e2:	e77a      	b.n	80058da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80059e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059e6:	f000 f8a1 	bl	8005b2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059ea:	f000 fbe7 	bl	80061bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059f0:	f000 f8ee 	bl	8005bd0 <prvIsQueueEmpty>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f43f af6f 	beq.w	80058da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80059fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3730      	adds	r7, #48	; 0x30
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	e000ed04 	.word	0xe000ed04

08005a0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10d      	bne.n	8005a46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d14d      	bne.n	8005ace <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 ffbc 	bl	80069b4 <xTaskPriorityDisinherit>
 8005a3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	609a      	str	r2, [r3, #8]
 8005a44:	e043      	b.n	8005ace <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d119      	bne.n	8005a80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6858      	ldr	r0, [r3, #4]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a54:	461a      	mov	r2, r3
 8005a56:	68b9      	ldr	r1, [r7, #8]
 8005a58:	f002 fdcf 	bl	80085fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a64:	441a      	add	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d32b      	bcc.n	8005ace <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	605a      	str	r2, [r3, #4]
 8005a7e:	e026      	b.n	8005ace <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	68d8      	ldr	r0, [r3, #12]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a88:	461a      	mov	r2, r3
 8005a8a:	68b9      	ldr	r1, [r7, #8]
 8005a8c:	f002 fdb5 	bl	80085fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	68da      	ldr	r2, [r3, #12]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a98:	425b      	negs	r3, r3
 8005a9a:	441a      	add	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	68da      	ldr	r2, [r3, #12]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d207      	bcs.n	8005abc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab4:	425b      	negs	r3, r3
 8005ab6:	441a      	add	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d105      	bne.n	8005ace <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d002      	beq.n	8005ace <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005ad6:	697b      	ldr	r3, [r7, #20]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3718      	adds	r7, #24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d018      	beq.n	8005b24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afa:	441a      	add	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68da      	ldr	r2, [r3, #12]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d303      	bcc.n	8005b14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68d9      	ldr	r1, [r3, #12]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	6838      	ldr	r0, [r7, #0]
 8005b20:	f002 fd6b 	bl	80085fa <memcpy>
	}
}
 8005b24:	bf00      	nop
 8005b26:	3708      	adds	r7, #8
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b34:	f001 fc7e 	bl	8007434 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b40:	e011      	b.n	8005b66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d012      	beq.n	8005b70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	3324      	adds	r3, #36	; 0x24
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 fd50 	bl	80065f4 <xTaskRemoveFromEventList>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b5a:	f000 fe27 	bl	80067ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	dce9      	bgt.n	8005b42 <prvUnlockQueue+0x16>
 8005b6e:	e000      	b.n	8005b72 <prvUnlockQueue+0x46>
					break;
 8005b70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	22ff      	movs	r2, #255	; 0xff
 8005b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005b7a:	f001 fc8b 	bl	8007494 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b7e:	f001 fc59 	bl	8007434 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b8a:	e011      	b.n	8005bb0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d012      	beq.n	8005bba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3310      	adds	r3, #16
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 fd2b 	bl	80065f4 <xTaskRemoveFromEventList>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ba4:	f000 fe02 	bl	80067ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ba8:	7bbb      	ldrb	r3, [r7, #14]
 8005baa:	3b01      	subs	r3, #1
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	dce9      	bgt.n	8005b8c <prvUnlockQueue+0x60>
 8005bb8:	e000      	b.n	8005bbc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005bba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	22ff      	movs	r2, #255	; 0xff
 8005bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005bc4:	f001 fc66 	bl	8007494 <vPortExitCritical>
}
 8005bc8:	bf00      	nop
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bd8:	f001 fc2c 	bl	8007434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d102      	bne.n	8005bea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005be4:	2301      	movs	r3, #1
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	e001      	b.n	8005bee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005bea:	2300      	movs	r3, #0
 8005bec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005bee:	f001 fc51 	bl	8007494 <vPortExitCritical>

	return xReturn;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c04:	f001 fc16 	bl	8007434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d102      	bne.n	8005c1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c14:	2301      	movs	r3, #1
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	e001      	b.n	8005c1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c1e:	f001 fc39 	bl	8007494 <vPortExitCritical>

	return xReturn;
 8005c22:	68fb      	ldr	r3, [r7, #12]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c36:	2300      	movs	r3, #0
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	e014      	b.n	8005c66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c3c:	4a0f      	ldr	r2, [pc, #60]	; (8005c7c <vQueueAddToRegistry+0x50>)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10b      	bne.n	8005c60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c48:	490c      	ldr	r1, [pc, #48]	; (8005c7c <vQueueAddToRegistry+0x50>)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c52:	4a0a      	ldr	r2, [pc, #40]	; (8005c7c <vQueueAddToRegistry+0x50>)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	4413      	add	r3, r2
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c5e:	e006      	b.n	8005c6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	3301      	adds	r3, #1
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b07      	cmp	r3, #7
 8005c6a:	d9e7      	bls.n	8005c3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c6c:	bf00      	nop
 8005c6e:	bf00      	nop
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	20000ea4 	.word	0x20000ea4

08005c80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005c90:	f001 fbd0 	bl	8007434 <vPortEnterCritical>
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c9a:	b25b      	sxtb	r3, r3
 8005c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ca0:	d103      	bne.n	8005caa <vQueueWaitForMessageRestricted+0x2a>
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cb0:	b25b      	sxtb	r3, r3
 8005cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cb6:	d103      	bne.n	8005cc0 <vQueueWaitForMessageRestricted+0x40>
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cc0:	f001 fbe8 	bl	8007494 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d106      	bne.n	8005cda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	3324      	adds	r3, #36	; 0x24
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	68b9      	ldr	r1, [r7, #8]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 fc61 	bl	800659c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005cda:	6978      	ldr	r0, [r7, #20]
 8005cdc:	f7ff ff26 	bl	8005b2c <prvUnlockQueue>
	}
 8005ce0:	bf00      	nop
 8005ce2:	3718      	adds	r7, #24
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b08e      	sub	sp, #56	; 0x38
 8005cec:	af04      	add	r7, sp, #16
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
 8005cf4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10a      	bne.n	8005d12 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d00:	f383 8811 	msr	BASEPRI, r3
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	623b      	str	r3, [r7, #32]
}
 8005d0e:	bf00      	nop
 8005d10:	e7fe      	b.n	8005d10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10a      	bne.n	8005d2e <xTaskCreateStatic+0x46>
	__asm volatile
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	61fb      	str	r3, [r7, #28]
}
 8005d2a:	bf00      	nop
 8005d2c:	e7fe      	b.n	8005d2c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d2e:	23a8      	movs	r3, #168	; 0xa8
 8005d30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	2ba8      	cmp	r3, #168	; 0xa8
 8005d36:	d00a      	beq.n	8005d4e <xTaskCreateStatic+0x66>
	__asm volatile
 8005d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	61bb      	str	r3, [r7, #24]
}
 8005d4a:	bf00      	nop
 8005d4c:	e7fe      	b.n	8005d4c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005d4e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d01e      	beq.n	8005d94 <xTaskCreateStatic+0xac>
 8005d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d01b      	beq.n	8005d94 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d64:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	2202      	movs	r2, #2
 8005d6a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d6e:	2300      	movs	r3, #0
 8005d70:	9303      	str	r3, [sp, #12]
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	9302      	str	r3, [sp, #8]
 8005d76:	f107 0314 	add.w	r3, r7, #20
 8005d7a:	9301      	str	r3, [sp, #4]
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	68b9      	ldr	r1, [r7, #8]
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 f850 	bl	8005e2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d8e:	f000 f8f3 	bl	8005f78 <prvAddNewTaskToReadyList>
 8005d92:	e001      	b.n	8005d98 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005d94:	2300      	movs	r3, #0
 8005d96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d98:	697b      	ldr	r3, [r7, #20]
	}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3728      	adds	r7, #40	; 0x28
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b08c      	sub	sp, #48	; 0x30
 8005da6:	af04      	add	r7, sp, #16
 8005da8:	60f8      	str	r0, [r7, #12]
 8005daa:	60b9      	str	r1, [r7, #8]
 8005dac:	603b      	str	r3, [r7, #0]
 8005dae:	4613      	mov	r3, r2
 8005db0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005db2:	88fb      	ldrh	r3, [r7, #6]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4618      	mov	r0, r3
 8005db8:	f001 fc5e 	bl	8007678 <pvPortMalloc>
 8005dbc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00e      	beq.n	8005de2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005dc4:	20a8      	movs	r0, #168	; 0xa8
 8005dc6:	f001 fc57 	bl	8007678 <pvPortMalloc>
 8005dca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	631a      	str	r2, [r3, #48]	; 0x30
 8005dd8:	e005      	b.n	8005de6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005dda:	6978      	ldr	r0, [r7, #20]
 8005ddc:	f001 fd18 	bl	8007810 <vPortFree>
 8005de0:	e001      	b.n	8005de6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005de2:	2300      	movs	r3, #0
 8005de4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d017      	beq.n	8005e1c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005df4:	88fa      	ldrh	r2, [r7, #6]
 8005df6:	2300      	movs	r3, #0
 8005df8:	9303      	str	r3, [sp, #12]
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	9302      	str	r3, [sp, #8]
 8005dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e00:	9301      	str	r3, [sp, #4]
 8005e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	68b9      	ldr	r1, [r7, #8]
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f000 f80e 	bl	8005e2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e10:	69f8      	ldr	r0, [r7, #28]
 8005e12:	f000 f8b1 	bl	8005f78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e16:	2301      	movs	r3, #1
 8005e18:	61bb      	str	r3, [r7, #24]
 8005e1a:	e002      	b.n	8005e22 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e20:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e22:	69bb      	ldr	r3, [r7, #24]
	}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3720      	adds	r7, #32
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b088      	sub	sp, #32
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
 8005e38:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	461a      	mov	r2, r3
 8005e44:	21a5      	movs	r1, #165	; 0xa5
 8005e46:	f002 fb49 	bl	80084dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005e54:	3b01      	subs	r3, #1
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	f023 0307 	bic.w	r3, r3, #7
 8005e62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	617b      	str	r3, [r7, #20]
}
 8005e80:	bf00      	nop
 8005e82:	e7fe      	b.n	8005e82 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d01f      	beq.n	8005eca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	61fb      	str	r3, [r7, #28]
 8005e8e:	e012      	b.n	8005eb6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	4413      	add	r3, r2
 8005e96:	7819      	ldrb	r1, [r3, #0]
 8005e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	3334      	adds	r3, #52	; 0x34
 8005ea0:	460a      	mov	r2, r1
 8005ea2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d006      	beq.n	8005ebe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	61fb      	str	r3, [r7, #28]
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	2b0f      	cmp	r3, #15
 8005eba:	d9e9      	bls.n	8005e90 <prvInitialiseNewTask+0x64>
 8005ebc:	e000      	b.n	8005ec0 <prvInitialiseNewTask+0x94>
			{
				break;
 8005ebe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ec8:	e003      	b.n	8005ed2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed4:	2b37      	cmp	r3, #55	; 0x37
 8005ed6:	d901      	bls.n	8005edc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ed8:	2337      	movs	r3, #55	; 0x37
 8005eda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ee0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ee6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eea:	2200      	movs	r2, #0
 8005eec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7ff f978 	bl	80051e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efa:	3318      	adds	r3, #24
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7ff f973 	bl	80051e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2a:	3354      	adds	r3, #84	; 0x54
 8005f2c:	224c      	movs	r2, #76	; 0x4c
 8005f2e:	2100      	movs	r1, #0
 8005f30:	4618      	mov	r0, r3
 8005f32:	f002 fad3 	bl	80084dc <memset>
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	4a0c      	ldr	r2, [pc, #48]	; (8005f6c <prvInitialiseNewTask+0x140>)
 8005f3a:	659a      	str	r2, [r3, #88]	; 0x58
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	4a0c      	ldr	r2, [pc, #48]	; (8005f70 <prvInitialiseNewTask+0x144>)
 8005f40:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f44:	4a0b      	ldr	r2, [pc, #44]	; (8005f74 <prvInitialiseNewTask+0x148>)
 8005f46:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	68f9      	ldr	r1, [r7, #12]
 8005f4c:	69b8      	ldr	r0, [r7, #24]
 8005f4e:	f001 f941 	bl	80071d4 <pxPortInitialiseStack>
 8005f52:	4602      	mov	r2, r0
 8005f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f56:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f64:	bf00      	nop
 8005f66:	3720      	adds	r7, #32
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	20005138 	.word	0x20005138
 8005f70:	200051a0 	.word	0x200051a0
 8005f74:	20005208 	.word	0x20005208

08005f78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f80:	f001 fa58 	bl	8007434 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f84:	4b2d      	ldr	r3, [pc, #180]	; (800603c <prvAddNewTaskToReadyList+0xc4>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	4a2c      	ldr	r2, [pc, #176]	; (800603c <prvAddNewTaskToReadyList+0xc4>)
 8005f8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f8e:	4b2c      	ldr	r3, [pc, #176]	; (8006040 <prvAddNewTaskToReadyList+0xc8>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d109      	bne.n	8005faa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f96:	4a2a      	ldr	r2, [pc, #168]	; (8006040 <prvAddNewTaskToReadyList+0xc8>)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f9c:	4b27      	ldr	r3, [pc, #156]	; (800603c <prvAddNewTaskToReadyList+0xc4>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d110      	bne.n	8005fc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005fa4:	f000 fc26 	bl	80067f4 <prvInitialiseTaskLists>
 8005fa8:	e00d      	b.n	8005fc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005faa:	4b26      	ldr	r3, [pc, #152]	; (8006044 <prvAddNewTaskToReadyList+0xcc>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d109      	bne.n	8005fc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005fb2:	4b23      	ldr	r3, [pc, #140]	; (8006040 <prvAddNewTaskToReadyList+0xc8>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d802      	bhi.n	8005fc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005fc0:	4a1f      	ldr	r2, [pc, #124]	; (8006040 <prvAddNewTaskToReadyList+0xc8>)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005fc6:	4b20      	ldr	r3, [pc, #128]	; (8006048 <prvAddNewTaskToReadyList+0xd0>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	4a1e      	ldr	r2, [pc, #120]	; (8006048 <prvAddNewTaskToReadyList+0xd0>)
 8005fce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005fd0:	4b1d      	ldr	r3, [pc, #116]	; (8006048 <prvAddNewTaskToReadyList+0xd0>)
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fdc:	4b1b      	ldr	r3, [pc, #108]	; (800604c <prvAddNewTaskToReadyList+0xd4>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d903      	bls.n	8005fec <prvAddNewTaskToReadyList+0x74>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe8:	4a18      	ldr	r2, [pc, #96]	; (800604c <prvAddNewTaskToReadyList+0xd4>)
 8005fea:	6013      	str	r3, [r2, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	4413      	add	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4a15      	ldr	r2, [pc, #84]	; (8006050 <prvAddNewTaskToReadyList+0xd8>)
 8005ffa:	441a      	add	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	3304      	adds	r3, #4
 8006000:	4619      	mov	r1, r3
 8006002:	4610      	mov	r0, r2
 8006004:	f7ff f8fd 	bl	8005202 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006008:	f001 fa44 	bl	8007494 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800600c:	4b0d      	ldr	r3, [pc, #52]	; (8006044 <prvAddNewTaskToReadyList+0xcc>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00e      	beq.n	8006032 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006014:	4b0a      	ldr	r3, [pc, #40]	; (8006040 <prvAddNewTaskToReadyList+0xc8>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601e:	429a      	cmp	r2, r3
 8006020:	d207      	bcs.n	8006032 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006022:	4b0c      	ldr	r3, [pc, #48]	; (8006054 <prvAddNewTaskToReadyList+0xdc>)
 8006024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006028:	601a      	str	r2, [r3, #0]
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006032:	bf00      	nop
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	200013b8 	.word	0x200013b8
 8006040:	20000ee4 	.word	0x20000ee4
 8006044:	200013c4 	.word	0x200013c4
 8006048:	200013d4 	.word	0x200013d4
 800604c:	200013c0 	.word	0x200013c0
 8006050:	20000ee8 	.word	0x20000ee8
 8006054:	e000ed04 	.word	0xe000ed04

08006058 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006060:	2300      	movs	r3, #0
 8006062:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d017      	beq.n	800609a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800606a:	4b13      	ldr	r3, [pc, #76]	; (80060b8 <vTaskDelay+0x60>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00a      	beq.n	8006088 <vTaskDelay+0x30>
	__asm volatile
 8006072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	60bb      	str	r3, [r7, #8]
}
 8006084:	bf00      	nop
 8006086:	e7fe      	b.n	8006086 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006088:	f000 f88a 	bl	80061a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800608c:	2100      	movs	r1, #0
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fcfe 	bl	8006a90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006094:	f000 f892 	bl	80061bc <xTaskResumeAll>
 8006098:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d107      	bne.n	80060b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80060a0:	4b06      	ldr	r3, [pc, #24]	; (80060bc <vTaskDelay+0x64>)
 80060a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060a6:	601a      	str	r2, [r3, #0]
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060b0:	bf00      	nop
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	200013e0 	.word	0x200013e0
 80060bc:	e000ed04 	.word	0xe000ed04

080060c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08a      	sub	sp, #40	; 0x28
 80060c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80060c6:	2300      	movs	r3, #0
 80060c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060ca:	2300      	movs	r3, #0
 80060cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060ce:	463a      	mov	r2, r7
 80060d0:	1d39      	adds	r1, r7, #4
 80060d2:	f107 0308 	add.w	r3, r7, #8
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7ff f832 	bl	8005140 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80060dc:	6839      	ldr	r1, [r7, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	9202      	str	r2, [sp, #8]
 80060e4:	9301      	str	r3, [sp, #4]
 80060e6:	2300      	movs	r3, #0
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	2300      	movs	r3, #0
 80060ec:	460a      	mov	r2, r1
 80060ee:	4924      	ldr	r1, [pc, #144]	; (8006180 <vTaskStartScheduler+0xc0>)
 80060f0:	4824      	ldr	r0, [pc, #144]	; (8006184 <vTaskStartScheduler+0xc4>)
 80060f2:	f7ff fdf9 	bl	8005ce8 <xTaskCreateStatic>
 80060f6:	4603      	mov	r3, r0
 80060f8:	4a23      	ldr	r2, [pc, #140]	; (8006188 <vTaskStartScheduler+0xc8>)
 80060fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80060fc:	4b22      	ldr	r3, [pc, #136]	; (8006188 <vTaskStartScheduler+0xc8>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d002      	beq.n	800610a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006104:	2301      	movs	r3, #1
 8006106:	617b      	str	r3, [r7, #20]
 8006108:	e001      	b.n	800610e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800610a:	2300      	movs	r3, #0
 800610c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d102      	bne.n	800611a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006114:	f000 fd10 	bl	8006b38 <xTimerCreateTimerTask>
 8006118:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d11b      	bne.n	8006158 <vTaskStartScheduler+0x98>
	__asm volatile
 8006120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	613b      	str	r3, [r7, #16]
}
 8006132:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006134:	4b15      	ldr	r3, [pc, #84]	; (800618c <vTaskStartScheduler+0xcc>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3354      	adds	r3, #84	; 0x54
 800613a:	4a15      	ldr	r2, [pc, #84]	; (8006190 <vTaskStartScheduler+0xd0>)
 800613c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800613e:	4b15      	ldr	r3, [pc, #84]	; (8006194 <vTaskStartScheduler+0xd4>)
 8006140:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006144:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006146:	4b14      	ldr	r3, [pc, #80]	; (8006198 <vTaskStartScheduler+0xd8>)
 8006148:	2201      	movs	r2, #1
 800614a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800614c:	4b13      	ldr	r3, [pc, #76]	; (800619c <vTaskStartScheduler+0xdc>)
 800614e:	2200      	movs	r2, #0
 8006150:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006152:	f001 f8cd 	bl	80072f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006156:	e00e      	b.n	8006176 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800615e:	d10a      	bne.n	8006176 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	60fb      	str	r3, [r7, #12]
}
 8006172:	bf00      	nop
 8006174:	e7fe      	b.n	8006174 <vTaskStartScheduler+0xb4>
}
 8006176:	bf00      	nop
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	0800a844 	.word	0x0800a844
 8006184:	080067c5 	.word	0x080067c5
 8006188:	200013dc 	.word	0x200013dc
 800618c:	20000ee4 	.word	0x20000ee4
 8006190:	20000078 	.word	0x20000078
 8006194:	200013d8 	.word	0x200013d8
 8006198:	200013c4 	.word	0x200013c4
 800619c:	200013bc 	.word	0x200013bc

080061a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80061a0:	b480      	push	{r7}
 80061a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80061a4:	4b04      	ldr	r3, [pc, #16]	; (80061b8 <vTaskSuspendAll+0x18>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3301      	adds	r3, #1
 80061aa:	4a03      	ldr	r2, [pc, #12]	; (80061b8 <vTaskSuspendAll+0x18>)
 80061ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80061ae:	bf00      	nop
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	200013e0 	.word	0x200013e0

080061bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80061c2:	2300      	movs	r3, #0
 80061c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80061c6:	2300      	movs	r3, #0
 80061c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80061ca:	4b42      	ldr	r3, [pc, #264]	; (80062d4 <xTaskResumeAll+0x118>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10a      	bne.n	80061e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80061d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d6:	f383 8811 	msr	BASEPRI, r3
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	603b      	str	r3, [r7, #0]
}
 80061e4:	bf00      	nop
 80061e6:	e7fe      	b.n	80061e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80061e8:	f001 f924 	bl	8007434 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80061ec:	4b39      	ldr	r3, [pc, #228]	; (80062d4 <xTaskResumeAll+0x118>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3b01      	subs	r3, #1
 80061f2:	4a38      	ldr	r2, [pc, #224]	; (80062d4 <xTaskResumeAll+0x118>)
 80061f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061f6:	4b37      	ldr	r3, [pc, #220]	; (80062d4 <xTaskResumeAll+0x118>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d162      	bne.n	80062c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061fe:	4b36      	ldr	r3, [pc, #216]	; (80062d8 <xTaskResumeAll+0x11c>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d05e      	beq.n	80062c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006206:	e02f      	b.n	8006268 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006208:	4b34      	ldr	r3, [pc, #208]	; (80062dc <xTaskResumeAll+0x120>)
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	3318      	adds	r3, #24
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff f851 	bl	80052bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	3304      	adds	r3, #4
 800621e:	4618      	mov	r0, r3
 8006220:	f7ff f84c 	bl	80052bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006228:	4b2d      	ldr	r3, [pc, #180]	; (80062e0 <xTaskResumeAll+0x124>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	429a      	cmp	r2, r3
 800622e:	d903      	bls.n	8006238 <xTaskResumeAll+0x7c>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006234:	4a2a      	ldr	r2, [pc, #168]	; (80062e0 <xTaskResumeAll+0x124>)
 8006236:	6013      	str	r3, [r2, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800623c:	4613      	mov	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4a27      	ldr	r2, [pc, #156]	; (80062e4 <xTaskResumeAll+0x128>)
 8006246:	441a      	add	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	3304      	adds	r3, #4
 800624c:	4619      	mov	r1, r3
 800624e:	4610      	mov	r0, r2
 8006250:	f7fe ffd7 	bl	8005202 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006258:	4b23      	ldr	r3, [pc, #140]	; (80062e8 <xTaskResumeAll+0x12c>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625e:	429a      	cmp	r2, r3
 8006260:	d302      	bcc.n	8006268 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006262:	4b22      	ldr	r3, [pc, #136]	; (80062ec <xTaskResumeAll+0x130>)
 8006264:	2201      	movs	r2, #1
 8006266:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006268:	4b1c      	ldr	r3, [pc, #112]	; (80062dc <xTaskResumeAll+0x120>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1cb      	bne.n	8006208 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006276:	f000 fb5f 	bl	8006938 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800627a:	4b1d      	ldr	r3, [pc, #116]	; (80062f0 <xTaskResumeAll+0x134>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d010      	beq.n	80062a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006286:	f000 f847 	bl	8006318 <xTaskIncrementTick>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006290:	4b16      	ldr	r3, [pc, #88]	; (80062ec <xTaskResumeAll+0x130>)
 8006292:	2201      	movs	r2, #1
 8006294:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	3b01      	subs	r3, #1
 800629a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1f1      	bne.n	8006286 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80062a2:	4b13      	ldr	r3, [pc, #76]	; (80062f0 <xTaskResumeAll+0x134>)
 80062a4:	2200      	movs	r2, #0
 80062a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80062a8:	4b10      	ldr	r3, [pc, #64]	; (80062ec <xTaskResumeAll+0x130>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d009      	beq.n	80062c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80062b0:	2301      	movs	r3, #1
 80062b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80062b4:	4b0f      	ldr	r3, [pc, #60]	; (80062f4 <xTaskResumeAll+0x138>)
 80062b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062c4:	f001 f8e6 	bl	8007494 <vPortExitCritical>

	return xAlreadyYielded;
 80062c8:	68bb      	ldr	r3, [r7, #8]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	200013e0 	.word	0x200013e0
 80062d8:	200013b8 	.word	0x200013b8
 80062dc:	20001378 	.word	0x20001378
 80062e0:	200013c0 	.word	0x200013c0
 80062e4:	20000ee8 	.word	0x20000ee8
 80062e8:	20000ee4 	.word	0x20000ee4
 80062ec:	200013cc 	.word	0x200013cc
 80062f0:	200013c8 	.word	0x200013c8
 80062f4:	e000ed04 	.word	0xe000ed04

080062f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80062fe:	4b05      	ldr	r3, [pc, #20]	; (8006314 <xTaskGetTickCount+0x1c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006304:	687b      	ldr	r3, [r7, #4]
}
 8006306:	4618      	mov	r0, r3
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	200013bc 	.word	0x200013bc

08006318 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800631e:	2300      	movs	r3, #0
 8006320:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006322:	4b4f      	ldr	r3, [pc, #316]	; (8006460 <xTaskIncrementTick+0x148>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	f040 808f 	bne.w	800644a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800632c:	4b4d      	ldr	r3, [pc, #308]	; (8006464 <xTaskIncrementTick+0x14c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	3301      	adds	r3, #1
 8006332:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006334:	4a4b      	ldr	r2, [pc, #300]	; (8006464 <xTaskIncrementTick+0x14c>)
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d120      	bne.n	8006382 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006340:	4b49      	ldr	r3, [pc, #292]	; (8006468 <xTaskIncrementTick+0x150>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <xTaskIncrementTick+0x48>
	__asm volatile
 800634a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634e:	f383 8811 	msr	BASEPRI, r3
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	603b      	str	r3, [r7, #0]
}
 800635c:	bf00      	nop
 800635e:	e7fe      	b.n	800635e <xTaskIncrementTick+0x46>
 8006360:	4b41      	ldr	r3, [pc, #260]	; (8006468 <xTaskIncrementTick+0x150>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	60fb      	str	r3, [r7, #12]
 8006366:	4b41      	ldr	r3, [pc, #260]	; (800646c <xTaskIncrementTick+0x154>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a3f      	ldr	r2, [pc, #252]	; (8006468 <xTaskIncrementTick+0x150>)
 800636c:	6013      	str	r3, [r2, #0]
 800636e:	4a3f      	ldr	r2, [pc, #252]	; (800646c <xTaskIncrementTick+0x154>)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6013      	str	r3, [r2, #0]
 8006374:	4b3e      	ldr	r3, [pc, #248]	; (8006470 <xTaskIncrementTick+0x158>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3301      	adds	r3, #1
 800637a:	4a3d      	ldr	r2, [pc, #244]	; (8006470 <xTaskIncrementTick+0x158>)
 800637c:	6013      	str	r3, [r2, #0]
 800637e:	f000 fadb 	bl	8006938 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006382:	4b3c      	ldr	r3, [pc, #240]	; (8006474 <xTaskIncrementTick+0x15c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	429a      	cmp	r2, r3
 800638a:	d349      	bcc.n	8006420 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800638c:	4b36      	ldr	r3, [pc, #216]	; (8006468 <xTaskIncrementTick+0x150>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d104      	bne.n	80063a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006396:	4b37      	ldr	r3, [pc, #220]	; (8006474 <xTaskIncrementTick+0x15c>)
 8006398:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800639c:	601a      	str	r2, [r3, #0]
					break;
 800639e:	e03f      	b.n	8006420 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063a0:	4b31      	ldr	r3, [pc, #196]	; (8006468 <xTaskIncrementTick+0x150>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d203      	bcs.n	80063c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80063b8:	4a2e      	ldr	r2, [pc, #184]	; (8006474 <xTaskIncrementTick+0x15c>)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80063be:	e02f      	b.n	8006420 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	3304      	adds	r3, #4
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7fe ff79 	bl	80052bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d004      	beq.n	80063dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	3318      	adds	r3, #24
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fe ff70 	bl	80052bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e0:	4b25      	ldr	r3, [pc, #148]	; (8006478 <xTaskIncrementTick+0x160>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d903      	bls.n	80063f0 <xTaskIncrementTick+0xd8>
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ec:	4a22      	ldr	r2, [pc, #136]	; (8006478 <xTaskIncrementTick+0x160>)
 80063ee:	6013      	str	r3, [r2, #0]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f4:	4613      	mov	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4a1f      	ldr	r2, [pc, #124]	; (800647c <xTaskIncrementTick+0x164>)
 80063fe:	441a      	add	r2, r3
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	3304      	adds	r3, #4
 8006404:	4619      	mov	r1, r3
 8006406:	4610      	mov	r0, r2
 8006408:	f7fe fefb 	bl	8005202 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006410:	4b1b      	ldr	r3, [pc, #108]	; (8006480 <xTaskIncrementTick+0x168>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006416:	429a      	cmp	r2, r3
 8006418:	d3b8      	bcc.n	800638c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800641a:	2301      	movs	r3, #1
 800641c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800641e:	e7b5      	b.n	800638c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006420:	4b17      	ldr	r3, [pc, #92]	; (8006480 <xTaskIncrementTick+0x168>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006426:	4915      	ldr	r1, [pc, #84]	; (800647c <xTaskIncrementTick+0x164>)
 8006428:	4613      	mov	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4413      	add	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	440b      	add	r3, r1
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d901      	bls.n	800643c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006438:	2301      	movs	r3, #1
 800643a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800643c:	4b11      	ldr	r3, [pc, #68]	; (8006484 <xTaskIncrementTick+0x16c>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d007      	beq.n	8006454 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006444:	2301      	movs	r3, #1
 8006446:	617b      	str	r3, [r7, #20]
 8006448:	e004      	b.n	8006454 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800644a:	4b0f      	ldr	r3, [pc, #60]	; (8006488 <xTaskIncrementTick+0x170>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	3301      	adds	r3, #1
 8006450:	4a0d      	ldr	r2, [pc, #52]	; (8006488 <xTaskIncrementTick+0x170>)
 8006452:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006454:	697b      	ldr	r3, [r7, #20]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	200013e0 	.word	0x200013e0
 8006464:	200013bc 	.word	0x200013bc
 8006468:	20001370 	.word	0x20001370
 800646c:	20001374 	.word	0x20001374
 8006470:	200013d0 	.word	0x200013d0
 8006474:	200013d8 	.word	0x200013d8
 8006478:	200013c0 	.word	0x200013c0
 800647c:	20000ee8 	.word	0x20000ee8
 8006480:	20000ee4 	.word	0x20000ee4
 8006484:	200013cc 	.word	0x200013cc
 8006488:	200013c8 	.word	0x200013c8

0800648c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006492:	4b2a      	ldr	r3, [pc, #168]	; (800653c <vTaskSwitchContext+0xb0>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800649a:	4b29      	ldr	r3, [pc, #164]	; (8006540 <vTaskSwitchContext+0xb4>)
 800649c:	2201      	movs	r2, #1
 800649e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80064a0:	e046      	b.n	8006530 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80064a2:	4b27      	ldr	r3, [pc, #156]	; (8006540 <vTaskSwitchContext+0xb4>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064a8:	4b26      	ldr	r3, [pc, #152]	; (8006544 <vTaskSwitchContext+0xb8>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	60fb      	str	r3, [r7, #12]
 80064ae:	e010      	b.n	80064d2 <vTaskSwitchContext+0x46>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10a      	bne.n	80064cc <vTaskSwitchContext+0x40>
	__asm volatile
 80064b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	607b      	str	r3, [r7, #4]
}
 80064c8:	bf00      	nop
 80064ca:	e7fe      	b.n	80064ca <vTaskSwitchContext+0x3e>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	3b01      	subs	r3, #1
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	491d      	ldr	r1, [pc, #116]	; (8006548 <vTaskSwitchContext+0xbc>)
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4613      	mov	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	440b      	add	r3, r1
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0e4      	beq.n	80064b0 <vTaskSwitchContext+0x24>
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	4613      	mov	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4a15      	ldr	r2, [pc, #84]	; (8006548 <vTaskSwitchContext+0xbc>)
 80064f2:	4413      	add	r3, r2
 80064f4:	60bb      	str	r3, [r7, #8]
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	605a      	str	r2, [r3, #4]
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	685a      	ldr	r2, [r3, #4]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	3308      	adds	r3, #8
 8006508:	429a      	cmp	r2, r3
 800650a:	d104      	bne.n	8006516 <vTaskSwitchContext+0x8a>
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	605a      	str	r2, [r3, #4]
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	4a0b      	ldr	r2, [pc, #44]	; (800654c <vTaskSwitchContext+0xc0>)
 800651e:	6013      	str	r3, [r2, #0]
 8006520:	4a08      	ldr	r2, [pc, #32]	; (8006544 <vTaskSwitchContext+0xb8>)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006526:	4b09      	ldr	r3, [pc, #36]	; (800654c <vTaskSwitchContext+0xc0>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3354      	adds	r3, #84	; 0x54
 800652c:	4a08      	ldr	r2, [pc, #32]	; (8006550 <vTaskSwitchContext+0xc4>)
 800652e:	6013      	str	r3, [r2, #0]
}
 8006530:	bf00      	nop
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	200013e0 	.word	0x200013e0
 8006540:	200013cc 	.word	0x200013cc
 8006544:	200013c0 	.word	0x200013c0
 8006548:	20000ee8 	.word	0x20000ee8
 800654c:	20000ee4 	.word	0x20000ee4
 8006550:	20000078 	.word	0x20000078

08006554 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10a      	bne.n	800657a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	60fb      	str	r3, [r7, #12]
}
 8006576:	bf00      	nop
 8006578:	e7fe      	b.n	8006578 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800657a:	4b07      	ldr	r3, [pc, #28]	; (8006598 <vTaskPlaceOnEventList+0x44>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	3318      	adds	r3, #24
 8006580:	4619      	mov	r1, r3
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7fe fe61 	bl	800524a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006588:	2101      	movs	r1, #1
 800658a:	6838      	ldr	r0, [r7, #0]
 800658c:	f000 fa80 	bl	8006a90 <prvAddCurrentTaskToDelayedList>
}
 8006590:	bf00      	nop
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	20000ee4 	.word	0x20000ee4

0800659c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10a      	bne.n	80065c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	617b      	str	r3, [r7, #20]
}
 80065c0:	bf00      	nop
 80065c2:	e7fe      	b.n	80065c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065c4:	4b0a      	ldr	r3, [pc, #40]	; (80065f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3318      	adds	r3, #24
 80065ca:	4619      	mov	r1, r3
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f7fe fe18 	bl	8005202 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d002      	beq.n	80065de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80065d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	68b8      	ldr	r0, [r7, #8]
 80065e2:	f000 fa55 	bl	8006a90 <prvAddCurrentTaskToDelayedList>
	}
 80065e6:	bf00      	nop
 80065e8:	3718      	adds	r7, #24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	20000ee4 	.word	0x20000ee4

080065f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10a      	bne.n	8006620 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800660a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660e:	f383 8811 	msr	BASEPRI, r3
 8006612:	f3bf 8f6f 	isb	sy
 8006616:	f3bf 8f4f 	dsb	sy
 800661a:	60fb      	str	r3, [r7, #12]
}
 800661c:	bf00      	nop
 800661e:	e7fe      	b.n	800661e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	3318      	adds	r3, #24
 8006624:	4618      	mov	r0, r3
 8006626:	f7fe fe49 	bl	80052bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800662a:	4b1e      	ldr	r3, [pc, #120]	; (80066a4 <xTaskRemoveFromEventList+0xb0>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d11d      	bne.n	800666e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	3304      	adds	r3, #4
 8006636:	4618      	mov	r0, r3
 8006638:	f7fe fe40 	bl	80052bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006640:	4b19      	ldr	r3, [pc, #100]	; (80066a8 <xTaskRemoveFromEventList+0xb4>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	429a      	cmp	r2, r3
 8006646:	d903      	bls.n	8006650 <xTaskRemoveFromEventList+0x5c>
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664c:	4a16      	ldr	r2, [pc, #88]	; (80066a8 <xTaskRemoveFromEventList+0xb4>)
 800664e:	6013      	str	r3, [r2, #0]
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006654:	4613      	mov	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4a13      	ldr	r2, [pc, #76]	; (80066ac <xTaskRemoveFromEventList+0xb8>)
 800665e:	441a      	add	r2, r3
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	3304      	adds	r3, #4
 8006664:	4619      	mov	r1, r3
 8006666:	4610      	mov	r0, r2
 8006668:	f7fe fdcb 	bl	8005202 <vListInsertEnd>
 800666c:	e005      	b.n	800667a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	3318      	adds	r3, #24
 8006672:	4619      	mov	r1, r3
 8006674:	480e      	ldr	r0, [pc, #56]	; (80066b0 <xTaskRemoveFromEventList+0xbc>)
 8006676:	f7fe fdc4 	bl	8005202 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800667e:	4b0d      	ldr	r3, [pc, #52]	; (80066b4 <xTaskRemoveFromEventList+0xc0>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006684:	429a      	cmp	r2, r3
 8006686:	d905      	bls.n	8006694 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006688:	2301      	movs	r3, #1
 800668a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800668c:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <xTaskRemoveFromEventList+0xc4>)
 800668e:	2201      	movs	r2, #1
 8006690:	601a      	str	r2, [r3, #0]
 8006692:	e001      	b.n	8006698 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006694:	2300      	movs	r3, #0
 8006696:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006698:	697b      	ldr	r3, [r7, #20]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3718      	adds	r7, #24
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	200013e0 	.word	0x200013e0
 80066a8:	200013c0 	.word	0x200013c0
 80066ac:	20000ee8 	.word	0x20000ee8
 80066b0:	20001378 	.word	0x20001378
 80066b4:	20000ee4 	.word	0x20000ee4
 80066b8:	200013cc 	.word	0x200013cc

080066bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066c4:	4b06      	ldr	r3, [pc, #24]	; (80066e0 <vTaskInternalSetTimeOutState+0x24>)
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066cc:	4b05      	ldr	r3, [pc, #20]	; (80066e4 <vTaskInternalSetTimeOutState+0x28>)
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	605a      	str	r2, [r3, #4]
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	200013d0 	.word	0x200013d0
 80066e4:	200013bc 	.word	0x200013bc

080066e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b088      	sub	sp, #32
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10a      	bne.n	800670e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80066f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fc:	f383 8811 	msr	BASEPRI, r3
 8006700:	f3bf 8f6f 	isb	sy
 8006704:	f3bf 8f4f 	dsb	sy
 8006708:	613b      	str	r3, [r7, #16]
}
 800670a:	bf00      	nop
 800670c:	e7fe      	b.n	800670c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10a      	bne.n	800672a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006718:	f383 8811 	msr	BASEPRI, r3
 800671c:	f3bf 8f6f 	isb	sy
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	60fb      	str	r3, [r7, #12]
}
 8006726:	bf00      	nop
 8006728:	e7fe      	b.n	8006728 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800672a:	f000 fe83 	bl	8007434 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800672e:	4b1d      	ldr	r3, [pc, #116]	; (80067a4 <xTaskCheckForTimeOut+0xbc>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006746:	d102      	bne.n	800674e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006748:	2300      	movs	r3, #0
 800674a:	61fb      	str	r3, [r7, #28]
 800674c:	e023      	b.n	8006796 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	4b15      	ldr	r3, [pc, #84]	; (80067a8 <xTaskCheckForTimeOut+0xc0>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	429a      	cmp	r2, r3
 8006758:	d007      	beq.n	800676a <xTaskCheckForTimeOut+0x82>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	69ba      	ldr	r2, [r7, #24]
 8006760:	429a      	cmp	r2, r3
 8006762:	d302      	bcc.n	800676a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006764:	2301      	movs	r3, #1
 8006766:	61fb      	str	r3, [r7, #28]
 8006768:	e015      	b.n	8006796 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	429a      	cmp	r2, r3
 8006772:	d20b      	bcs.n	800678c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	1ad2      	subs	r2, r2, r3
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7ff ff9b 	bl	80066bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006786:	2300      	movs	r3, #0
 8006788:	61fb      	str	r3, [r7, #28]
 800678a:	e004      	b.n	8006796 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2200      	movs	r2, #0
 8006790:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006792:	2301      	movs	r3, #1
 8006794:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006796:	f000 fe7d 	bl	8007494 <vPortExitCritical>

	return xReturn;
 800679a:	69fb      	ldr	r3, [r7, #28]
}
 800679c:	4618      	mov	r0, r3
 800679e:	3720      	adds	r7, #32
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	200013bc 	.word	0x200013bc
 80067a8:	200013d0 	.word	0x200013d0

080067ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80067ac:	b480      	push	{r7}
 80067ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80067b0:	4b03      	ldr	r3, [pc, #12]	; (80067c0 <vTaskMissedYield+0x14>)
 80067b2:	2201      	movs	r2, #1
 80067b4:	601a      	str	r2, [r3, #0]
}
 80067b6:	bf00      	nop
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr
 80067c0:	200013cc 	.word	0x200013cc

080067c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067cc:	f000 f852 	bl	8006874 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067d0:	4b06      	ldr	r3, [pc, #24]	; (80067ec <prvIdleTask+0x28>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d9f9      	bls.n	80067cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80067d8:	4b05      	ldr	r3, [pc, #20]	; (80067f0 <prvIdleTask+0x2c>)
 80067da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067de:	601a      	str	r2, [r3, #0]
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80067e8:	e7f0      	b.n	80067cc <prvIdleTask+0x8>
 80067ea:	bf00      	nop
 80067ec:	20000ee8 	.word	0x20000ee8
 80067f0:	e000ed04 	.word	0xe000ed04

080067f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067fa:	2300      	movs	r3, #0
 80067fc:	607b      	str	r3, [r7, #4]
 80067fe:	e00c      	b.n	800681a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	4613      	mov	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4413      	add	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4a12      	ldr	r2, [pc, #72]	; (8006854 <prvInitialiseTaskLists+0x60>)
 800680c:	4413      	add	r3, r2
 800680e:	4618      	mov	r0, r3
 8006810:	f7fe fcca 	bl	80051a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	3301      	adds	r3, #1
 8006818:	607b      	str	r3, [r7, #4]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b37      	cmp	r3, #55	; 0x37
 800681e:	d9ef      	bls.n	8006800 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006820:	480d      	ldr	r0, [pc, #52]	; (8006858 <prvInitialiseTaskLists+0x64>)
 8006822:	f7fe fcc1 	bl	80051a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006826:	480d      	ldr	r0, [pc, #52]	; (800685c <prvInitialiseTaskLists+0x68>)
 8006828:	f7fe fcbe 	bl	80051a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800682c:	480c      	ldr	r0, [pc, #48]	; (8006860 <prvInitialiseTaskLists+0x6c>)
 800682e:	f7fe fcbb 	bl	80051a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006832:	480c      	ldr	r0, [pc, #48]	; (8006864 <prvInitialiseTaskLists+0x70>)
 8006834:	f7fe fcb8 	bl	80051a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006838:	480b      	ldr	r0, [pc, #44]	; (8006868 <prvInitialiseTaskLists+0x74>)
 800683a:	f7fe fcb5 	bl	80051a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800683e:	4b0b      	ldr	r3, [pc, #44]	; (800686c <prvInitialiseTaskLists+0x78>)
 8006840:	4a05      	ldr	r2, [pc, #20]	; (8006858 <prvInitialiseTaskLists+0x64>)
 8006842:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006844:	4b0a      	ldr	r3, [pc, #40]	; (8006870 <prvInitialiseTaskLists+0x7c>)
 8006846:	4a05      	ldr	r2, [pc, #20]	; (800685c <prvInitialiseTaskLists+0x68>)
 8006848:	601a      	str	r2, [r3, #0]
}
 800684a:	bf00      	nop
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	20000ee8 	.word	0x20000ee8
 8006858:	20001348 	.word	0x20001348
 800685c:	2000135c 	.word	0x2000135c
 8006860:	20001378 	.word	0x20001378
 8006864:	2000138c 	.word	0x2000138c
 8006868:	200013a4 	.word	0x200013a4
 800686c:	20001370 	.word	0x20001370
 8006870:	20001374 	.word	0x20001374

08006874 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800687a:	e019      	b.n	80068b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800687c:	f000 fdda 	bl	8007434 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006880:	4b10      	ldr	r3, [pc, #64]	; (80068c4 <prvCheckTasksWaitingTermination+0x50>)
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	3304      	adds	r3, #4
 800688c:	4618      	mov	r0, r3
 800688e:	f7fe fd15 	bl	80052bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006892:	4b0d      	ldr	r3, [pc, #52]	; (80068c8 <prvCheckTasksWaitingTermination+0x54>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	3b01      	subs	r3, #1
 8006898:	4a0b      	ldr	r2, [pc, #44]	; (80068c8 <prvCheckTasksWaitingTermination+0x54>)
 800689a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800689c:	4b0b      	ldr	r3, [pc, #44]	; (80068cc <prvCheckTasksWaitingTermination+0x58>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	3b01      	subs	r3, #1
 80068a2:	4a0a      	ldr	r2, [pc, #40]	; (80068cc <prvCheckTasksWaitingTermination+0x58>)
 80068a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80068a6:	f000 fdf5 	bl	8007494 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f810 	bl	80068d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068b0:	4b06      	ldr	r3, [pc, #24]	; (80068cc <prvCheckTasksWaitingTermination+0x58>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1e1      	bne.n	800687c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80068b8:	bf00      	nop
 80068ba:	bf00      	nop
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	2000138c 	.word	0x2000138c
 80068c8:	200013b8 	.word	0x200013b8
 80068cc:	200013a0 	.word	0x200013a0

080068d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	3354      	adds	r3, #84	; 0x54
 80068dc:	4618      	mov	r0, r3
 80068de:	f001 fe09 	bl	80084f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d108      	bne.n	80068fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f0:	4618      	mov	r0, r3
 80068f2:	f000 ff8d 	bl	8007810 <vPortFree>
				vPortFree( pxTCB );
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 ff8a 	bl	8007810 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80068fc:	e018      	b.n	8006930 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006904:	2b01      	cmp	r3, #1
 8006906:	d103      	bne.n	8006910 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 ff81 	bl	8007810 <vPortFree>
	}
 800690e:	e00f      	b.n	8006930 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006916:	2b02      	cmp	r3, #2
 8006918:	d00a      	beq.n	8006930 <prvDeleteTCB+0x60>
	__asm volatile
 800691a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691e:	f383 8811 	msr	BASEPRI, r3
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	60fb      	str	r3, [r7, #12]
}
 800692c:	bf00      	nop
 800692e:	e7fe      	b.n	800692e <prvDeleteTCB+0x5e>
	}
 8006930:	bf00      	nop
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800693e:	4b0c      	ldr	r3, [pc, #48]	; (8006970 <prvResetNextTaskUnblockTime+0x38>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d104      	bne.n	8006952 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006948:	4b0a      	ldr	r3, [pc, #40]	; (8006974 <prvResetNextTaskUnblockTime+0x3c>)
 800694a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800694e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006950:	e008      	b.n	8006964 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006952:	4b07      	ldr	r3, [pc, #28]	; (8006970 <prvResetNextTaskUnblockTime+0x38>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	4a04      	ldr	r2, [pc, #16]	; (8006974 <prvResetNextTaskUnblockTime+0x3c>)
 8006962:	6013      	str	r3, [r2, #0]
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	20001370 	.word	0x20001370
 8006974:	200013d8 	.word	0x200013d8

08006978 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800697e:	4b0b      	ldr	r3, [pc, #44]	; (80069ac <xTaskGetSchedulerState+0x34>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d102      	bne.n	800698c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006986:	2301      	movs	r3, #1
 8006988:	607b      	str	r3, [r7, #4]
 800698a:	e008      	b.n	800699e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800698c:	4b08      	ldr	r3, [pc, #32]	; (80069b0 <xTaskGetSchedulerState+0x38>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d102      	bne.n	800699a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006994:	2302      	movs	r3, #2
 8006996:	607b      	str	r3, [r7, #4]
 8006998:	e001      	b.n	800699e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800699a:	2300      	movs	r3, #0
 800699c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800699e:	687b      	ldr	r3, [r7, #4]
	}
 80069a0:	4618      	mov	r0, r3
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	200013c4 	.word	0x200013c4
 80069b0:	200013e0 	.word	0x200013e0

080069b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80069c0:	2300      	movs	r3, #0
 80069c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d056      	beq.n	8006a78 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80069ca:	4b2e      	ldr	r3, [pc, #184]	; (8006a84 <xTaskPriorityDisinherit+0xd0>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d00a      	beq.n	80069ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	60fb      	str	r3, [r7, #12]
}
 80069e6:	bf00      	nop
 80069e8:	e7fe      	b.n	80069e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10a      	bne.n	8006a08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80069f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f6:	f383 8811 	msr	BASEPRI, r3
 80069fa:	f3bf 8f6f 	isb	sy
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	60bb      	str	r3, [r7, #8]
}
 8006a04:	bf00      	nop
 8006a06:	e7fe      	b.n	8006a06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a0c:	1e5a      	subs	r2, r3, #1
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d02c      	beq.n	8006a78 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d128      	bne.n	8006a78 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	3304      	adds	r3, #4
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fe fc46 	bl	80052bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a48:	4b0f      	ldr	r3, [pc, #60]	; (8006a88 <xTaskPriorityDisinherit+0xd4>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d903      	bls.n	8006a58 <xTaskPriorityDisinherit+0xa4>
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	4a0c      	ldr	r2, [pc, #48]	; (8006a88 <xTaskPriorityDisinherit+0xd4>)
 8006a56:	6013      	str	r3, [r2, #0]
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4a09      	ldr	r2, [pc, #36]	; (8006a8c <xTaskPriorityDisinherit+0xd8>)
 8006a66:	441a      	add	r2, r3
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	4610      	mov	r0, r2
 8006a70:	f7fe fbc7 	bl	8005202 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006a74:	2301      	movs	r3, #1
 8006a76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a78:	697b      	ldr	r3, [r7, #20]
	}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3718      	adds	r7, #24
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	20000ee4 	.word	0x20000ee4
 8006a88:	200013c0 	.word	0x200013c0
 8006a8c:	20000ee8 	.word	0x20000ee8

08006a90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a9a:	4b21      	ldr	r3, [pc, #132]	; (8006b20 <prvAddCurrentTaskToDelayedList+0x90>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006aa0:	4b20      	ldr	r3, [pc, #128]	; (8006b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fe fc08 	bl	80052bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ab2:	d10a      	bne.n	8006aca <prvAddCurrentTaskToDelayedList+0x3a>
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d007      	beq.n	8006aca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aba:	4b1a      	ldr	r3, [pc, #104]	; (8006b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3304      	adds	r3, #4
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	4819      	ldr	r0, [pc, #100]	; (8006b28 <prvAddCurrentTaskToDelayedList+0x98>)
 8006ac4:	f7fe fb9d 	bl	8005202 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ac8:	e026      	b.n	8006b18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4413      	add	r3, r2
 8006ad0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ad2:	4b14      	ldr	r3, [pc, #80]	; (8006b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d209      	bcs.n	8006af6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ae2:	4b12      	ldr	r3, [pc, #72]	; (8006b2c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	4b0f      	ldr	r3, [pc, #60]	; (8006b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	3304      	adds	r3, #4
 8006aec:	4619      	mov	r1, r3
 8006aee:	4610      	mov	r0, r2
 8006af0:	f7fe fbab 	bl	800524a <vListInsert>
}
 8006af4:	e010      	b.n	8006b18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006af6:	4b0e      	ldr	r3, [pc, #56]	; (8006b30 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	4b0a      	ldr	r3, [pc, #40]	; (8006b24 <prvAddCurrentTaskToDelayedList+0x94>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3304      	adds	r3, #4
 8006b00:	4619      	mov	r1, r3
 8006b02:	4610      	mov	r0, r2
 8006b04:	f7fe fba1 	bl	800524a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b08:	4b0a      	ldr	r3, [pc, #40]	; (8006b34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d202      	bcs.n	8006b18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b12:	4a08      	ldr	r2, [pc, #32]	; (8006b34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	6013      	str	r3, [r2, #0]
}
 8006b18:	bf00      	nop
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	200013bc 	.word	0x200013bc
 8006b24:	20000ee4 	.word	0x20000ee4
 8006b28:	200013a4 	.word	0x200013a4
 8006b2c:	20001374 	.word	0x20001374
 8006b30:	20001370 	.word	0x20001370
 8006b34:	200013d8 	.word	0x200013d8

08006b38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b08a      	sub	sp, #40	; 0x28
 8006b3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b42:	f000 fb07 	bl	8007154 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b46:	4b1c      	ldr	r3, [pc, #112]	; (8006bb8 <xTimerCreateTimerTask+0x80>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d021      	beq.n	8006b92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b52:	2300      	movs	r3, #0
 8006b54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b56:	1d3a      	adds	r2, r7, #4
 8006b58:	f107 0108 	add.w	r1, r7, #8
 8006b5c:	f107 030c 	add.w	r3, r7, #12
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7fe fb07 	bl	8005174 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b66:	6879      	ldr	r1, [r7, #4]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	9202      	str	r2, [sp, #8]
 8006b6e:	9301      	str	r3, [sp, #4]
 8006b70:	2302      	movs	r3, #2
 8006b72:	9300      	str	r3, [sp, #0]
 8006b74:	2300      	movs	r3, #0
 8006b76:	460a      	mov	r2, r1
 8006b78:	4910      	ldr	r1, [pc, #64]	; (8006bbc <xTimerCreateTimerTask+0x84>)
 8006b7a:	4811      	ldr	r0, [pc, #68]	; (8006bc0 <xTimerCreateTimerTask+0x88>)
 8006b7c:	f7ff f8b4 	bl	8005ce8 <xTaskCreateStatic>
 8006b80:	4603      	mov	r3, r0
 8006b82:	4a10      	ldr	r2, [pc, #64]	; (8006bc4 <xTimerCreateTimerTask+0x8c>)
 8006b84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006b86:	4b0f      	ldr	r3, [pc, #60]	; (8006bc4 <xTimerCreateTimerTask+0x8c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10a      	bne.n	8006bae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	613b      	str	r3, [r7, #16]
}
 8006baa:	bf00      	nop
 8006bac:	e7fe      	b.n	8006bac <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006bae:	697b      	ldr	r3, [r7, #20]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3718      	adds	r7, #24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	20001414 	.word	0x20001414
 8006bbc:	0800a84c 	.word	0x0800a84c
 8006bc0:	08006cfd 	.word	0x08006cfd
 8006bc4:	20001418 	.word	0x20001418

08006bc8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b08a      	sub	sp, #40	; 0x28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
 8006bd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10a      	bne.n	8006bf6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	623b      	str	r3, [r7, #32]
}
 8006bf2:	bf00      	nop
 8006bf4:	e7fe      	b.n	8006bf4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006bf6:	4b1a      	ldr	r3, [pc, #104]	; (8006c60 <xTimerGenericCommand+0x98>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d02a      	beq.n	8006c54 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	2b05      	cmp	r3, #5
 8006c0e:	dc18      	bgt.n	8006c42 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c10:	f7ff feb2 	bl	8006978 <xTaskGetSchedulerState>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d109      	bne.n	8006c2e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c1a:	4b11      	ldr	r3, [pc, #68]	; (8006c60 <xTimerGenericCommand+0x98>)
 8006c1c:	6818      	ldr	r0, [r3, #0]
 8006c1e:	f107 0110 	add.w	r1, r7, #16
 8006c22:	2300      	movs	r3, #0
 8006c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c26:	f7fe fc77 	bl	8005518 <xQueueGenericSend>
 8006c2a:	6278      	str	r0, [r7, #36]	; 0x24
 8006c2c:	e012      	b.n	8006c54 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c2e:	4b0c      	ldr	r3, [pc, #48]	; (8006c60 <xTimerGenericCommand+0x98>)
 8006c30:	6818      	ldr	r0, [r3, #0]
 8006c32:	f107 0110 	add.w	r1, r7, #16
 8006c36:	2300      	movs	r3, #0
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f7fe fc6d 	bl	8005518 <xQueueGenericSend>
 8006c3e:	6278      	str	r0, [r7, #36]	; 0x24
 8006c40:	e008      	b.n	8006c54 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c42:	4b07      	ldr	r3, [pc, #28]	; (8006c60 <xTimerGenericCommand+0x98>)
 8006c44:	6818      	ldr	r0, [r3, #0]
 8006c46:	f107 0110 	add.w	r1, r7, #16
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	f7fe fd61 	bl	8005714 <xQueueGenericSendFromISR>
 8006c52:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3728      	adds	r7, #40	; 0x28
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	20001414 	.word	0x20001414

08006c64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b088      	sub	sp, #32
 8006c68:	af02      	add	r7, sp, #8
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c6e:	4b22      	ldr	r3, [pc, #136]	; (8006cf8 <prvProcessExpiredTimer+0x94>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	3304      	adds	r3, #4
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fe fb1d 	bl	80052bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c88:	f003 0304 	and.w	r3, r3, #4
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d022      	beq.n	8006cd6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	699a      	ldr	r2, [r3, #24]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	18d1      	adds	r1, r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	6978      	ldr	r0, [r7, #20]
 8006c9e:	f000 f8d1 	bl	8006e44 <prvInsertTimerInActiveList>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d01f      	beq.n	8006ce8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ca8:	2300      	movs	r3, #0
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	2300      	movs	r3, #0
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	6978      	ldr	r0, [r7, #20]
 8006cb4:	f7ff ff88 	bl	8006bc8 <xTimerGenericCommand>
 8006cb8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d113      	bne.n	8006ce8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	60fb      	str	r3, [r7, #12]
}
 8006cd2:	bf00      	nop
 8006cd4:	e7fe      	b.n	8006cd4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cdc:	f023 0301 	bic.w	r3, r3, #1
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	6978      	ldr	r0, [r7, #20]
 8006cee:	4798      	blx	r3
}
 8006cf0:	bf00      	nop
 8006cf2:	3718      	adds	r7, #24
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	2000140c 	.word	0x2000140c

08006cfc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d04:	f107 0308 	add.w	r3, r7, #8
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 f857 	bl	8006dbc <prvGetNextExpireTime>
 8006d0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	4619      	mov	r1, r3
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 f803 	bl	8006d20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006d1a:	f000 f8d5 	bl	8006ec8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d1e:	e7f1      	b.n	8006d04 <prvTimerTask+0x8>

08006d20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d2a:	f7ff fa39 	bl	80061a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d2e:	f107 0308 	add.w	r3, r7, #8
 8006d32:	4618      	mov	r0, r3
 8006d34:	f000 f866 	bl	8006e04 <prvSampleTimeNow>
 8006d38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d130      	bne.n	8006da2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10a      	bne.n	8006d5c <prvProcessTimerOrBlockTask+0x3c>
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d806      	bhi.n	8006d5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d4e:	f7ff fa35 	bl	80061bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d52:	68f9      	ldr	r1, [r7, #12]
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f7ff ff85 	bl	8006c64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006d5a:	e024      	b.n	8006da6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d008      	beq.n	8006d74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d62:	4b13      	ldr	r3, [pc, #76]	; (8006db0 <prvProcessTimerOrBlockTask+0x90>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <prvProcessTimerOrBlockTask+0x50>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e000      	b.n	8006d72 <prvProcessTimerOrBlockTask+0x52>
 8006d70:	2300      	movs	r3, #0
 8006d72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d74:	4b0f      	ldr	r3, [pc, #60]	; (8006db4 <prvProcessTimerOrBlockTask+0x94>)
 8006d76:	6818      	ldr	r0, [r3, #0]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	4619      	mov	r1, r3
 8006d82:	f7fe ff7d 	bl	8005c80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d86:	f7ff fa19 	bl	80061bc <xTaskResumeAll>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10a      	bne.n	8006da6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006d90:	4b09      	ldr	r3, [pc, #36]	; (8006db8 <prvProcessTimerOrBlockTask+0x98>)
 8006d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d96:	601a      	str	r2, [r3, #0]
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	f3bf 8f6f 	isb	sy
}
 8006da0:	e001      	b.n	8006da6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006da2:	f7ff fa0b 	bl	80061bc <xTaskResumeAll>
}
 8006da6:	bf00      	nop
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	20001410 	.word	0x20001410
 8006db4:	20001414 	.word	0x20001414
 8006db8:	e000ed04 	.word	0xe000ed04

08006dbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006dc4:	4b0e      	ldr	r3, [pc, #56]	; (8006e00 <prvGetNextExpireTime+0x44>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <prvGetNextExpireTime+0x16>
 8006dce:	2201      	movs	r2, #1
 8006dd0:	e000      	b.n	8006dd4 <prvGetNextExpireTime+0x18>
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d105      	bne.n	8006dec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006de0:	4b07      	ldr	r3, [pc, #28]	; (8006e00 <prvGetNextExpireTime+0x44>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	60fb      	str	r3, [r7, #12]
 8006dea:	e001      	b.n	8006df0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006dec:	2300      	movs	r3, #0
 8006dee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006df0:	68fb      	ldr	r3, [r7, #12]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3714      	adds	r7, #20
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	2000140c 	.word	0x2000140c

08006e04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006e0c:	f7ff fa74 	bl	80062f8 <xTaskGetTickCount>
 8006e10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006e12:	4b0b      	ldr	r3, [pc, #44]	; (8006e40 <prvSampleTimeNow+0x3c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d205      	bcs.n	8006e28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006e1c:	f000 f936 	bl	800708c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	e002      	b.n	8006e2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e2e:	4a04      	ldr	r2, [pc, #16]	; (8006e40 <prvSampleTimeNow+0x3c>)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e34:	68fb      	ldr	r3, [r7, #12]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	2000141c 	.word	0x2000141c

08006e44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
 8006e50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e52:	2300      	movs	r3, #0
 8006e54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d812      	bhi.n	8006e90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	1ad2      	subs	r2, r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d302      	bcc.n	8006e7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	617b      	str	r3, [r7, #20]
 8006e7c:	e01b      	b.n	8006eb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e7e:	4b10      	ldr	r3, [pc, #64]	; (8006ec0 <prvInsertTimerInActiveList+0x7c>)
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	3304      	adds	r3, #4
 8006e86:	4619      	mov	r1, r3
 8006e88:	4610      	mov	r0, r2
 8006e8a:	f7fe f9de 	bl	800524a <vListInsert>
 8006e8e:	e012      	b.n	8006eb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d206      	bcs.n	8006ea6 <prvInsertTimerInActiveList+0x62>
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d302      	bcc.n	8006ea6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	617b      	str	r3, [r7, #20]
 8006ea4:	e007      	b.n	8006eb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ea6:	4b07      	ldr	r3, [pc, #28]	; (8006ec4 <prvInsertTimerInActiveList+0x80>)
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	3304      	adds	r3, #4
 8006eae:	4619      	mov	r1, r3
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	f7fe f9ca 	bl	800524a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006eb6:	697b      	ldr	r3, [r7, #20]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3718      	adds	r7, #24
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	20001410 	.word	0x20001410
 8006ec4:	2000140c 	.word	0x2000140c

08006ec8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b08e      	sub	sp, #56	; 0x38
 8006ecc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ece:	e0ca      	b.n	8007066 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	da18      	bge.n	8006f08 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ed6:	1d3b      	adds	r3, r7, #4
 8006ed8:	3304      	adds	r3, #4
 8006eda:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10a      	bne.n	8006ef8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee6:	f383 8811 	msr	BASEPRI, r3
 8006eea:	f3bf 8f6f 	isb	sy
 8006eee:	f3bf 8f4f 	dsb	sy
 8006ef2:	61fb      	str	r3, [r7, #28]
}
 8006ef4:	bf00      	nop
 8006ef6:	e7fe      	b.n	8006ef6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006efe:	6850      	ldr	r0, [r2, #4]
 8006f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f02:	6892      	ldr	r2, [r2, #8]
 8006f04:	4611      	mov	r1, r2
 8006f06:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f2c0 80ab 	blt.w	8007066 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f16:	695b      	ldr	r3, [r3, #20]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d004      	beq.n	8006f26 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1e:	3304      	adds	r3, #4
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7fe f9cb 	bl	80052bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f26:	463b      	mov	r3, r7
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7ff ff6b 	bl	8006e04 <prvSampleTimeNow>
 8006f2e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b09      	cmp	r3, #9
 8006f34:	f200 8096 	bhi.w	8007064 <prvProcessReceivedCommands+0x19c>
 8006f38:	a201      	add	r2, pc, #4	; (adr r2, 8006f40 <prvProcessReceivedCommands+0x78>)
 8006f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3e:	bf00      	nop
 8006f40:	08006f69 	.word	0x08006f69
 8006f44:	08006f69 	.word	0x08006f69
 8006f48:	08006f69 	.word	0x08006f69
 8006f4c:	08006fdd 	.word	0x08006fdd
 8006f50:	08006ff1 	.word	0x08006ff1
 8006f54:	0800703b 	.word	0x0800703b
 8006f58:	08006f69 	.word	0x08006f69
 8006f5c:	08006f69 	.word	0x08006f69
 8006f60:	08006fdd 	.word	0x08006fdd
 8006f64:	08006ff1 	.word	0x08006ff1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f6e:	f043 0301 	orr.w	r3, r3, #1
 8006f72:	b2da      	uxtb	r2, r3
 8006f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	18d1      	adds	r1, r2, r3
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f88:	f7ff ff5c 	bl	8006e44 <prvInsertTimerInActiveList>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d069      	beq.n	8007066 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fa0:	f003 0304 	and.w	r3, r3, #4
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d05e      	beq.n	8007066 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	441a      	add	r2, r3
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	9300      	str	r3, [sp, #0]
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fba:	f7ff fe05 	bl	8006bc8 <xTimerGenericCommand>
 8006fbe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006fc0:	6a3b      	ldr	r3, [r7, #32]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d14f      	bne.n	8007066 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fca:	f383 8811 	msr	BASEPRI, r3
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f3bf 8f4f 	dsb	sy
 8006fd6:	61bb      	str	r3, [r7, #24]
}
 8006fd8:	bf00      	nop
 8006fda:	e7fe      	b.n	8006fda <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fe2:	f023 0301 	bic.w	r3, r3, #1
 8006fe6:	b2da      	uxtb	r2, r3
 8006fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006fee:	e03a      	b.n	8007066 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ff6:	f043 0301 	orr.w	r3, r3, #1
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007006:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d10a      	bne.n	8007026 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	617b      	str	r3, [r7, #20]
}
 8007022:	bf00      	nop
 8007024:	e7fe      	b.n	8007024 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007028:	699a      	ldr	r2, [r3, #24]
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	18d1      	adds	r1, r2, r3
 800702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007032:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007034:	f7ff ff06 	bl	8006e44 <prvInsertTimerInActiveList>
					break;
 8007038:	e015      	b.n	8007066 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800703a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007040:	f003 0302 	and.w	r3, r3, #2
 8007044:	2b00      	cmp	r3, #0
 8007046:	d103      	bne.n	8007050 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800704a:	f000 fbe1 	bl	8007810 <vPortFree>
 800704e:	e00a      	b.n	8007066 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007052:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007056:	f023 0301 	bic.w	r3, r3, #1
 800705a:	b2da      	uxtb	r2, r3
 800705c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007062:	e000      	b.n	8007066 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007064:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007066:	4b08      	ldr	r3, [pc, #32]	; (8007088 <prvProcessReceivedCommands+0x1c0>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	1d39      	adds	r1, r7, #4
 800706c:	2200      	movs	r2, #0
 800706e:	4618      	mov	r0, r3
 8007070:	f7fe fbec 	bl	800584c <xQueueReceive>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	f47f af2a 	bne.w	8006ed0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800707c:	bf00      	nop
 800707e:	bf00      	nop
 8007080:	3730      	adds	r7, #48	; 0x30
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	20001414 	.word	0x20001414

0800708c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b088      	sub	sp, #32
 8007090:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007092:	e048      	b.n	8007126 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007094:	4b2d      	ldr	r3, [pc, #180]	; (800714c <prvSwitchTimerLists+0xc0>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800709e:	4b2b      	ldr	r3, [pc, #172]	; (800714c <prvSwitchTimerLists+0xc0>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	3304      	adds	r3, #4
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fe f905 	bl	80052bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d02e      	beq.n	8007126 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	4413      	add	r3, r2
 80070d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d90e      	bls.n	80070f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070e6:	4b19      	ldr	r3, [pc, #100]	; (800714c <prvSwitchTimerLists+0xc0>)
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	3304      	adds	r3, #4
 80070ee:	4619      	mov	r1, r3
 80070f0:	4610      	mov	r0, r2
 80070f2:	f7fe f8aa 	bl	800524a <vListInsert>
 80070f6:	e016      	b.n	8007126 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070f8:	2300      	movs	r3, #0
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	2300      	movs	r3, #0
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	2100      	movs	r1, #0
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f7ff fd60 	bl	8006bc8 <xTimerGenericCommand>
 8007108:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10a      	bne.n	8007126 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	603b      	str	r3, [r7, #0]
}
 8007122:	bf00      	nop
 8007124:	e7fe      	b.n	8007124 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007126:	4b09      	ldr	r3, [pc, #36]	; (800714c <prvSwitchTimerLists+0xc0>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1b1      	bne.n	8007094 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007130:	4b06      	ldr	r3, [pc, #24]	; (800714c <prvSwitchTimerLists+0xc0>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007136:	4b06      	ldr	r3, [pc, #24]	; (8007150 <prvSwitchTimerLists+0xc4>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a04      	ldr	r2, [pc, #16]	; (800714c <prvSwitchTimerLists+0xc0>)
 800713c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800713e:	4a04      	ldr	r2, [pc, #16]	; (8007150 <prvSwitchTimerLists+0xc4>)
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	6013      	str	r3, [r2, #0]
}
 8007144:	bf00      	nop
 8007146:	3718      	adds	r7, #24
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	2000140c 	.word	0x2000140c
 8007150:	20001410 	.word	0x20001410

08007154 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800715a:	f000 f96b 	bl	8007434 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800715e:	4b15      	ldr	r3, [pc, #84]	; (80071b4 <prvCheckForValidListAndQueue+0x60>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d120      	bne.n	80071a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007166:	4814      	ldr	r0, [pc, #80]	; (80071b8 <prvCheckForValidListAndQueue+0x64>)
 8007168:	f7fe f81e 	bl	80051a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800716c:	4813      	ldr	r0, [pc, #76]	; (80071bc <prvCheckForValidListAndQueue+0x68>)
 800716e:	f7fe f81b 	bl	80051a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007172:	4b13      	ldr	r3, [pc, #76]	; (80071c0 <prvCheckForValidListAndQueue+0x6c>)
 8007174:	4a10      	ldr	r2, [pc, #64]	; (80071b8 <prvCheckForValidListAndQueue+0x64>)
 8007176:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007178:	4b12      	ldr	r3, [pc, #72]	; (80071c4 <prvCheckForValidListAndQueue+0x70>)
 800717a:	4a10      	ldr	r2, [pc, #64]	; (80071bc <prvCheckForValidListAndQueue+0x68>)
 800717c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800717e:	2300      	movs	r3, #0
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	4b11      	ldr	r3, [pc, #68]	; (80071c8 <prvCheckForValidListAndQueue+0x74>)
 8007184:	4a11      	ldr	r2, [pc, #68]	; (80071cc <prvCheckForValidListAndQueue+0x78>)
 8007186:	2110      	movs	r1, #16
 8007188:	200a      	movs	r0, #10
 800718a:	f7fe f929 	bl	80053e0 <xQueueGenericCreateStatic>
 800718e:	4603      	mov	r3, r0
 8007190:	4a08      	ldr	r2, [pc, #32]	; (80071b4 <prvCheckForValidListAndQueue+0x60>)
 8007192:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007194:	4b07      	ldr	r3, [pc, #28]	; (80071b4 <prvCheckForValidListAndQueue+0x60>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d005      	beq.n	80071a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800719c:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <prvCheckForValidListAndQueue+0x60>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	490b      	ldr	r1, [pc, #44]	; (80071d0 <prvCheckForValidListAndQueue+0x7c>)
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7fe fd42 	bl	8005c2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80071a8:	f000 f974 	bl	8007494 <vPortExitCritical>
}
 80071ac:	bf00      	nop
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	20001414 	.word	0x20001414
 80071b8:	200013e4 	.word	0x200013e4
 80071bc:	200013f8 	.word	0x200013f8
 80071c0:	2000140c 	.word	0x2000140c
 80071c4:	20001410 	.word	0x20001410
 80071c8:	200014c0 	.word	0x200014c0
 80071cc:	20001420 	.word	0x20001420
 80071d0:	0800a854 	.word	0x0800a854

080071d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	3b04      	subs	r3, #4
 80071e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80071ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	3b04      	subs	r3, #4
 80071f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	f023 0201 	bic.w	r2, r3, #1
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	3b04      	subs	r3, #4
 8007202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007204:	4a0c      	ldr	r2, [pc, #48]	; (8007238 <pxPortInitialiseStack+0x64>)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	3b14      	subs	r3, #20
 800720e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	3b04      	subs	r3, #4
 800721a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f06f 0202 	mvn.w	r2, #2
 8007222:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	3b20      	subs	r3, #32
 8007228:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800722a:	68fb      	ldr	r3, [r7, #12]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr
 8007238:	0800723d 	.word	0x0800723d

0800723c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007242:	2300      	movs	r3, #0
 8007244:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007246:	4b12      	ldr	r3, [pc, #72]	; (8007290 <prvTaskExitError+0x54>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800724e:	d00a      	beq.n	8007266 <prvTaskExitError+0x2a>
	__asm volatile
 8007250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007254:	f383 8811 	msr	BASEPRI, r3
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	60fb      	str	r3, [r7, #12]
}
 8007262:	bf00      	nop
 8007264:	e7fe      	b.n	8007264 <prvTaskExitError+0x28>
	__asm volatile
 8007266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	60bb      	str	r3, [r7, #8]
}
 8007278:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800727a:	bf00      	nop
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d0fc      	beq.n	800727c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007282:	bf00      	nop
 8007284:	bf00      	nop
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr
 8007290:	2000001c 	.word	0x2000001c
	...

080072a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80072a0:	4b07      	ldr	r3, [pc, #28]	; (80072c0 <pxCurrentTCBConst2>)
 80072a2:	6819      	ldr	r1, [r3, #0]
 80072a4:	6808      	ldr	r0, [r1, #0]
 80072a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072aa:	f380 8809 	msr	PSP, r0
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f04f 0000 	mov.w	r0, #0
 80072b6:	f380 8811 	msr	BASEPRI, r0
 80072ba:	4770      	bx	lr
 80072bc:	f3af 8000 	nop.w

080072c0 <pxCurrentTCBConst2>:
 80072c0:	20000ee4 	.word	0x20000ee4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80072c4:	bf00      	nop
 80072c6:	bf00      	nop

080072c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80072c8:	4808      	ldr	r0, [pc, #32]	; (80072ec <prvPortStartFirstTask+0x24>)
 80072ca:	6800      	ldr	r0, [r0, #0]
 80072cc:	6800      	ldr	r0, [r0, #0]
 80072ce:	f380 8808 	msr	MSP, r0
 80072d2:	f04f 0000 	mov.w	r0, #0
 80072d6:	f380 8814 	msr	CONTROL, r0
 80072da:	b662      	cpsie	i
 80072dc:	b661      	cpsie	f
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	f3bf 8f6f 	isb	sy
 80072e6:	df00      	svc	0
 80072e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80072ea:	bf00      	nop
 80072ec:	e000ed08 	.word	0xe000ed08

080072f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80072f6:	4b46      	ldr	r3, [pc, #280]	; (8007410 <xPortStartScheduler+0x120>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a46      	ldr	r2, [pc, #280]	; (8007414 <xPortStartScheduler+0x124>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d10a      	bne.n	8007316 <xPortStartScheduler+0x26>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	613b      	str	r3, [r7, #16]
}
 8007312:	bf00      	nop
 8007314:	e7fe      	b.n	8007314 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007316:	4b3e      	ldr	r3, [pc, #248]	; (8007410 <xPortStartScheduler+0x120>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a3f      	ldr	r2, [pc, #252]	; (8007418 <xPortStartScheduler+0x128>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d10a      	bne.n	8007336 <xPortStartScheduler+0x46>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	60fb      	str	r3, [r7, #12]
}
 8007332:	bf00      	nop
 8007334:	e7fe      	b.n	8007334 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007336:	4b39      	ldr	r3, [pc, #228]	; (800741c <xPortStartScheduler+0x12c>)
 8007338:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	b2db      	uxtb	r3, r3
 8007340:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	22ff      	movs	r2, #255	; 0xff
 8007346:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	b2db      	uxtb	r3, r3
 800734e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007350:	78fb      	ldrb	r3, [r7, #3]
 8007352:	b2db      	uxtb	r3, r3
 8007354:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007358:	b2da      	uxtb	r2, r3
 800735a:	4b31      	ldr	r3, [pc, #196]	; (8007420 <xPortStartScheduler+0x130>)
 800735c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800735e:	4b31      	ldr	r3, [pc, #196]	; (8007424 <xPortStartScheduler+0x134>)
 8007360:	2207      	movs	r2, #7
 8007362:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007364:	e009      	b.n	800737a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007366:	4b2f      	ldr	r3, [pc, #188]	; (8007424 <xPortStartScheduler+0x134>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	3b01      	subs	r3, #1
 800736c:	4a2d      	ldr	r2, [pc, #180]	; (8007424 <xPortStartScheduler+0x134>)
 800736e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007370:	78fb      	ldrb	r3, [r7, #3]
 8007372:	b2db      	uxtb	r3, r3
 8007374:	005b      	lsls	r3, r3, #1
 8007376:	b2db      	uxtb	r3, r3
 8007378:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800737a:	78fb      	ldrb	r3, [r7, #3]
 800737c:	b2db      	uxtb	r3, r3
 800737e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007382:	2b80      	cmp	r3, #128	; 0x80
 8007384:	d0ef      	beq.n	8007366 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007386:	4b27      	ldr	r3, [pc, #156]	; (8007424 <xPortStartScheduler+0x134>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f1c3 0307 	rsb	r3, r3, #7
 800738e:	2b04      	cmp	r3, #4
 8007390:	d00a      	beq.n	80073a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007396:	f383 8811 	msr	BASEPRI, r3
 800739a:	f3bf 8f6f 	isb	sy
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	60bb      	str	r3, [r7, #8]
}
 80073a4:	bf00      	nop
 80073a6:	e7fe      	b.n	80073a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80073a8:	4b1e      	ldr	r3, [pc, #120]	; (8007424 <xPortStartScheduler+0x134>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	021b      	lsls	r3, r3, #8
 80073ae:	4a1d      	ldr	r2, [pc, #116]	; (8007424 <xPortStartScheduler+0x134>)
 80073b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80073b2:	4b1c      	ldr	r3, [pc, #112]	; (8007424 <xPortStartScheduler+0x134>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80073ba:	4a1a      	ldr	r2, [pc, #104]	; (8007424 <xPortStartScheduler+0x134>)
 80073bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	b2da      	uxtb	r2, r3
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80073c6:	4b18      	ldr	r3, [pc, #96]	; (8007428 <xPortStartScheduler+0x138>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a17      	ldr	r2, [pc, #92]	; (8007428 <xPortStartScheduler+0x138>)
 80073cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80073d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80073d2:	4b15      	ldr	r3, [pc, #84]	; (8007428 <xPortStartScheduler+0x138>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a14      	ldr	r2, [pc, #80]	; (8007428 <xPortStartScheduler+0x138>)
 80073d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80073dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80073de:	f000 f8dd 	bl	800759c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80073e2:	4b12      	ldr	r3, [pc, #72]	; (800742c <xPortStartScheduler+0x13c>)
 80073e4:	2200      	movs	r2, #0
 80073e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80073e8:	f000 f8fc 	bl	80075e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80073ec:	4b10      	ldr	r3, [pc, #64]	; (8007430 <xPortStartScheduler+0x140>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a0f      	ldr	r2, [pc, #60]	; (8007430 <xPortStartScheduler+0x140>)
 80073f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80073f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80073f8:	f7ff ff66 	bl	80072c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80073fc:	f7ff f846 	bl	800648c <vTaskSwitchContext>
	prvTaskExitError();
 8007400:	f7ff ff1c 	bl	800723c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3718      	adds	r7, #24
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	e000ed00 	.word	0xe000ed00
 8007414:	410fc271 	.word	0x410fc271
 8007418:	410fc270 	.word	0x410fc270
 800741c:	e000e400 	.word	0xe000e400
 8007420:	20001510 	.word	0x20001510
 8007424:	20001514 	.word	0x20001514
 8007428:	e000ed20 	.word	0xe000ed20
 800742c:	2000001c 	.word	0x2000001c
 8007430:	e000ef34 	.word	0xe000ef34

08007434 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
	__asm volatile
 800743a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743e:	f383 8811 	msr	BASEPRI, r3
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	f3bf 8f4f 	dsb	sy
 800744a:	607b      	str	r3, [r7, #4]
}
 800744c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800744e:	4b0f      	ldr	r3, [pc, #60]	; (800748c <vPortEnterCritical+0x58>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	3301      	adds	r3, #1
 8007454:	4a0d      	ldr	r2, [pc, #52]	; (800748c <vPortEnterCritical+0x58>)
 8007456:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007458:	4b0c      	ldr	r3, [pc, #48]	; (800748c <vPortEnterCritical+0x58>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2b01      	cmp	r3, #1
 800745e:	d10f      	bne.n	8007480 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007460:	4b0b      	ldr	r3, [pc, #44]	; (8007490 <vPortEnterCritical+0x5c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00a      	beq.n	8007480 <vPortEnterCritical+0x4c>
	__asm volatile
 800746a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746e:	f383 8811 	msr	BASEPRI, r3
 8007472:	f3bf 8f6f 	isb	sy
 8007476:	f3bf 8f4f 	dsb	sy
 800747a:	603b      	str	r3, [r7, #0]
}
 800747c:	bf00      	nop
 800747e:	e7fe      	b.n	800747e <vPortEnterCritical+0x4a>
	}
}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	2000001c 	.word	0x2000001c
 8007490:	e000ed04 	.word	0xe000ed04

08007494 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800749a:	4b12      	ldr	r3, [pc, #72]	; (80074e4 <vPortExitCritical+0x50>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10a      	bne.n	80074b8 <vPortExitCritical+0x24>
	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	607b      	str	r3, [r7, #4]
}
 80074b4:	bf00      	nop
 80074b6:	e7fe      	b.n	80074b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80074b8:	4b0a      	ldr	r3, [pc, #40]	; (80074e4 <vPortExitCritical+0x50>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3b01      	subs	r3, #1
 80074be:	4a09      	ldr	r2, [pc, #36]	; (80074e4 <vPortExitCritical+0x50>)
 80074c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80074c2:	4b08      	ldr	r3, [pc, #32]	; (80074e4 <vPortExitCritical+0x50>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d105      	bne.n	80074d6 <vPortExitCritical+0x42>
 80074ca:	2300      	movs	r3, #0
 80074cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	f383 8811 	msr	BASEPRI, r3
}
 80074d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80074d6:	bf00      	nop
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	2000001c 	.word	0x2000001c
	...

080074f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80074f0:	f3ef 8009 	mrs	r0, PSP
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	4b15      	ldr	r3, [pc, #84]	; (8007550 <pxCurrentTCBConst>)
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	f01e 0f10 	tst.w	lr, #16
 8007500:	bf08      	it	eq
 8007502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750a:	6010      	str	r0, [r2, #0]
 800750c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007510:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007514:	f380 8811 	msr	BASEPRI, r0
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f7fe ffb4 	bl	800648c <vTaskSwitchContext>
 8007524:	f04f 0000 	mov.w	r0, #0
 8007528:	f380 8811 	msr	BASEPRI, r0
 800752c:	bc09      	pop	{r0, r3}
 800752e:	6819      	ldr	r1, [r3, #0]
 8007530:	6808      	ldr	r0, [r1, #0]
 8007532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007536:	f01e 0f10 	tst.w	lr, #16
 800753a:	bf08      	it	eq
 800753c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007540:	f380 8809 	msr	PSP, r0
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	f3af 8000 	nop.w

08007550 <pxCurrentTCBConst>:
 8007550:	20000ee4 	.word	0x20000ee4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007554:	bf00      	nop
 8007556:	bf00      	nop

08007558 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
	__asm volatile
 800755e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	607b      	str	r3, [r7, #4]
}
 8007570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007572:	f7fe fed1 	bl	8006318 <xTaskIncrementTick>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800757c:	4b06      	ldr	r3, [pc, #24]	; (8007598 <xPortSysTickHandler+0x40>)
 800757e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	2300      	movs	r3, #0
 8007586:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	f383 8811 	msr	BASEPRI, r3
}
 800758e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007590:	bf00      	nop
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	e000ed04 	.word	0xe000ed04

0800759c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800759c:	b480      	push	{r7}
 800759e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075a0:	4b0b      	ldr	r3, [pc, #44]	; (80075d0 <vPortSetupTimerInterrupt+0x34>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075a6:	4b0b      	ldr	r3, [pc, #44]	; (80075d4 <vPortSetupTimerInterrupt+0x38>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075ac:	4b0a      	ldr	r3, [pc, #40]	; (80075d8 <vPortSetupTimerInterrupt+0x3c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a0a      	ldr	r2, [pc, #40]	; (80075dc <vPortSetupTimerInterrupt+0x40>)
 80075b2:	fba2 2303 	umull	r2, r3, r2, r3
 80075b6:	099b      	lsrs	r3, r3, #6
 80075b8:	4a09      	ldr	r2, [pc, #36]	; (80075e0 <vPortSetupTimerInterrupt+0x44>)
 80075ba:	3b01      	subs	r3, #1
 80075bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80075be:	4b04      	ldr	r3, [pc, #16]	; (80075d0 <vPortSetupTimerInterrupt+0x34>)
 80075c0:	2207      	movs	r2, #7
 80075c2:	601a      	str	r2, [r3, #0]
}
 80075c4:	bf00      	nop
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	e000e010 	.word	0xe000e010
 80075d4:	e000e018 	.word	0xe000e018
 80075d8:	20000010 	.word	0x20000010
 80075dc:	10624dd3 	.word	0x10624dd3
 80075e0:	e000e014 	.word	0xe000e014

080075e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80075e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80075f4 <vPortEnableVFP+0x10>
 80075e8:	6801      	ldr	r1, [r0, #0]
 80075ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80075ee:	6001      	str	r1, [r0, #0]
 80075f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80075f2:	bf00      	nop
 80075f4:	e000ed88 	.word	0xe000ed88

080075f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80075fe:	f3ef 8305 	mrs	r3, IPSR
 8007602:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2b0f      	cmp	r3, #15
 8007608:	d914      	bls.n	8007634 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800760a:	4a17      	ldr	r2, [pc, #92]	; (8007668 <vPortValidateInterruptPriority+0x70>)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	4413      	add	r3, r2
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007614:	4b15      	ldr	r3, [pc, #84]	; (800766c <vPortValidateInterruptPriority+0x74>)
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	7afa      	ldrb	r2, [r7, #11]
 800761a:	429a      	cmp	r2, r3
 800761c:	d20a      	bcs.n	8007634 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	607b      	str	r3, [r7, #4]
}
 8007630:	bf00      	nop
 8007632:	e7fe      	b.n	8007632 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007634:	4b0e      	ldr	r3, [pc, #56]	; (8007670 <vPortValidateInterruptPriority+0x78>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800763c:	4b0d      	ldr	r3, [pc, #52]	; (8007674 <vPortValidateInterruptPriority+0x7c>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	429a      	cmp	r2, r3
 8007642:	d90a      	bls.n	800765a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	603b      	str	r3, [r7, #0]
}
 8007656:	bf00      	nop
 8007658:	e7fe      	b.n	8007658 <vPortValidateInterruptPriority+0x60>
	}
 800765a:	bf00      	nop
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	e000e3f0 	.word	0xe000e3f0
 800766c:	20001510 	.word	0x20001510
 8007670:	e000ed0c 	.word	0xe000ed0c
 8007674:	20001514 	.word	0x20001514

08007678 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b08a      	sub	sp, #40	; 0x28
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007680:	2300      	movs	r3, #0
 8007682:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007684:	f7fe fd8c 	bl	80061a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007688:	4b5b      	ldr	r3, [pc, #364]	; (80077f8 <pvPortMalloc+0x180>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d101      	bne.n	8007694 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007690:	f000 f920 	bl	80078d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007694:	4b59      	ldr	r3, [pc, #356]	; (80077fc <pvPortMalloc+0x184>)
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4013      	ands	r3, r2
 800769c:	2b00      	cmp	r3, #0
 800769e:	f040 8093 	bne.w	80077c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d01d      	beq.n	80076e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80076a8:	2208      	movs	r2, #8
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4413      	add	r3, r2
 80076ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f003 0307 	and.w	r3, r3, #7
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d014      	beq.n	80076e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f023 0307 	bic.w	r3, r3, #7
 80076c0:	3308      	adds	r3, #8
 80076c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f003 0307 	and.w	r3, r3, #7
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00a      	beq.n	80076e4 <pvPortMalloc+0x6c>
	__asm volatile
 80076ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d2:	f383 8811 	msr	BASEPRI, r3
 80076d6:	f3bf 8f6f 	isb	sy
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	617b      	str	r3, [r7, #20]
}
 80076e0:	bf00      	nop
 80076e2:	e7fe      	b.n	80076e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d06e      	beq.n	80077c8 <pvPortMalloc+0x150>
 80076ea:	4b45      	ldr	r3, [pc, #276]	; (8007800 <pvPortMalloc+0x188>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d869      	bhi.n	80077c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80076f4:	4b43      	ldr	r3, [pc, #268]	; (8007804 <pvPortMalloc+0x18c>)
 80076f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80076f8:	4b42      	ldr	r3, [pc, #264]	; (8007804 <pvPortMalloc+0x18c>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076fe:	e004      	b.n	800770a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007702:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	429a      	cmp	r2, r3
 8007712:	d903      	bls.n	800771c <pvPortMalloc+0xa4>
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1f1      	bne.n	8007700 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800771c:	4b36      	ldr	r3, [pc, #216]	; (80077f8 <pvPortMalloc+0x180>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007722:	429a      	cmp	r2, r3
 8007724:	d050      	beq.n	80077c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007726:	6a3b      	ldr	r3, [r7, #32]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2208      	movs	r2, #8
 800772c:	4413      	add	r3, r2
 800772e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	6a3b      	ldr	r3, [r7, #32]
 8007736:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	1ad2      	subs	r2, r2, r3
 8007740:	2308      	movs	r3, #8
 8007742:	005b      	lsls	r3, r3, #1
 8007744:	429a      	cmp	r2, r3
 8007746:	d91f      	bls.n	8007788 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4413      	add	r3, r2
 800774e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	f003 0307 	and.w	r3, r3, #7
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00a      	beq.n	8007770 <pvPortMalloc+0xf8>
	__asm volatile
 800775a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775e:	f383 8811 	msr	BASEPRI, r3
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	613b      	str	r3, [r7, #16]
}
 800776c:	bf00      	nop
 800776e:	e7fe      	b.n	800776e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007772:	685a      	ldr	r2, [r3, #4]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	1ad2      	subs	r2, r2, r3
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800777c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007782:	69b8      	ldr	r0, [r7, #24]
 8007784:	f000 f908 	bl	8007998 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007788:	4b1d      	ldr	r3, [pc, #116]	; (8007800 <pvPortMalloc+0x188>)
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	4a1b      	ldr	r2, [pc, #108]	; (8007800 <pvPortMalloc+0x188>)
 8007794:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007796:	4b1a      	ldr	r3, [pc, #104]	; (8007800 <pvPortMalloc+0x188>)
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	4b1b      	ldr	r3, [pc, #108]	; (8007808 <pvPortMalloc+0x190>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d203      	bcs.n	80077aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80077a2:	4b17      	ldr	r3, [pc, #92]	; (8007800 <pvPortMalloc+0x188>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a18      	ldr	r2, [pc, #96]	; (8007808 <pvPortMalloc+0x190>)
 80077a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80077aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ac:	685a      	ldr	r2, [r3, #4]
 80077ae:	4b13      	ldr	r3, [pc, #76]	; (80077fc <pvPortMalloc+0x184>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	431a      	orrs	r2, r3
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	2200      	movs	r2, #0
 80077bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80077be:	4b13      	ldr	r3, [pc, #76]	; (800780c <pvPortMalloc+0x194>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	3301      	adds	r3, #1
 80077c4:	4a11      	ldr	r2, [pc, #68]	; (800780c <pvPortMalloc+0x194>)
 80077c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80077c8:	f7fe fcf8 	bl	80061bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	f003 0307 	and.w	r3, r3, #7
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00a      	beq.n	80077ec <pvPortMalloc+0x174>
	__asm volatile
 80077d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077da:	f383 8811 	msr	BASEPRI, r3
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	60fb      	str	r3, [r7, #12]
}
 80077e8:	bf00      	nop
 80077ea:	e7fe      	b.n	80077ea <pvPortMalloc+0x172>
	return pvReturn;
 80077ec:	69fb      	ldr	r3, [r7, #28]
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3728      	adds	r7, #40	; 0x28
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	20005120 	.word	0x20005120
 80077fc:	20005134 	.word	0x20005134
 8007800:	20005124 	.word	0x20005124
 8007804:	20005118 	.word	0x20005118
 8007808:	20005128 	.word	0x20005128
 800780c:	2000512c 	.word	0x2000512c

08007810 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b086      	sub	sp, #24
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d04d      	beq.n	80078be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007822:	2308      	movs	r3, #8
 8007824:	425b      	negs	r3, r3
 8007826:	697a      	ldr	r2, [r7, #20]
 8007828:	4413      	add	r3, r2
 800782a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	4b24      	ldr	r3, [pc, #144]	; (80078c8 <vPortFree+0xb8>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4013      	ands	r3, r2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10a      	bne.n	8007854 <vPortFree+0x44>
	__asm volatile
 800783e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	60fb      	str	r3, [r7, #12]
}
 8007850:	bf00      	nop
 8007852:	e7fe      	b.n	8007852 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00a      	beq.n	8007872 <vPortFree+0x62>
	__asm volatile
 800785c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007860:	f383 8811 	msr	BASEPRI, r3
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	60bb      	str	r3, [r7, #8]
}
 800786e:	bf00      	nop
 8007870:	e7fe      	b.n	8007870 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	685a      	ldr	r2, [r3, #4]
 8007876:	4b14      	ldr	r3, [pc, #80]	; (80078c8 <vPortFree+0xb8>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4013      	ands	r3, r2
 800787c:	2b00      	cmp	r3, #0
 800787e:	d01e      	beq.n	80078be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d11a      	bne.n	80078be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	4b0e      	ldr	r3, [pc, #56]	; (80078c8 <vPortFree+0xb8>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	43db      	mvns	r3, r3
 8007892:	401a      	ands	r2, r3
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007898:	f7fe fc82 	bl	80061a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	685a      	ldr	r2, [r3, #4]
 80078a0:	4b0a      	ldr	r3, [pc, #40]	; (80078cc <vPortFree+0xbc>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4413      	add	r3, r2
 80078a6:	4a09      	ldr	r2, [pc, #36]	; (80078cc <vPortFree+0xbc>)
 80078a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80078aa:	6938      	ldr	r0, [r7, #16]
 80078ac:	f000 f874 	bl	8007998 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80078b0:	4b07      	ldr	r3, [pc, #28]	; (80078d0 <vPortFree+0xc0>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3301      	adds	r3, #1
 80078b6:	4a06      	ldr	r2, [pc, #24]	; (80078d0 <vPortFree+0xc0>)
 80078b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80078ba:	f7fe fc7f 	bl	80061bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80078be:	bf00      	nop
 80078c0:	3718      	adds	r7, #24
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	20005134 	.word	0x20005134
 80078cc:	20005124 	.word	0x20005124
 80078d0:	20005130 	.word	0x20005130

080078d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80078da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80078de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80078e0:	4b27      	ldr	r3, [pc, #156]	; (8007980 <prvHeapInit+0xac>)
 80078e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f003 0307 	and.w	r3, r3, #7
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00c      	beq.n	8007908 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	3307      	adds	r3, #7
 80078f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f023 0307 	bic.w	r3, r3, #7
 80078fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	4a1f      	ldr	r2, [pc, #124]	; (8007980 <prvHeapInit+0xac>)
 8007904:	4413      	add	r3, r2
 8007906:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800790c:	4a1d      	ldr	r2, [pc, #116]	; (8007984 <prvHeapInit+0xb0>)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007912:	4b1c      	ldr	r3, [pc, #112]	; (8007984 <prvHeapInit+0xb0>)
 8007914:	2200      	movs	r2, #0
 8007916:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	4413      	add	r3, r2
 800791e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007920:	2208      	movs	r2, #8
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	1a9b      	subs	r3, r3, r2
 8007926:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f023 0307 	bic.w	r3, r3, #7
 800792e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	4a15      	ldr	r2, [pc, #84]	; (8007988 <prvHeapInit+0xb4>)
 8007934:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007936:	4b14      	ldr	r3, [pc, #80]	; (8007988 <prvHeapInit+0xb4>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2200      	movs	r2, #0
 800793c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800793e:	4b12      	ldr	r3, [pc, #72]	; (8007988 <prvHeapInit+0xb4>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2200      	movs	r2, #0
 8007944:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	1ad2      	subs	r2, r2, r3
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007954:	4b0c      	ldr	r3, [pc, #48]	; (8007988 <prvHeapInit+0xb4>)
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	4a0a      	ldr	r2, [pc, #40]	; (800798c <prvHeapInit+0xb8>)
 8007962:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	4a09      	ldr	r2, [pc, #36]	; (8007990 <prvHeapInit+0xbc>)
 800796a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800796c:	4b09      	ldr	r3, [pc, #36]	; (8007994 <prvHeapInit+0xc0>)
 800796e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007972:	601a      	str	r2, [r3, #0]
}
 8007974:	bf00      	nop
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr
 8007980:	20001518 	.word	0x20001518
 8007984:	20005118 	.word	0x20005118
 8007988:	20005120 	.word	0x20005120
 800798c:	20005128 	.word	0x20005128
 8007990:	20005124 	.word	0x20005124
 8007994:	20005134 	.word	0x20005134

08007998 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80079a0:	4b28      	ldr	r3, [pc, #160]	; (8007a44 <prvInsertBlockIntoFreeList+0xac>)
 80079a2:	60fb      	str	r3, [r7, #12]
 80079a4:	e002      	b.n	80079ac <prvInsertBlockIntoFreeList+0x14>
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d8f7      	bhi.n	80079a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	4413      	add	r3, r2
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d108      	bne.n	80079da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	685a      	ldr	r2, [r3, #4]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	441a      	add	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	441a      	add	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d118      	bne.n	8007a20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	4b15      	ldr	r3, [pc, #84]	; (8007a48 <prvInsertBlockIntoFreeList+0xb0>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d00d      	beq.n	8007a16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685a      	ldr	r2, [r3, #4]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	441a      	add	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	601a      	str	r2, [r3, #0]
 8007a14:	e008      	b.n	8007a28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a16:	4b0c      	ldr	r3, [pc, #48]	; (8007a48 <prvInsertBlockIntoFreeList+0xb0>)
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	601a      	str	r2, [r3, #0]
 8007a1e:	e003      	b.n	8007a28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d002      	beq.n	8007a36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a36:	bf00      	nop
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	20005118 	.word	0x20005118
 8007a48:	20005120 	.word	0x20005120

08007a4c <__cvt>:
 8007a4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a50:	ec55 4b10 	vmov	r4, r5, d0
 8007a54:	2d00      	cmp	r5, #0
 8007a56:	460e      	mov	r6, r1
 8007a58:	4619      	mov	r1, r3
 8007a5a:	462b      	mov	r3, r5
 8007a5c:	bfbb      	ittet	lt
 8007a5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007a62:	461d      	movlt	r5, r3
 8007a64:	2300      	movge	r3, #0
 8007a66:	232d      	movlt	r3, #45	; 0x2d
 8007a68:	700b      	strb	r3, [r1, #0]
 8007a6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007a70:	4691      	mov	r9, r2
 8007a72:	f023 0820 	bic.w	r8, r3, #32
 8007a76:	bfbc      	itt	lt
 8007a78:	4622      	movlt	r2, r4
 8007a7a:	4614      	movlt	r4, r2
 8007a7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a80:	d005      	beq.n	8007a8e <__cvt+0x42>
 8007a82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007a86:	d100      	bne.n	8007a8a <__cvt+0x3e>
 8007a88:	3601      	adds	r6, #1
 8007a8a:	2102      	movs	r1, #2
 8007a8c:	e000      	b.n	8007a90 <__cvt+0x44>
 8007a8e:	2103      	movs	r1, #3
 8007a90:	ab03      	add	r3, sp, #12
 8007a92:	9301      	str	r3, [sp, #4]
 8007a94:	ab02      	add	r3, sp, #8
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	ec45 4b10 	vmov	d0, r4, r5
 8007a9c:	4653      	mov	r3, sl
 8007a9e:	4632      	mov	r2, r6
 8007aa0:	f000 fe42 	bl	8008728 <_dtoa_r>
 8007aa4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007aa8:	4607      	mov	r7, r0
 8007aaa:	d102      	bne.n	8007ab2 <__cvt+0x66>
 8007aac:	f019 0f01 	tst.w	r9, #1
 8007ab0:	d022      	beq.n	8007af8 <__cvt+0xac>
 8007ab2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ab6:	eb07 0906 	add.w	r9, r7, r6
 8007aba:	d110      	bne.n	8007ade <__cvt+0x92>
 8007abc:	783b      	ldrb	r3, [r7, #0]
 8007abe:	2b30      	cmp	r3, #48	; 0x30
 8007ac0:	d10a      	bne.n	8007ad8 <__cvt+0x8c>
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	4629      	mov	r1, r5
 8007aca:	f7f9 f81d 	bl	8000b08 <__aeabi_dcmpeq>
 8007ace:	b918      	cbnz	r0, 8007ad8 <__cvt+0x8c>
 8007ad0:	f1c6 0601 	rsb	r6, r6, #1
 8007ad4:	f8ca 6000 	str.w	r6, [sl]
 8007ad8:	f8da 3000 	ldr.w	r3, [sl]
 8007adc:	4499      	add	r9, r3
 8007ade:	2200      	movs	r2, #0
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	4629      	mov	r1, r5
 8007ae6:	f7f9 f80f 	bl	8000b08 <__aeabi_dcmpeq>
 8007aea:	b108      	cbz	r0, 8007af0 <__cvt+0xa4>
 8007aec:	f8cd 900c 	str.w	r9, [sp, #12]
 8007af0:	2230      	movs	r2, #48	; 0x30
 8007af2:	9b03      	ldr	r3, [sp, #12]
 8007af4:	454b      	cmp	r3, r9
 8007af6:	d307      	bcc.n	8007b08 <__cvt+0xbc>
 8007af8:	9b03      	ldr	r3, [sp, #12]
 8007afa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007afc:	1bdb      	subs	r3, r3, r7
 8007afe:	4638      	mov	r0, r7
 8007b00:	6013      	str	r3, [r2, #0]
 8007b02:	b004      	add	sp, #16
 8007b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b08:	1c59      	adds	r1, r3, #1
 8007b0a:	9103      	str	r1, [sp, #12]
 8007b0c:	701a      	strb	r2, [r3, #0]
 8007b0e:	e7f0      	b.n	8007af2 <__cvt+0xa6>

08007b10 <__exponent>:
 8007b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b12:	4603      	mov	r3, r0
 8007b14:	2900      	cmp	r1, #0
 8007b16:	bfb8      	it	lt
 8007b18:	4249      	neglt	r1, r1
 8007b1a:	f803 2b02 	strb.w	r2, [r3], #2
 8007b1e:	bfb4      	ite	lt
 8007b20:	222d      	movlt	r2, #45	; 0x2d
 8007b22:	222b      	movge	r2, #43	; 0x2b
 8007b24:	2909      	cmp	r1, #9
 8007b26:	7042      	strb	r2, [r0, #1]
 8007b28:	dd2a      	ble.n	8007b80 <__exponent+0x70>
 8007b2a:	f10d 0207 	add.w	r2, sp, #7
 8007b2e:	4617      	mov	r7, r2
 8007b30:	260a      	movs	r6, #10
 8007b32:	4694      	mov	ip, r2
 8007b34:	fb91 f5f6 	sdiv	r5, r1, r6
 8007b38:	fb06 1415 	mls	r4, r6, r5, r1
 8007b3c:	3430      	adds	r4, #48	; 0x30
 8007b3e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007b42:	460c      	mov	r4, r1
 8007b44:	2c63      	cmp	r4, #99	; 0x63
 8007b46:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8007b4a:	4629      	mov	r1, r5
 8007b4c:	dcf1      	bgt.n	8007b32 <__exponent+0x22>
 8007b4e:	3130      	adds	r1, #48	; 0x30
 8007b50:	f1ac 0402 	sub.w	r4, ip, #2
 8007b54:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007b58:	1c41      	adds	r1, r0, #1
 8007b5a:	4622      	mov	r2, r4
 8007b5c:	42ba      	cmp	r2, r7
 8007b5e:	d30a      	bcc.n	8007b76 <__exponent+0x66>
 8007b60:	f10d 0209 	add.w	r2, sp, #9
 8007b64:	eba2 020c 	sub.w	r2, r2, ip
 8007b68:	42bc      	cmp	r4, r7
 8007b6a:	bf88      	it	hi
 8007b6c:	2200      	movhi	r2, #0
 8007b6e:	4413      	add	r3, r2
 8007b70:	1a18      	subs	r0, r3, r0
 8007b72:	b003      	add	sp, #12
 8007b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b76:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007b7a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007b7e:	e7ed      	b.n	8007b5c <__exponent+0x4c>
 8007b80:	2330      	movs	r3, #48	; 0x30
 8007b82:	3130      	adds	r1, #48	; 0x30
 8007b84:	7083      	strb	r3, [r0, #2]
 8007b86:	70c1      	strb	r1, [r0, #3]
 8007b88:	1d03      	adds	r3, r0, #4
 8007b8a:	e7f1      	b.n	8007b70 <__exponent+0x60>

08007b8c <_printf_float>:
 8007b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b90:	ed2d 8b02 	vpush	{d8}
 8007b94:	b08d      	sub	sp, #52	; 0x34
 8007b96:	460c      	mov	r4, r1
 8007b98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007b9c:	4616      	mov	r6, r2
 8007b9e:	461f      	mov	r7, r3
 8007ba0:	4605      	mov	r5, r0
 8007ba2:	f000 fca3 	bl	80084ec <_localeconv_r>
 8007ba6:	f8d0 a000 	ldr.w	sl, [r0]
 8007baa:	4650      	mov	r0, sl
 8007bac:	f7f8 fb80 	bl	80002b0 <strlen>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	930a      	str	r3, [sp, #40]	; 0x28
 8007bb4:	6823      	ldr	r3, [r4, #0]
 8007bb6:	9305      	str	r3, [sp, #20]
 8007bb8:	f8d8 3000 	ldr.w	r3, [r8]
 8007bbc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007bc0:	3307      	adds	r3, #7
 8007bc2:	f023 0307 	bic.w	r3, r3, #7
 8007bc6:	f103 0208 	add.w	r2, r3, #8
 8007bca:	f8c8 2000 	str.w	r2, [r8]
 8007bce:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bd2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007bd6:	9307      	str	r3, [sp, #28]
 8007bd8:	f8cd 8018 	str.w	r8, [sp, #24]
 8007bdc:	ee08 0a10 	vmov	s16, r0
 8007be0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007be4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007be8:	4b9e      	ldr	r3, [pc, #632]	; (8007e64 <_printf_float+0x2d8>)
 8007bea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bee:	f7f8 ffbd 	bl	8000b6c <__aeabi_dcmpun>
 8007bf2:	bb88      	cbnz	r0, 8007c58 <_printf_float+0xcc>
 8007bf4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bf8:	4b9a      	ldr	r3, [pc, #616]	; (8007e64 <_printf_float+0x2d8>)
 8007bfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bfe:	f7f8 ff97 	bl	8000b30 <__aeabi_dcmple>
 8007c02:	bb48      	cbnz	r0, 8007c58 <_printf_float+0xcc>
 8007c04:	2200      	movs	r2, #0
 8007c06:	2300      	movs	r3, #0
 8007c08:	4640      	mov	r0, r8
 8007c0a:	4649      	mov	r1, r9
 8007c0c:	f7f8 ff86 	bl	8000b1c <__aeabi_dcmplt>
 8007c10:	b110      	cbz	r0, 8007c18 <_printf_float+0x8c>
 8007c12:	232d      	movs	r3, #45	; 0x2d
 8007c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c18:	4a93      	ldr	r2, [pc, #588]	; (8007e68 <_printf_float+0x2dc>)
 8007c1a:	4b94      	ldr	r3, [pc, #592]	; (8007e6c <_printf_float+0x2e0>)
 8007c1c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007c20:	bf94      	ite	ls
 8007c22:	4690      	movls	r8, r2
 8007c24:	4698      	movhi	r8, r3
 8007c26:	2303      	movs	r3, #3
 8007c28:	6123      	str	r3, [r4, #16]
 8007c2a:	9b05      	ldr	r3, [sp, #20]
 8007c2c:	f023 0304 	bic.w	r3, r3, #4
 8007c30:	6023      	str	r3, [r4, #0]
 8007c32:	f04f 0900 	mov.w	r9, #0
 8007c36:	9700      	str	r7, [sp, #0]
 8007c38:	4633      	mov	r3, r6
 8007c3a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	4628      	mov	r0, r5
 8007c40:	f000 f9da 	bl	8007ff8 <_printf_common>
 8007c44:	3001      	adds	r0, #1
 8007c46:	f040 8090 	bne.w	8007d6a <_printf_float+0x1de>
 8007c4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c4e:	b00d      	add	sp, #52	; 0x34
 8007c50:	ecbd 8b02 	vpop	{d8}
 8007c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c58:	4642      	mov	r2, r8
 8007c5a:	464b      	mov	r3, r9
 8007c5c:	4640      	mov	r0, r8
 8007c5e:	4649      	mov	r1, r9
 8007c60:	f7f8 ff84 	bl	8000b6c <__aeabi_dcmpun>
 8007c64:	b140      	cbz	r0, 8007c78 <_printf_float+0xec>
 8007c66:	464b      	mov	r3, r9
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	bfbc      	itt	lt
 8007c6c:	232d      	movlt	r3, #45	; 0x2d
 8007c6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007c72:	4a7f      	ldr	r2, [pc, #508]	; (8007e70 <_printf_float+0x2e4>)
 8007c74:	4b7f      	ldr	r3, [pc, #508]	; (8007e74 <_printf_float+0x2e8>)
 8007c76:	e7d1      	b.n	8007c1c <_printf_float+0x90>
 8007c78:	6863      	ldr	r3, [r4, #4]
 8007c7a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007c7e:	9206      	str	r2, [sp, #24]
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	d13f      	bne.n	8007d04 <_printf_float+0x178>
 8007c84:	2306      	movs	r3, #6
 8007c86:	6063      	str	r3, [r4, #4]
 8007c88:	9b05      	ldr	r3, [sp, #20]
 8007c8a:	6861      	ldr	r1, [r4, #4]
 8007c8c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007c90:	2300      	movs	r3, #0
 8007c92:	9303      	str	r3, [sp, #12]
 8007c94:	ab0a      	add	r3, sp, #40	; 0x28
 8007c96:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007c9a:	ab09      	add	r3, sp, #36	; 0x24
 8007c9c:	ec49 8b10 	vmov	d0, r8, r9
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	6022      	str	r2, [r4, #0]
 8007ca4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007ca8:	4628      	mov	r0, r5
 8007caa:	f7ff fecf 	bl	8007a4c <__cvt>
 8007cae:	9b06      	ldr	r3, [sp, #24]
 8007cb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cb2:	2b47      	cmp	r3, #71	; 0x47
 8007cb4:	4680      	mov	r8, r0
 8007cb6:	d108      	bne.n	8007cca <_printf_float+0x13e>
 8007cb8:	1cc8      	adds	r0, r1, #3
 8007cba:	db02      	blt.n	8007cc2 <_printf_float+0x136>
 8007cbc:	6863      	ldr	r3, [r4, #4]
 8007cbe:	4299      	cmp	r1, r3
 8007cc0:	dd41      	ble.n	8007d46 <_printf_float+0x1ba>
 8007cc2:	f1ab 0302 	sub.w	r3, fp, #2
 8007cc6:	fa5f fb83 	uxtb.w	fp, r3
 8007cca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007cce:	d820      	bhi.n	8007d12 <_printf_float+0x186>
 8007cd0:	3901      	subs	r1, #1
 8007cd2:	465a      	mov	r2, fp
 8007cd4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007cd8:	9109      	str	r1, [sp, #36]	; 0x24
 8007cda:	f7ff ff19 	bl	8007b10 <__exponent>
 8007cde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ce0:	1813      	adds	r3, r2, r0
 8007ce2:	2a01      	cmp	r2, #1
 8007ce4:	4681      	mov	r9, r0
 8007ce6:	6123      	str	r3, [r4, #16]
 8007ce8:	dc02      	bgt.n	8007cf0 <_printf_float+0x164>
 8007cea:	6822      	ldr	r2, [r4, #0]
 8007cec:	07d2      	lsls	r2, r2, #31
 8007cee:	d501      	bpl.n	8007cf4 <_printf_float+0x168>
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	6123      	str	r3, [r4, #16]
 8007cf4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d09c      	beq.n	8007c36 <_printf_float+0xaa>
 8007cfc:	232d      	movs	r3, #45	; 0x2d
 8007cfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d02:	e798      	b.n	8007c36 <_printf_float+0xaa>
 8007d04:	9a06      	ldr	r2, [sp, #24]
 8007d06:	2a47      	cmp	r2, #71	; 0x47
 8007d08:	d1be      	bne.n	8007c88 <_printf_float+0xfc>
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1bc      	bne.n	8007c88 <_printf_float+0xfc>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e7b9      	b.n	8007c86 <_printf_float+0xfa>
 8007d12:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007d16:	d118      	bne.n	8007d4a <_printf_float+0x1be>
 8007d18:	2900      	cmp	r1, #0
 8007d1a:	6863      	ldr	r3, [r4, #4]
 8007d1c:	dd0b      	ble.n	8007d36 <_printf_float+0x1aa>
 8007d1e:	6121      	str	r1, [r4, #16]
 8007d20:	b913      	cbnz	r3, 8007d28 <_printf_float+0x19c>
 8007d22:	6822      	ldr	r2, [r4, #0]
 8007d24:	07d0      	lsls	r0, r2, #31
 8007d26:	d502      	bpl.n	8007d2e <_printf_float+0x1a2>
 8007d28:	3301      	adds	r3, #1
 8007d2a:	440b      	add	r3, r1
 8007d2c:	6123      	str	r3, [r4, #16]
 8007d2e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007d30:	f04f 0900 	mov.w	r9, #0
 8007d34:	e7de      	b.n	8007cf4 <_printf_float+0x168>
 8007d36:	b913      	cbnz	r3, 8007d3e <_printf_float+0x1b2>
 8007d38:	6822      	ldr	r2, [r4, #0]
 8007d3a:	07d2      	lsls	r2, r2, #31
 8007d3c:	d501      	bpl.n	8007d42 <_printf_float+0x1b6>
 8007d3e:	3302      	adds	r3, #2
 8007d40:	e7f4      	b.n	8007d2c <_printf_float+0x1a0>
 8007d42:	2301      	movs	r3, #1
 8007d44:	e7f2      	b.n	8007d2c <_printf_float+0x1a0>
 8007d46:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d4c:	4299      	cmp	r1, r3
 8007d4e:	db05      	blt.n	8007d5c <_printf_float+0x1d0>
 8007d50:	6823      	ldr	r3, [r4, #0]
 8007d52:	6121      	str	r1, [r4, #16]
 8007d54:	07d8      	lsls	r0, r3, #31
 8007d56:	d5ea      	bpl.n	8007d2e <_printf_float+0x1a2>
 8007d58:	1c4b      	adds	r3, r1, #1
 8007d5a:	e7e7      	b.n	8007d2c <_printf_float+0x1a0>
 8007d5c:	2900      	cmp	r1, #0
 8007d5e:	bfd4      	ite	le
 8007d60:	f1c1 0202 	rsble	r2, r1, #2
 8007d64:	2201      	movgt	r2, #1
 8007d66:	4413      	add	r3, r2
 8007d68:	e7e0      	b.n	8007d2c <_printf_float+0x1a0>
 8007d6a:	6823      	ldr	r3, [r4, #0]
 8007d6c:	055a      	lsls	r2, r3, #21
 8007d6e:	d407      	bmi.n	8007d80 <_printf_float+0x1f4>
 8007d70:	6923      	ldr	r3, [r4, #16]
 8007d72:	4642      	mov	r2, r8
 8007d74:	4631      	mov	r1, r6
 8007d76:	4628      	mov	r0, r5
 8007d78:	47b8      	blx	r7
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	d12c      	bne.n	8007dd8 <_printf_float+0x24c>
 8007d7e:	e764      	b.n	8007c4a <_printf_float+0xbe>
 8007d80:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d84:	f240 80e0 	bls.w	8007f48 <_printf_float+0x3bc>
 8007d88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	2300      	movs	r3, #0
 8007d90:	f7f8 feba 	bl	8000b08 <__aeabi_dcmpeq>
 8007d94:	2800      	cmp	r0, #0
 8007d96:	d034      	beq.n	8007e02 <_printf_float+0x276>
 8007d98:	4a37      	ldr	r2, [pc, #220]	; (8007e78 <_printf_float+0x2ec>)
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	4631      	mov	r1, r6
 8007d9e:	4628      	mov	r0, r5
 8007da0:	47b8      	blx	r7
 8007da2:	3001      	adds	r0, #1
 8007da4:	f43f af51 	beq.w	8007c4a <_printf_float+0xbe>
 8007da8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007dac:	429a      	cmp	r2, r3
 8007dae:	db02      	blt.n	8007db6 <_printf_float+0x22a>
 8007db0:	6823      	ldr	r3, [r4, #0]
 8007db2:	07d8      	lsls	r0, r3, #31
 8007db4:	d510      	bpl.n	8007dd8 <_printf_float+0x24c>
 8007db6:	ee18 3a10 	vmov	r3, s16
 8007dba:	4652      	mov	r2, sl
 8007dbc:	4631      	mov	r1, r6
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	47b8      	blx	r7
 8007dc2:	3001      	adds	r0, #1
 8007dc4:	f43f af41 	beq.w	8007c4a <_printf_float+0xbe>
 8007dc8:	f04f 0800 	mov.w	r8, #0
 8007dcc:	f104 091a 	add.w	r9, r4, #26
 8007dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	4543      	cmp	r3, r8
 8007dd6:	dc09      	bgt.n	8007dec <_printf_float+0x260>
 8007dd8:	6823      	ldr	r3, [r4, #0]
 8007dda:	079b      	lsls	r3, r3, #30
 8007ddc:	f100 8107 	bmi.w	8007fee <_printf_float+0x462>
 8007de0:	68e0      	ldr	r0, [r4, #12]
 8007de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007de4:	4298      	cmp	r0, r3
 8007de6:	bfb8      	it	lt
 8007de8:	4618      	movlt	r0, r3
 8007dea:	e730      	b.n	8007c4e <_printf_float+0xc2>
 8007dec:	2301      	movs	r3, #1
 8007dee:	464a      	mov	r2, r9
 8007df0:	4631      	mov	r1, r6
 8007df2:	4628      	mov	r0, r5
 8007df4:	47b8      	blx	r7
 8007df6:	3001      	adds	r0, #1
 8007df8:	f43f af27 	beq.w	8007c4a <_printf_float+0xbe>
 8007dfc:	f108 0801 	add.w	r8, r8, #1
 8007e00:	e7e6      	b.n	8007dd0 <_printf_float+0x244>
 8007e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	dc39      	bgt.n	8007e7c <_printf_float+0x2f0>
 8007e08:	4a1b      	ldr	r2, [pc, #108]	; (8007e78 <_printf_float+0x2ec>)
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	4631      	mov	r1, r6
 8007e0e:	4628      	mov	r0, r5
 8007e10:	47b8      	blx	r7
 8007e12:	3001      	adds	r0, #1
 8007e14:	f43f af19 	beq.w	8007c4a <_printf_float+0xbe>
 8007e18:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	d102      	bne.n	8007e26 <_printf_float+0x29a>
 8007e20:	6823      	ldr	r3, [r4, #0]
 8007e22:	07d9      	lsls	r1, r3, #31
 8007e24:	d5d8      	bpl.n	8007dd8 <_printf_float+0x24c>
 8007e26:	ee18 3a10 	vmov	r3, s16
 8007e2a:	4652      	mov	r2, sl
 8007e2c:	4631      	mov	r1, r6
 8007e2e:	4628      	mov	r0, r5
 8007e30:	47b8      	blx	r7
 8007e32:	3001      	adds	r0, #1
 8007e34:	f43f af09 	beq.w	8007c4a <_printf_float+0xbe>
 8007e38:	f04f 0900 	mov.w	r9, #0
 8007e3c:	f104 0a1a 	add.w	sl, r4, #26
 8007e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e42:	425b      	negs	r3, r3
 8007e44:	454b      	cmp	r3, r9
 8007e46:	dc01      	bgt.n	8007e4c <_printf_float+0x2c0>
 8007e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e4a:	e792      	b.n	8007d72 <_printf_float+0x1e6>
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	4652      	mov	r2, sl
 8007e50:	4631      	mov	r1, r6
 8007e52:	4628      	mov	r0, r5
 8007e54:	47b8      	blx	r7
 8007e56:	3001      	adds	r0, #1
 8007e58:	f43f aef7 	beq.w	8007c4a <_printf_float+0xbe>
 8007e5c:	f109 0901 	add.w	r9, r9, #1
 8007e60:	e7ee      	b.n	8007e40 <_printf_float+0x2b4>
 8007e62:	bf00      	nop
 8007e64:	7fefffff 	.word	0x7fefffff
 8007e68:	0800c964 	.word	0x0800c964
 8007e6c:	0800c968 	.word	0x0800c968
 8007e70:	0800c96c 	.word	0x0800c96c
 8007e74:	0800c970 	.word	0x0800c970
 8007e78:	0800c974 	.word	0x0800c974
 8007e7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e80:	429a      	cmp	r2, r3
 8007e82:	bfa8      	it	ge
 8007e84:	461a      	movge	r2, r3
 8007e86:	2a00      	cmp	r2, #0
 8007e88:	4691      	mov	r9, r2
 8007e8a:	dc37      	bgt.n	8007efc <_printf_float+0x370>
 8007e8c:	f04f 0b00 	mov.w	fp, #0
 8007e90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e94:	f104 021a 	add.w	r2, r4, #26
 8007e98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e9a:	9305      	str	r3, [sp, #20]
 8007e9c:	eba3 0309 	sub.w	r3, r3, r9
 8007ea0:	455b      	cmp	r3, fp
 8007ea2:	dc33      	bgt.n	8007f0c <_printf_float+0x380>
 8007ea4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	db3b      	blt.n	8007f24 <_printf_float+0x398>
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	07da      	lsls	r2, r3, #31
 8007eb0:	d438      	bmi.n	8007f24 <_printf_float+0x398>
 8007eb2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007eb6:	eba2 0903 	sub.w	r9, r2, r3
 8007eba:	9b05      	ldr	r3, [sp, #20]
 8007ebc:	1ad2      	subs	r2, r2, r3
 8007ebe:	4591      	cmp	r9, r2
 8007ec0:	bfa8      	it	ge
 8007ec2:	4691      	movge	r9, r2
 8007ec4:	f1b9 0f00 	cmp.w	r9, #0
 8007ec8:	dc35      	bgt.n	8007f36 <_printf_float+0x3aa>
 8007eca:	f04f 0800 	mov.w	r8, #0
 8007ece:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ed2:	f104 0a1a 	add.w	sl, r4, #26
 8007ed6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007eda:	1a9b      	subs	r3, r3, r2
 8007edc:	eba3 0309 	sub.w	r3, r3, r9
 8007ee0:	4543      	cmp	r3, r8
 8007ee2:	f77f af79 	ble.w	8007dd8 <_printf_float+0x24c>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	4652      	mov	r2, sl
 8007eea:	4631      	mov	r1, r6
 8007eec:	4628      	mov	r0, r5
 8007eee:	47b8      	blx	r7
 8007ef0:	3001      	adds	r0, #1
 8007ef2:	f43f aeaa 	beq.w	8007c4a <_printf_float+0xbe>
 8007ef6:	f108 0801 	add.w	r8, r8, #1
 8007efa:	e7ec      	b.n	8007ed6 <_printf_float+0x34a>
 8007efc:	4613      	mov	r3, r2
 8007efe:	4631      	mov	r1, r6
 8007f00:	4642      	mov	r2, r8
 8007f02:	4628      	mov	r0, r5
 8007f04:	47b8      	blx	r7
 8007f06:	3001      	adds	r0, #1
 8007f08:	d1c0      	bne.n	8007e8c <_printf_float+0x300>
 8007f0a:	e69e      	b.n	8007c4a <_printf_float+0xbe>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	4631      	mov	r1, r6
 8007f10:	4628      	mov	r0, r5
 8007f12:	9205      	str	r2, [sp, #20]
 8007f14:	47b8      	blx	r7
 8007f16:	3001      	adds	r0, #1
 8007f18:	f43f ae97 	beq.w	8007c4a <_printf_float+0xbe>
 8007f1c:	9a05      	ldr	r2, [sp, #20]
 8007f1e:	f10b 0b01 	add.w	fp, fp, #1
 8007f22:	e7b9      	b.n	8007e98 <_printf_float+0x30c>
 8007f24:	ee18 3a10 	vmov	r3, s16
 8007f28:	4652      	mov	r2, sl
 8007f2a:	4631      	mov	r1, r6
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	47b8      	blx	r7
 8007f30:	3001      	adds	r0, #1
 8007f32:	d1be      	bne.n	8007eb2 <_printf_float+0x326>
 8007f34:	e689      	b.n	8007c4a <_printf_float+0xbe>
 8007f36:	9a05      	ldr	r2, [sp, #20]
 8007f38:	464b      	mov	r3, r9
 8007f3a:	4442      	add	r2, r8
 8007f3c:	4631      	mov	r1, r6
 8007f3e:	4628      	mov	r0, r5
 8007f40:	47b8      	blx	r7
 8007f42:	3001      	adds	r0, #1
 8007f44:	d1c1      	bne.n	8007eca <_printf_float+0x33e>
 8007f46:	e680      	b.n	8007c4a <_printf_float+0xbe>
 8007f48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f4a:	2a01      	cmp	r2, #1
 8007f4c:	dc01      	bgt.n	8007f52 <_printf_float+0x3c6>
 8007f4e:	07db      	lsls	r3, r3, #31
 8007f50:	d53a      	bpl.n	8007fc8 <_printf_float+0x43c>
 8007f52:	2301      	movs	r3, #1
 8007f54:	4642      	mov	r2, r8
 8007f56:	4631      	mov	r1, r6
 8007f58:	4628      	mov	r0, r5
 8007f5a:	47b8      	blx	r7
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	f43f ae74 	beq.w	8007c4a <_printf_float+0xbe>
 8007f62:	ee18 3a10 	vmov	r3, s16
 8007f66:	4652      	mov	r2, sl
 8007f68:	4631      	mov	r1, r6
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	47b8      	blx	r7
 8007f6e:	3001      	adds	r0, #1
 8007f70:	f43f ae6b 	beq.w	8007c4a <_printf_float+0xbe>
 8007f74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f78:	2200      	movs	r2, #0
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007f80:	f7f8 fdc2 	bl	8000b08 <__aeabi_dcmpeq>
 8007f84:	b9d8      	cbnz	r0, 8007fbe <_printf_float+0x432>
 8007f86:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007f8a:	f108 0201 	add.w	r2, r8, #1
 8007f8e:	4631      	mov	r1, r6
 8007f90:	4628      	mov	r0, r5
 8007f92:	47b8      	blx	r7
 8007f94:	3001      	adds	r0, #1
 8007f96:	d10e      	bne.n	8007fb6 <_printf_float+0x42a>
 8007f98:	e657      	b.n	8007c4a <_printf_float+0xbe>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	4652      	mov	r2, sl
 8007f9e:	4631      	mov	r1, r6
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	47b8      	blx	r7
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	f43f ae50 	beq.w	8007c4a <_printf_float+0xbe>
 8007faa:	f108 0801 	add.w	r8, r8, #1
 8007fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	4543      	cmp	r3, r8
 8007fb4:	dcf1      	bgt.n	8007f9a <_printf_float+0x40e>
 8007fb6:	464b      	mov	r3, r9
 8007fb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007fbc:	e6da      	b.n	8007d74 <_printf_float+0x1e8>
 8007fbe:	f04f 0800 	mov.w	r8, #0
 8007fc2:	f104 0a1a 	add.w	sl, r4, #26
 8007fc6:	e7f2      	b.n	8007fae <_printf_float+0x422>
 8007fc8:	2301      	movs	r3, #1
 8007fca:	4642      	mov	r2, r8
 8007fcc:	e7df      	b.n	8007f8e <_printf_float+0x402>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	464a      	mov	r2, r9
 8007fd2:	4631      	mov	r1, r6
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	47b8      	blx	r7
 8007fd8:	3001      	adds	r0, #1
 8007fda:	f43f ae36 	beq.w	8007c4a <_printf_float+0xbe>
 8007fde:	f108 0801 	add.w	r8, r8, #1
 8007fe2:	68e3      	ldr	r3, [r4, #12]
 8007fe4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fe6:	1a5b      	subs	r3, r3, r1
 8007fe8:	4543      	cmp	r3, r8
 8007fea:	dcf0      	bgt.n	8007fce <_printf_float+0x442>
 8007fec:	e6f8      	b.n	8007de0 <_printf_float+0x254>
 8007fee:	f04f 0800 	mov.w	r8, #0
 8007ff2:	f104 0919 	add.w	r9, r4, #25
 8007ff6:	e7f4      	b.n	8007fe2 <_printf_float+0x456>

08007ff8 <_printf_common>:
 8007ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ffc:	4616      	mov	r6, r2
 8007ffe:	4699      	mov	r9, r3
 8008000:	688a      	ldr	r2, [r1, #8]
 8008002:	690b      	ldr	r3, [r1, #16]
 8008004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008008:	4293      	cmp	r3, r2
 800800a:	bfb8      	it	lt
 800800c:	4613      	movlt	r3, r2
 800800e:	6033      	str	r3, [r6, #0]
 8008010:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008014:	4607      	mov	r7, r0
 8008016:	460c      	mov	r4, r1
 8008018:	b10a      	cbz	r2, 800801e <_printf_common+0x26>
 800801a:	3301      	adds	r3, #1
 800801c:	6033      	str	r3, [r6, #0]
 800801e:	6823      	ldr	r3, [r4, #0]
 8008020:	0699      	lsls	r1, r3, #26
 8008022:	bf42      	ittt	mi
 8008024:	6833      	ldrmi	r3, [r6, #0]
 8008026:	3302      	addmi	r3, #2
 8008028:	6033      	strmi	r3, [r6, #0]
 800802a:	6825      	ldr	r5, [r4, #0]
 800802c:	f015 0506 	ands.w	r5, r5, #6
 8008030:	d106      	bne.n	8008040 <_printf_common+0x48>
 8008032:	f104 0a19 	add.w	sl, r4, #25
 8008036:	68e3      	ldr	r3, [r4, #12]
 8008038:	6832      	ldr	r2, [r6, #0]
 800803a:	1a9b      	subs	r3, r3, r2
 800803c:	42ab      	cmp	r3, r5
 800803e:	dc26      	bgt.n	800808e <_printf_common+0x96>
 8008040:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008044:	1e13      	subs	r3, r2, #0
 8008046:	6822      	ldr	r2, [r4, #0]
 8008048:	bf18      	it	ne
 800804a:	2301      	movne	r3, #1
 800804c:	0692      	lsls	r2, r2, #26
 800804e:	d42b      	bmi.n	80080a8 <_printf_common+0xb0>
 8008050:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008054:	4649      	mov	r1, r9
 8008056:	4638      	mov	r0, r7
 8008058:	47c0      	blx	r8
 800805a:	3001      	adds	r0, #1
 800805c:	d01e      	beq.n	800809c <_printf_common+0xa4>
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	6922      	ldr	r2, [r4, #16]
 8008062:	f003 0306 	and.w	r3, r3, #6
 8008066:	2b04      	cmp	r3, #4
 8008068:	bf02      	ittt	eq
 800806a:	68e5      	ldreq	r5, [r4, #12]
 800806c:	6833      	ldreq	r3, [r6, #0]
 800806e:	1aed      	subeq	r5, r5, r3
 8008070:	68a3      	ldr	r3, [r4, #8]
 8008072:	bf0c      	ite	eq
 8008074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008078:	2500      	movne	r5, #0
 800807a:	4293      	cmp	r3, r2
 800807c:	bfc4      	itt	gt
 800807e:	1a9b      	subgt	r3, r3, r2
 8008080:	18ed      	addgt	r5, r5, r3
 8008082:	2600      	movs	r6, #0
 8008084:	341a      	adds	r4, #26
 8008086:	42b5      	cmp	r5, r6
 8008088:	d11a      	bne.n	80080c0 <_printf_common+0xc8>
 800808a:	2000      	movs	r0, #0
 800808c:	e008      	b.n	80080a0 <_printf_common+0xa8>
 800808e:	2301      	movs	r3, #1
 8008090:	4652      	mov	r2, sl
 8008092:	4649      	mov	r1, r9
 8008094:	4638      	mov	r0, r7
 8008096:	47c0      	blx	r8
 8008098:	3001      	adds	r0, #1
 800809a:	d103      	bne.n	80080a4 <_printf_common+0xac>
 800809c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a4:	3501      	adds	r5, #1
 80080a6:	e7c6      	b.n	8008036 <_printf_common+0x3e>
 80080a8:	18e1      	adds	r1, r4, r3
 80080aa:	1c5a      	adds	r2, r3, #1
 80080ac:	2030      	movs	r0, #48	; 0x30
 80080ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080b2:	4422      	add	r2, r4
 80080b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080bc:	3302      	adds	r3, #2
 80080be:	e7c7      	b.n	8008050 <_printf_common+0x58>
 80080c0:	2301      	movs	r3, #1
 80080c2:	4622      	mov	r2, r4
 80080c4:	4649      	mov	r1, r9
 80080c6:	4638      	mov	r0, r7
 80080c8:	47c0      	blx	r8
 80080ca:	3001      	adds	r0, #1
 80080cc:	d0e6      	beq.n	800809c <_printf_common+0xa4>
 80080ce:	3601      	adds	r6, #1
 80080d0:	e7d9      	b.n	8008086 <_printf_common+0x8e>
	...

080080d4 <_printf_i>:
 80080d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080d8:	7e0f      	ldrb	r7, [r1, #24]
 80080da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80080dc:	2f78      	cmp	r7, #120	; 0x78
 80080de:	4691      	mov	r9, r2
 80080e0:	4680      	mov	r8, r0
 80080e2:	460c      	mov	r4, r1
 80080e4:	469a      	mov	sl, r3
 80080e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80080ea:	d807      	bhi.n	80080fc <_printf_i+0x28>
 80080ec:	2f62      	cmp	r7, #98	; 0x62
 80080ee:	d80a      	bhi.n	8008106 <_printf_i+0x32>
 80080f0:	2f00      	cmp	r7, #0
 80080f2:	f000 80d4 	beq.w	800829e <_printf_i+0x1ca>
 80080f6:	2f58      	cmp	r7, #88	; 0x58
 80080f8:	f000 80c0 	beq.w	800827c <_printf_i+0x1a8>
 80080fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008100:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008104:	e03a      	b.n	800817c <_printf_i+0xa8>
 8008106:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800810a:	2b15      	cmp	r3, #21
 800810c:	d8f6      	bhi.n	80080fc <_printf_i+0x28>
 800810e:	a101      	add	r1, pc, #4	; (adr r1, 8008114 <_printf_i+0x40>)
 8008110:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008114:	0800816d 	.word	0x0800816d
 8008118:	08008181 	.word	0x08008181
 800811c:	080080fd 	.word	0x080080fd
 8008120:	080080fd 	.word	0x080080fd
 8008124:	080080fd 	.word	0x080080fd
 8008128:	080080fd 	.word	0x080080fd
 800812c:	08008181 	.word	0x08008181
 8008130:	080080fd 	.word	0x080080fd
 8008134:	080080fd 	.word	0x080080fd
 8008138:	080080fd 	.word	0x080080fd
 800813c:	080080fd 	.word	0x080080fd
 8008140:	08008285 	.word	0x08008285
 8008144:	080081ad 	.word	0x080081ad
 8008148:	0800823f 	.word	0x0800823f
 800814c:	080080fd 	.word	0x080080fd
 8008150:	080080fd 	.word	0x080080fd
 8008154:	080082a7 	.word	0x080082a7
 8008158:	080080fd 	.word	0x080080fd
 800815c:	080081ad 	.word	0x080081ad
 8008160:	080080fd 	.word	0x080080fd
 8008164:	080080fd 	.word	0x080080fd
 8008168:	08008247 	.word	0x08008247
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	1d1a      	adds	r2, r3, #4
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	602a      	str	r2, [r5, #0]
 8008174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800817c:	2301      	movs	r3, #1
 800817e:	e09f      	b.n	80082c0 <_printf_i+0x1ec>
 8008180:	6820      	ldr	r0, [r4, #0]
 8008182:	682b      	ldr	r3, [r5, #0]
 8008184:	0607      	lsls	r7, r0, #24
 8008186:	f103 0104 	add.w	r1, r3, #4
 800818a:	6029      	str	r1, [r5, #0]
 800818c:	d501      	bpl.n	8008192 <_printf_i+0xbe>
 800818e:	681e      	ldr	r6, [r3, #0]
 8008190:	e003      	b.n	800819a <_printf_i+0xc6>
 8008192:	0646      	lsls	r6, r0, #25
 8008194:	d5fb      	bpl.n	800818e <_printf_i+0xba>
 8008196:	f9b3 6000 	ldrsh.w	r6, [r3]
 800819a:	2e00      	cmp	r6, #0
 800819c:	da03      	bge.n	80081a6 <_printf_i+0xd2>
 800819e:	232d      	movs	r3, #45	; 0x2d
 80081a0:	4276      	negs	r6, r6
 80081a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081a6:	485a      	ldr	r0, [pc, #360]	; (8008310 <_printf_i+0x23c>)
 80081a8:	230a      	movs	r3, #10
 80081aa:	e012      	b.n	80081d2 <_printf_i+0xfe>
 80081ac:	682b      	ldr	r3, [r5, #0]
 80081ae:	6820      	ldr	r0, [r4, #0]
 80081b0:	1d19      	adds	r1, r3, #4
 80081b2:	6029      	str	r1, [r5, #0]
 80081b4:	0605      	lsls	r5, r0, #24
 80081b6:	d501      	bpl.n	80081bc <_printf_i+0xe8>
 80081b8:	681e      	ldr	r6, [r3, #0]
 80081ba:	e002      	b.n	80081c2 <_printf_i+0xee>
 80081bc:	0641      	lsls	r1, r0, #25
 80081be:	d5fb      	bpl.n	80081b8 <_printf_i+0xe4>
 80081c0:	881e      	ldrh	r6, [r3, #0]
 80081c2:	4853      	ldr	r0, [pc, #332]	; (8008310 <_printf_i+0x23c>)
 80081c4:	2f6f      	cmp	r7, #111	; 0x6f
 80081c6:	bf0c      	ite	eq
 80081c8:	2308      	moveq	r3, #8
 80081ca:	230a      	movne	r3, #10
 80081cc:	2100      	movs	r1, #0
 80081ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081d2:	6865      	ldr	r5, [r4, #4]
 80081d4:	60a5      	str	r5, [r4, #8]
 80081d6:	2d00      	cmp	r5, #0
 80081d8:	bfa2      	ittt	ge
 80081da:	6821      	ldrge	r1, [r4, #0]
 80081dc:	f021 0104 	bicge.w	r1, r1, #4
 80081e0:	6021      	strge	r1, [r4, #0]
 80081e2:	b90e      	cbnz	r6, 80081e8 <_printf_i+0x114>
 80081e4:	2d00      	cmp	r5, #0
 80081e6:	d04b      	beq.n	8008280 <_printf_i+0x1ac>
 80081e8:	4615      	mov	r5, r2
 80081ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80081ee:	fb03 6711 	mls	r7, r3, r1, r6
 80081f2:	5dc7      	ldrb	r7, [r0, r7]
 80081f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80081f8:	4637      	mov	r7, r6
 80081fa:	42bb      	cmp	r3, r7
 80081fc:	460e      	mov	r6, r1
 80081fe:	d9f4      	bls.n	80081ea <_printf_i+0x116>
 8008200:	2b08      	cmp	r3, #8
 8008202:	d10b      	bne.n	800821c <_printf_i+0x148>
 8008204:	6823      	ldr	r3, [r4, #0]
 8008206:	07de      	lsls	r6, r3, #31
 8008208:	d508      	bpl.n	800821c <_printf_i+0x148>
 800820a:	6923      	ldr	r3, [r4, #16]
 800820c:	6861      	ldr	r1, [r4, #4]
 800820e:	4299      	cmp	r1, r3
 8008210:	bfde      	ittt	le
 8008212:	2330      	movle	r3, #48	; 0x30
 8008214:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008218:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800821c:	1b52      	subs	r2, r2, r5
 800821e:	6122      	str	r2, [r4, #16]
 8008220:	f8cd a000 	str.w	sl, [sp]
 8008224:	464b      	mov	r3, r9
 8008226:	aa03      	add	r2, sp, #12
 8008228:	4621      	mov	r1, r4
 800822a:	4640      	mov	r0, r8
 800822c:	f7ff fee4 	bl	8007ff8 <_printf_common>
 8008230:	3001      	adds	r0, #1
 8008232:	d14a      	bne.n	80082ca <_printf_i+0x1f6>
 8008234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008238:	b004      	add	sp, #16
 800823a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800823e:	6823      	ldr	r3, [r4, #0]
 8008240:	f043 0320 	orr.w	r3, r3, #32
 8008244:	6023      	str	r3, [r4, #0]
 8008246:	4833      	ldr	r0, [pc, #204]	; (8008314 <_printf_i+0x240>)
 8008248:	2778      	movs	r7, #120	; 0x78
 800824a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800824e:	6823      	ldr	r3, [r4, #0]
 8008250:	6829      	ldr	r1, [r5, #0]
 8008252:	061f      	lsls	r7, r3, #24
 8008254:	f851 6b04 	ldr.w	r6, [r1], #4
 8008258:	d402      	bmi.n	8008260 <_printf_i+0x18c>
 800825a:	065f      	lsls	r7, r3, #25
 800825c:	bf48      	it	mi
 800825e:	b2b6      	uxthmi	r6, r6
 8008260:	07df      	lsls	r7, r3, #31
 8008262:	bf48      	it	mi
 8008264:	f043 0320 	orrmi.w	r3, r3, #32
 8008268:	6029      	str	r1, [r5, #0]
 800826a:	bf48      	it	mi
 800826c:	6023      	strmi	r3, [r4, #0]
 800826e:	b91e      	cbnz	r6, 8008278 <_printf_i+0x1a4>
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	f023 0320 	bic.w	r3, r3, #32
 8008276:	6023      	str	r3, [r4, #0]
 8008278:	2310      	movs	r3, #16
 800827a:	e7a7      	b.n	80081cc <_printf_i+0xf8>
 800827c:	4824      	ldr	r0, [pc, #144]	; (8008310 <_printf_i+0x23c>)
 800827e:	e7e4      	b.n	800824a <_printf_i+0x176>
 8008280:	4615      	mov	r5, r2
 8008282:	e7bd      	b.n	8008200 <_printf_i+0x12c>
 8008284:	682b      	ldr	r3, [r5, #0]
 8008286:	6826      	ldr	r6, [r4, #0]
 8008288:	6961      	ldr	r1, [r4, #20]
 800828a:	1d18      	adds	r0, r3, #4
 800828c:	6028      	str	r0, [r5, #0]
 800828e:	0635      	lsls	r5, r6, #24
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	d501      	bpl.n	8008298 <_printf_i+0x1c4>
 8008294:	6019      	str	r1, [r3, #0]
 8008296:	e002      	b.n	800829e <_printf_i+0x1ca>
 8008298:	0670      	lsls	r0, r6, #25
 800829a:	d5fb      	bpl.n	8008294 <_printf_i+0x1c0>
 800829c:	8019      	strh	r1, [r3, #0]
 800829e:	2300      	movs	r3, #0
 80082a0:	6123      	str	r3, [r4, #16]
 80082a2:	4615      	mov	r5, r2
 80082a4:	e7bc      	b.n	8008220 <_printf_i+0x14c>
 80082a6:	682b      	ldr	r3, [r5, #0]
 80082a8:	1d1a      	adds	r2, r3, #4
 80082aa:	602a      	str	r2, [r5, #0]
 80082ac:	681d      	ldr	r5, [r3, #0]
 80082ae:	6862      	ldr	r2, [r4, #4]
 80082b0:	2100      	movs	r1, #0
 80082b2:	4628      	mov	r0, r5
 80082b4:	f7f7 ffac 	bl	8000210 <memchr>
 80082b8:	b108      	cbz	r0, 80082be <_printf_i+0x1ea>
 80082ba:	1b40      	subs	r0, r0, r5
 80082bc:	6060      	str	r0, [r4, #4]
 80082be:	6863      	ldr	r3, [r4, #4]
 80082c0:	6123      	str	r3, [r4, #16]
 80082c2:	2300      	movs	r3, #0
 80082c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082c8:	e7aa      	b.n	8008220 <_printf_i+0x14c>
 80082ca:	6923      	ldr	r3, [r4, #16]
 80082cc:	462a      	mov	r2, r5
 80082ce:	4649      	mov	r1, r9
 80082d0:	4640      	mov	r0, r8
 80082d2:	47d0      	blx	sl
 80082d4:	3001      	adds	r0, #1
 80082d6:	d0ad      	beq.n	8008234 <_printf_i+0x160>
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	079b      	lsls	r3, r3, #30
 80082dc:	d413      	bmi.n	8008306 <_printf_i+0x232>
 80082de:	68e0      	ldr	r0, [r4, #12]
 80082e0:	9b03      	ldr	r3, [sp, #12]
 80082e2:	4298      	cmp	r0, r3
 80082e4:	bfb8      	it	lt
 80082e6:	4618      	movlt	r0, r3
 80082e8:	e7a6      	b.n	8008238 <_printf_i+0x164>
 80082ea:	2301      	movs	r3, #1
 80082ec:	4632      	mov	r2, r6
 80082ee:	4649      	mov	r1, r9
 80082f0:	4640      	mov	r0, r8
 80082f2:	47d0      	blx	sl
 80082f4:	3001      	adds	r0, #1
 80082f6:	d09d      	beq.n	8008234 <_printf_i+0x160>
 80082f8:	3501      	adds	r5, #1
 80082fa:	68e3      	ldr	r3, [r4, #12]
 80082fc:	9903      	ldr	r1, [sp, #12]
 80082fe:	1a5b      	subs	r3, r3, r1
 8008300:	42ab      	cmp	r3, r5
 8008302:	dcf2      	bgt.n	80082ea <_printf_i+0x216>
 8008304:	e7eb      	b.n	80082de <_printf_i+0x20a>
 8008306:	2500      	movs	r5, #0
 8008308:	f104 0619 	add.w	r6, r4, #25
 800830c:	e7f5      	b.n	80082fa <_printf_i+0x226>
 800830e:	bf00      	nop
 8008310:	0800c976 	.word	0x0800c976
 8008314:	0800c987 	.word	0x0800c987

08008318 <siprintf>:
 8008318:	b40e      	push	{r1, r2, r3}
 800831a:	b500      	push	{lr}
 800831c:	b09c      	sub	sp, #112	; 0x70
 800831e:	ab1d      	add	r3, sp, #116	; 0x74
 8008320:	9002      	str	r0, [sp, #8]
 8008322:	9006      	str	r0, [sp, #24]
 8008324:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008328:	4809      	ldr	r0, [pc, #36]	; (8008350 <siprintf+0x38>)
 800832a:	9107      	str	r1, [sp, #28]
 800832c:	9104      	str	r1, [sp, #16]
 800832e:	4909      	ldr	r1, [pc, #36]	; (8008354 <siprintf+0x3c>)
 8008330:	f853 2b04 	ldr.w	r2, [r3], #4
 8008334:	9105      	str	r1, [sp, #20]
 8008336:	6800      	ldr	r0, [r0, #0]
 8008338:	9301      	str	r3, [sp, #4]
 800833a:	a902      	add	r1, sp, #8
 800833c:	f001 f88c 	bl	8009458 <_svfiprintf_r>
 8008340:	9b02      	ldr	r3, [sp, #8]
 8008342:	2200      	movs	r2, #0
 8008344:	701a      	strb	r2, [r3, #0]
 8008346:	b01c      	add	sp, #112	; 0x70
 8008348:	f85d eb04 	ldr.w	lr, [sp], #4
 800834c:	b003      	add	sp, #12
 800834e:	4770      	bx	lr
 8008350:	20000078 	.word	0x20000078
 8008354:	ffff0208 	.word	0xffff0208

08008358 <std>:
 8008358:	2300      	movs	r3, #0
 800835a:	b510      	push	{r4, lr}
 800835c:	4604      	mov	r4, r0
 800835e:	e9c0 3300 	strd	r3, r3, [r0]
 8008362:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008366:	6083      	str	r3, [r0, #8]
 8008368:	8181      	strh	r1, [r0, #12]
 800836a:	6643      	str	r3, [r0, #100]	; 0x64
 800836c:	81c2      	strh	r2, [r0, #14]
 800836e:	6183      	str	r3, [r0, #24]
 8008370:	4619      	mov	r1, r3
 8008372:	2208      	movs	r2, #8
 8008374:	305c      	adds	r0, #92	; 0x5c
 8008376:	f000 f8b1 	bl	80084dc <memset>
 800837a:	4b0d      	ldr	r3, [pc, #52]	; (80083b0 <std+0x58>)
 800837c:	6263      	str	r3, [r4, #36]	; 0x24
 800837e:	4b0d      	ldr	r3, [pc, #52]	; (80083b4 <std+0x5c>)
 8008380:	62a3      	str	r3, [r4, #40]	; 0x28
 8008382:	4b0d      	ldr	r3, [pc, #52]	; (80083b8 <std+0x60>)
 8008384:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008386:	4b0d      	ldr	r3, [pc, #52]	; (80083bc <std+0x64>)
 8008388:	6323      	str	r3, [r4, #48]	; 0x30
 800838a:	4b0d      	ldr	r3, [pc, #52]	; (80083c0 <std+0x68>)
 800838c:	6224      	str	r4, [r4, #32]
 800838e:	429c      	cmp	r4, r3
 8008390:	d006      	beq.n	80083a0 <std+0x48>
 8008392:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008396:	4294      	cmp	r4, r2
 8008398:	d002      	beq.n	80083a0 <std+0x48>
 800839a:	33d0      	adds	r3, #208	; 0xd0
 800839c:	429c      	cmp	r4, r3
 800839e:	d105      	bne.n	80083ac <std+0x54>
 80083a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083a8:	f000 b924 	b.w	80085f4 <__retarget_lock_init_recursive>
 80083ac:	bd10      	pop	{r4, pc}
 80083ae:	bf00      	nop
 80083b0:	0800a011 	.word	0x0800a011
 80083b4:	0800a033 	.word	0x0800a033
 80083b8:	0800a06b 	.word	0x0800a06b
 80083bc:	0800a08f 	.word	0x0800a08f
 80083c0:	20005138 	.word	0x20005138

080083c4 <stdio_exit_handler>:
 80083c4:	4a02      	ldr	r2, [pc, #8]	; (80083d0 <stdio_exit_handler+0xc>)
 80083c6:	4903      	ldr	r1, [pc, #12]	; (80083d4 <stdio_exit_handler+0x10>)
 80083c8:	4803      	ldr	r0, [pc, #12]	; (80083d8 <stdio_exit_handler+0x14>)
 80083ca:	f000 b869 	b.w	80084a0 <_fwalk_sglue>
 80083ce:	bf00      	nop
 80083d0:	20000020 	.word	0x20000020
 80083d4:	080098b1 	.word	0x080098b1
 80083d8:	2000002c 	.word	0x2000002c

080083dc <cleanup_stdio>:
 80083dc:	6841      	ldr	r1, [r0, #4]
 80083de:	4b0c      	ldr	r3, [pc, #48]	; (8008410 <cleanup_stdio+0x34>)
 80083e0:	4299      	cmp	r1, r3
 80083e2:	b510      	push	{r4, lr}
 80083e4:	4604      	mov	r4, r0
 80083e6:	d001      	beq.n	80083ec <cleanup_stdio+0x10>
 80083e8:	f001 fa62 	bl	80098b0 <_fflush_r>
 80083ec:	68a1      	ldr	r1, [r4, #8]
 80083ee:	4b09      	ldr	r3, [pc, #36]	; (8008414 <cleanup_stdio+0x38>)
 80083f0:	4299      	cmp	r1, r3
 80083f2:	d002      	beq.n	80083fa <cleanup_stdio+0x1e>
 80083f4:	4620      	mov	r0, r4
 80083f6:	f001 fa5b 	bl	80098b0 <_fflush_r>
 80083fa:	68e1      	ldr	r1, [r4, #12]
 80083fc:	4b06      	ldr	r3, [pc, #24]	; (8008418 <cleanup_stdio+0x3c>)
 80083fe:	4299      	cmp	r1, r3
 8008400:	d004      	beq.n	800840c <cleanup_stdio+0x30>
 8008402:	4620      	mov	r0, r4
 8008404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008408:	f001 ba52 	b.w	80098b0 <_fflush_r>
 800840c:	bd10      	pop	{r4, pc}
 800840e:	bf00      	nop
 8008410:	20005138 	.word	0x20005138
 8008414:	200051a0 	.word	0x200051a0
 8008418:	20005208 	.word	0x20005208

0800841c <global_stdio_init.part.0>:
 800841c:	b510      	push	{r4, lr}
 800841e:	4b0b      	ldr	r3, [pc, #44]	; (800844c <global_stdio_init.part.0+0x30>)
 8008420:	4c0b      	ldr	r4, [pc, #44]	; (8008450 <global_stdio_init.part.0+0x34>)
 8008422:	4a0c      	ldr	r2, [pc, #48]	; (8008454 <global_stdio_init.part.0+0x38>)
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	4620      	mov	r0, r4
 8008428:	2200      	movs	r2, #0
 800842a:	2104      	movs	r1, #4
 800842c:	f7ff ff94 	bl	8008358 <std>
 8008430:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008434:	2201      	movs	r2, #1
 8008436:	2109      	movs	r1, #9
 8008438:	f7ff ff8e 	bl	8008358 <std>
 800843c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008440:	2202      	movs	r2, #2
 8008442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008446:	2112      	movs	r1, #18
 8008448:	f7ff bf86 	b.w	8008358 <std>
 800844c:	20005270 	.word	0x20005270
 8008450:	20005138 	.word	0x20005138
 8008454:	080083c5 	.word	0x080083c5

08008458 <__sfp_lock_acquire>:
 8008458:	4801      	ldr	r0, [pc, #4]	; (8008460 <__sfp_lock_acquire+0x8>)
 800845a:	f000 b8cc 	b.w	80085f6 <__retarget_lock_acquire_recursive>
 800845e:	bf00      	nop
 8008460:	20005279 	.word	0x20005279

08008464 <__sfp_lock_release>:
 8008464:	4801      	ldr	r0, [pc, #4]	; (800846c <__sfp_lock_release+0x8>)
 8008466:	f000 b8c7 	b.w	80085f8 <__retarget_lock_release_recursive>
 800846a:	bf00      	nop
 800846c:	20005279 	.word	0x20005279

08008470 <__sinit>:
 8008470:	b510      	push	{r4, lr}
 8008472:	4604      	mov	r4, r0
 8008474:	f7ff fff0 	bl	8008458 <__sfp_lock_acquire>
 8008478:	6a23      	ldr	r3, [r4, #32]
 800847a:	b11b      	cbz	r3, 8008484 <__sinit+0x14>
 800847c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008480:	f7ff bff0 	b.w	8008464 <__sfp_lock_release>
 8008484:	4b04      	ldr	r3, [pc, #16]	; (8008498 <__sinit+0x28>)
 8008486:	6223      	str	r3, [r4, #32]
 8008488:	4b04      	ldr	r3, [pc, #16]	; (800849c <__sinit+0x2c>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1f5      	bne.n	800847c <__sinit+0xc>
 8008490:	f7ff ffc4 	bl	800841c <global_stdio_init.part.0>
 8008494:	e7f2      	b.n	800847c <__sinit+0xc>
 8008496:	bf00      	nop
 8008498:	080083dd 	.word	0x080083dd
 800849c:	20005270 	.word	0x20005270

080084a0 <_fwalk_sglue>:
 80084a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084a4:	4607      	mov	r7, r0
 80084a6:	4688      	mov	r8, r1
 80084a8:	4614      	mov	r4, r2
 80084aa:	2600      	movs	r6, #0
 80084ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084b0:	f1b9 0901 	subs.w	r9, r9, #1
 80084b4:	d505      	bpl.n	80084c2 <_fwalk_sglue+0x22>
 80084b6:	6824      	ldr	r4, [r4, #0]
 80084b8:	2c00      	cmp	r4, #0
 80084ba:	d1f7      	bne.n	80084ac <_fwalk_sglue+0xc>
 80084bc:	4630      	mov	r0, r6
 80084be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084c2:	89ab      	ldrh	r3, [r5, #12]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d907      	bls.n	80084d8 <_fwalk_sglue+0x38>
 80084c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084cc:	3301      	adds	r3, #1
 80084ce:	d003      	beq.n	80084d8 <_fwalk_sglue+0x38>
 80084d0:	4629      	mov	r1, r5
 80084d2:	4638      	mov	r0, r7
 80084d4:	47c0      	blx	r8
 80084d6:	4306      	orrs	r6, r0
 80084d8:	3568      	adds	r5, #104	; 0x68
 80084da:	e7e9      	b.n	80084b0 <_fwalk_sglue+0x10>

080084dc <memset>:
 80084dc:	4402      	add	r2, r0
 80084de:	4603      	mov	r3, r0
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d100      	bne.n	80084e6 <memset+0xa>
 80084e4:	4770      	bx	lr
 80084e6:	f803 1b01 	strb.w	r1, [r3], #1
 80084ea:	e7f9      	b.n	80084e0 <memset+0x4>

080084ec <_localeconv_r>:
 80084ec:	4800      	ldr	r0, [pc, #0]	; (80084f0 <_localeconv_r+0x4>)
 80084ee:	4770      	bx	lr
 80084f0:	2000016c 	.word	0x2000016c

080084f4 <_reclaim_reent>:
 80084f4:	4b29      	ldr	r3, [pc, #164]	; (800859c <_reclaim_reent+0xa8>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4283      	cmp	r3, r0
 80084fa:	b570      	push	{r4, r5, r6, lr}
 80084fc:	4604      	mov	r4, r0
 80084fe:	d04b      	beq.n	8008598 <_reclaim_reent+0xa4>
 8008500:	69c3      	ldr	r3, [r0, #28]
 8008502:	b143      	cbz	r3, 8008516 <_reclaim_reent+0x22>
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d144      	bne.n	8008594 <_reclaim_reent+0xa0>
 800850a:	69e3      	ldr	r3, [r4, #28]
 800850c:	6819      	ldr	r1, [r3, #0]
 800850e:	b111      	cbz	r1, 8008516 <_reclaim_reent+0x22>
 8008510:	4620      	mov	r0, r4
 8008512:	f000 fefb 	bl	800930c <_free_r>
 8008516:	6961      	ldr	r1, [r4, #20]
 8008518:	b111      	cbz	r1, 8008520 <_reclaim_reent+0x2c>
 800851a:	4620      	mov	r0, r4
 800851c:	f000 fef6 	bl	800930c <_free_r>
 8008520:	69e1      	ldr	r1, [r4, #28]
 8008522:	b111      	cbz	r1, 800852a <_reclaim_reent+0x36>
 8008524:	4620      	mov	r0, r4
 8008526:	f000 fef1 	bl	800930c <_free_r>
 800852a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800852c:	b111      	cbz	r1, 8008534 <_reclaim_reent+0x40>
 800852e:	4620      	mov	r0, r4
 8008530:	f000 feec 	bl	800930c <_free_r>
 8008534:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008536:	b111      	cbz	r1, 800853e <_reclaim_reent+0x4a>
 8008538:	4620      	mov	r0, r4
 800853a:	f000 fee7 	bl	800930c <_free_r>
 800853e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008540:	b111      	cbz	r1, 8008548 <_reclaim_reent+0x54>
 8008542:	4620      	mov	r0, r4
 8008544:	f000 fee2 	bl	800930c <_free_r>
 8008548:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800854a:	b111      	cbz	r1, 8008552 <_reclaim_reent+0x5e>
 800854c:	4620      	mov	r0, r4
 800854e:	f000 fedd 	bl	800930c <_free_r>
 8008552:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008554:	b111      	cbz	r1, 800855c <_reclaim_reent+0x68>
 8008556:	4620      	mov	r0, r4
 8008558:	f000 fed8 	bl	800930c <_free_r>
 800855c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800855e:	b111      	cbz	r1, 8008566 <_reclaim_reent+0x72>
 8008560:	4620      	mov	r0, r4
 8008562:	f000 fed3 	bl	800930c <_free_r>
 8008566:	6a23      	ldr	r3, [r4, #32]
 8008568:	b1b3      	cbz	r3, 8008598 <_reclaim_reent+0xa4>
 800856a:	4620      	mov	r0, r4
 800856c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008570:	4718      	bx	r3
 8008572:	5949      	ldr	r1, [r1, r5]
 8008574:	b941      	cbnz	r1, 8008588 <_reclaim_reent+0x94>
 8008576:	3504      	adds	r5, #4
 8008578:	69e3      	ldr	r3, [r4, #28]
 800857a:	2d80      	cmp	r5, #128	; 0x80
 800857c:	68d9      	ldr	r1, [r3, #12]
 800857e:	d1f8      	bne.n	8008572 <_reclaim_reent+0x7e>
 8008580:	4620      	mov	r0, r4
 8008582:	f000 fec3 	bl	800930c <_free_r>
 8008586:	e7c0      	b.n	800850a <_reclaim_reent+0x16>
 8008588:	680e      	ldr	r6, [r1, #0]
 800858a:	4620      	mov	r0, r4
 800858c:	f000 febe 	bl	800930c <_free_r>
 8008590:	4631      	mov	r1, r6
 8008592:	e7ef      	b.n	8008574 <_reclaim_reent+0x80>
 8008594:	2500      	movs	r5, #0
 8008596:	e7ef      	b.n	8008578 <_reclaim_reent+0x84>
 8008598:	bd70      	pop	{r4, r5, r6, pc}
 800859a:	bf00      	nop
 800859c:	20000078 	.word	0x20000078

080085a0 <__errno>:
 80085a0:	4b01      	ldr	r3, [pc, #4]	; (80085a8 <__errno+0x8>)
 80085a2:	6818      	ldr	r0, [r3, #0]
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	20000078 	.word	0x20000078

080085ac <__libc_init_array>:
 80085ac:	b570      	push	{r4, r5, r6, lr}
 80085ae:	4d0d      	ldr	r5, [pc, #52]	; (80085e4 <__libc_init_array+0x38>)
 80085b0:	4c0d      	ldr	r4, [pc, #52]	; (80085e8 <__libc_init_array+0x3c>)
 80085b2:	1b64      	subs	r4, r4, r5
 80085b4:	10a4      	asrs	r4, r4, #2
 80085b6:	2600      	movs	r6, #0
 80085b8:	42a6      	cmp	r6, r4
 80085ba:	d109      	bne.n	80085d0 <__libc_init_array+0x24>
 80085bc:	4d0b      	ldr	r5, [pc, #44]	; (80085ec <__libc_init_array+0x40>)
 80085be:	4c0c      	ldr	r4, [pc, #48]	; (80085f0 <__libc_init_array+0x44>)
 80085c0:	f002 f91e 	bl	800a800 <_init>
 80085c4:	1b64      	subs	r4, r4, r5
 80085c6:	10a4      	asrs	r4, r4, #2
 80085c8:	2600      	movs	r6, #0
 80085ca:	42a6      	cmp	r6, r4
 80085cc:	d105      	bne.n	80085da <__libc_init_array+0x2e>
 80085ce:	bd70      	pop	{r4, r5, r6, pc}
 80085d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80085d4:	4798      	blx	r3
 80085d6:	3601      	adds	r6, #1
 80085d8:	e7ee      	b.n	80085b8 <__libc_init_array+0xc>
 80085da:	f855 3b04 	ldr.w	r3, [r5], #4
 80085de:	4798      	blx	r3
 80085e0:	3601      	adds	r6, #1
 80085e2:	e7f2      	b.n	80085ca <__libc_init_array+0x1e>
 80085e4:	0800ccdc 	.word	0x0800ccdc
 80085e8:	0800ccdc 	.word	0x0800ccdc
 80085ec:	0800ccdc 	.word	0x0800ccdc
 80085f0:	0800cce0 	.word	0x0800cce0

080085f4 <__retarget_lock_init_recursive>:
 80085f4:	4770      	bx	lr

080085f6 <__retarget_lock_acquire_recursive>:
 80085f6:	4770      	bx	lr

080085f8 <__retarget_lock_release_recursive>:
 80085f8:	4770      	bx	lr

080085fa <memcpy>:
 80085fa:	440a      	add	r2, r1
 80085fc:	4291      	cmp	r1, r2
 80085fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008602:	d100      	bne.n	8008606 <memcpy+0xc>
 8008604:	4770      	bx	lr
 8008606:	b510      	push	{r4, lr}
 8008608:	f811 4b01 	ldrb.w	r4, [r1], #1
 800860c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008610:	4291      	cmp	r1, r2
 8008612:	d1f9      	bne.n	8008608 <memcpy+0xe>
 8008614:	bd10      	pop	{r4, pc}

08008616 <quorem>:
 8008616:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800861a:	6903      	ldr	r3, [r0, #16]
 800861c:	690c      	ldr	r4, [r1, #16]
 800861e:	42a3      	cmp	r3, r4
 8008620:	4607      	mov	r7, r0
 8008622:	db7e      	blt.n	8008722 <quorem+0x10c>
 8008624:	3c01      	subs	r4, #1
 8008626:	f101 0814 	add.w	r8, r1, #20
 800862a:	f100 0514 	add.w	r5, r0, #20
 800862e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008632:	9301      	str	r3, [sp, #4]
 8008634:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008638:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800863c:	3301      	adds	r3, #1
 800863e:	429a      	cmp	r2, r3
 8008640:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008644:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008648:	fbb2 f6f3 	udiv	r6, r2, r3
 800864c:	d331      	bcc.n	80086b2 <quorem+0x9c>
 800864e:	f04f 0e00 	mov.w	lr, #0
 8008652:	4640      	mov	r0, r8
 8008654:	46ac      	mov	ip, r5
 8008656:	46f2      	mov	sl, lr
 8008658:	f850 2b04 	ldr.w	r2, [r0], #4
 800865c:	b293      	uxth	r3, r2
 800865e:	fb06 e303 	mla	r3, r6, r3, lr
 8008662:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008666:	0c1a      	lsrs	r2, r3, #16
 8008668:	b29b      	uxth	r3, r3
 800866a:	ebaa 0303 	sub.w	r3, sl, r3
 800866e:	f8dc a000 	ldr.w	sl, [ip]
 8008672:	fa13 f38a 	uxtah	r3, r3, sl
 8008676:	fb06 220e 	mla	r2, r6, lr, r2
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	9b00      	ldr	r3, [sp, #0]
 800867e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008682:	b292      	uxth	r2, r2
 8008684:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008688:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800868c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008690:	4581      	cmp	r9, r0
 8008692:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008696:	f84c 3b04 	str.w	r3, [ip], #4
 800869a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800869e:	d2db      	bcs.n	8008658 <quorem+0x42>
 80086a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80086a4:	b92b      	cbnz	r3, 80086b2 <quorem+0x9c>
 80086a6:	9b01      	ldr	r3, [sp, #4]
 80086a8:	3b04      	subs	r3, #4
 80086aa:	429d      	cmp	r5, r3
 80086ac:	461a      	mov	r2, r3
 80086ae:	d32c      	bcc.n	800870a <quorem+0xf4>
 80086b0:	613c      	str	r4, [r7, #16]
 80086b2:	4638      	mov	r0, r7
 80086b4:	f001 fbac 	bl	8009e10 <__mcmp>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	db22      	blt.n	8008702 <quorem+0xec>
 80086bc:	3601      	adds	r6, #1
 80086be:	4629      	mov	r1, r5
 80086c0:	2000      	movs	r0, #0
 80086c2:	f858 2b04 	ldr.w	r2, [r8], #4
 80086c6:	f8d1 c000 	ldr.w	ip, [r1]
 80086ca:	b293      	uxth	r3, r2
 80086cc:	1ac3      	subs	r3, r0, r3
 80086ce:	0c12      	lsrs	r2, r2, #16
 80086d0:	fa13 f38c 	uxtah	r3, r3, ip
 80086d4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80086d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80086dc:	b29b      	uxth	r3, r3
 80086de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086e2:	45c1      	cmp	r9, r8
 80086e4:	f841 3b04 	str.w	r3, [r1], #4
 80086e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80086ec:	d2e9      	bcs.n	80086c2 <quorem+0xac>
 80086ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80086f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086f6:	b922      	cbnz	r2, 8008702 <quorem+0xec>
 80086f8:	3b04      	subs	r3, #4
 80086fa:	429d      	cmp	r5, r3
 80086fc:	461a      	mov	r2, r3
 80086fe:	d30a      	bcc.n	8008716 <quorem+0x100>
 8008700:	613c      	str	r4, [r7, #16]
 8008702:	4630      	mov	r0, r6
 8008704:	b003      	add	sp, #12
 8008706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800870a:	6812      	ldr	r2, [r2, #0]
 800870c:	3b04      	subs	r3, #4
 800870e:	2a00      	cmp	r2, #0
 8008710:	d1ce      	bne.n	80086b0 <quorem+0x9a>
 8008712:	3c01      	subs	r4, #1
 8008714:	e7c9      	b.n	80086aa <quorem+0x94>
 8008716:	6812      	ldr	r2, [r2, #0]
 8008718:	3b04      	subs	r3, #4
 800871a:	2a00      	cmp	r2, #0
 800871c:	d1f0      	bne.n	8008700 <quorem+0xea>
 800871e:	3c01      	subs	r4, #1
 8008720:	e7eb      	b.n	80086fa <quorem+0xe4>
 8008722:	2000      	movs	r0, #0
 8008724:	e7ee      	b.n	8008704 <quorem+0xee>
	...

08008728 <_dtoa_r>:
 8008728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800872c:	ed2d 8b04 	vpush	{d8-d9}
 8008730:	69c5      	ldr	r5, [r0, #28]
 8008732:	b093      	sub	sp, #76	; 0x4c
 8008734:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008738:	ec57 6b10 	vmov	r6, r7, d0
 800873c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008740:	9107      	str	r1, [sp, #28]
 8008742:	4604      	mov	r4, r0
 8008744:	920a      	str	r2, [sp, #40]	; 0x28
 8008746:	930d      	str	r3, [sp, #52]	; 0x34
 8008748:	b975      	cbnz	r5, 8008768 <_dtoa_r+0x40>
 800874a:	2010      	movs	r0, #16
 800874c:	f000 ff82 	bl	8009654 <malloc>
 8008750:	4602      	mov	r2, r0
 8008752:	61e0      	str	r0, [r4, #28]
 8008754:	b920      	cbnz	r0, 8008760 <_dtoa_r+0x38>
 8008756:	4bae      	ldr	r3, [pc, #696]	; (8008a10 <_dtoa_r+0x2e8>)
 8008758:	21ef      	movs	r1, #239	; 0xef
 800875a:	48ae      	ldr	r0, [pc, #696]	; (8008a14 <_dtoa_r+0x2ec>)
 800875c:	f001 fd3a 	bl	800a1d4 <__assert_func>
 8008760:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008764:	6005      	str	r5, [r0, #0]
 8008766:	60c5      	str	r5, [r0, #12]
 8008768:	69e3      	ldr	r3, [r4, #28]
 800876a:	6819      	ldr	r1, [r3, #0]
 800876c:	b151      	cbz	r1, 8008784 <_dtoa_r+0x5c>
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	604a      	str	r2, [r1, #4]
 8008772:	2301      	movs	r3, #1
 8008774:	4093      	lsls	r3, r2
 8008776:	608b      	str	r3, [r1, #8]
 8008778:	4620      	mov	r0, r4
 800877a:	f001 f90d 	bl	8009998 <_Bfree>
 800877e:	69e3      	ldr	r3, [r4, #28]
 8008780:	2200      	movs	r2, #0
 8008782:	601a      	str	r2, [r3, #0]
 8008784:	1e3b      	subs	r3, r7, #0
 8008786:	bfbb      	ittet	lt
 8008788:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800878c:	9303      	strlt	r3, [sp, #12]
 800878e:	2300      	movge	r3, #0
 8008790:	2201      	movlt	r2, #1
 8008792:	bfac      	ite	ge
 8008794:	f8c8 3000 	strge.w	r3, [r8]
 8008798:	f8c8 2000 	strlt.w	r2, [r8]
 800879c:	4b9e      	ldr	r3, [pc, #632]	; (8008a18 <_dtoa_r+0x2f0>)
 800879e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80087a2:	ea33 0308 	bics.w	r3, r3, r8
 80087a6:	d11b      	bne.n	80087e0 <_dtoa_r+0xb8>
 80087a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80087ae:	6013      	str	r3, [r2, #0]
 80087b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80087b4:	4333      	orrs	r3, r6
 80087b6:	f000 8593 	beq.w	80092e0 <_dtoa_r+0xbb8>
 80087ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087bc:	b963      	cbnz	r3, 80087d8 <_dtoa_r+0xb0>
 80087be:	4b97      	ldr	r3, [pc, #604]	; (8008a1c <_dtoa_r+0x2f4>)
 80087c0:	e027      	b.n	8008812 <_dtoa_r+0xea>
 80087c2:	4b97      	ldr	r3, [pc, #604]	; (8008a20 <_dtoa_r+0x2f8>)
 80087c4:	9300      	str	r3, [sp, #0]
 80087c6:	3308      	adds	r3, #8
 80087c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80087ca:	6013      	str	r3, [r2, #0]
 80087cc:	9800      	ldr	r0, [sp, #0]
 80087ce:	b013      	add	sp, #76	; 0x4c
 80087d0:	ecbd 8b04 	vpop	{d8-d9}
 80087d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d8:	4b90      	ldr	r3, [pc, #576]	; (8008a1c <_dtoa_r+0x2f4>)
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	3303      	adds	r3, #3
 80087de:	e7f3      	b.n	80087c8 <_dtoa_r+0xa0>
 80087e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80087e4:	2200      	movs	r2, #0
 80087e6:	ec51 0b17 	vmov	r0, r1, d7
 80087ea:	eeb0 8a47 	vmov.f32	s16, s14
 80087ee:	eef0 8a67 	vmov.f32	s17, s15
 80087f2:	2300      	movs	r3, #0
 80087f4:	f7f8 f988 	bl	8000b08 <__aeabi_dcmpeq>
 80087f8:	4681      	mov	r9, r0
 80087fa:	b160      	cbz	r0, 8008816 <_dtoa_r+0xee>
 80087fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087fe:	2301      	movs	r3, #1
 8008800:	6013      	str	r3, [r2, #0]
 8008802:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008804:	2b00      	cmp	r3, #0
 8008806:	f000 8568 	beq.w	80092da <_dtoa_r+0xbb2>
 800880a:	4b86      	ldr	r3, [pc, #536]	; (8008a24 <_dtoa_r+0x2fc>)
 800880c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800880e:	6013      	str	r3, [r2, #0]
 8008810:	3b01      	subs	r3, #1
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	e7da      	b.n	80087cc <_dtoa_r+0xa4>
 8008816:	aa10      	add	r2, sp, #64	; 0x40
 8008818:	a911      	add	r1, sp, #68	; 0x44
 800881a:	4620      	mov	r0, r4
 800881c:	eeb0 0a48 	vmov.f32	s0, s16
 8008820:	eef0 0a68 	vmov.f32	s1, s17
 8008824:	f001 fb9a 	bl	8009f5c <__d2b>
 8008828:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800882c:	4682      	mov	sl, r0
 800882e:	2d00      	cmp	r5, #0
 8008830:	d07f      	beq.n	8008932 <_dtoa_r+0x20a>
 8008832:	ee18 3a90 	vmov	r3, s17
 8008836:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800883a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800883e:	ec51 0b18 	vmov	r0, r1, d8
 8008842:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008846:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800884a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800884e:	4619      	mov	r1, r3
 8008850:	2200      	movs	r2, #0
 8008852:	4b75      	ldr	r3, [pc, #468]	; (8008a28 <_dtoa_r+0x300>)
 8008854:	f7f7 fd38 	bl	80002c8 <__aeabi_dsub>
 8008858:	a367      	add	r3, pc, #412	; (adr r3, 80089f8 <_dtoa_r+0x2d0>)
 800885a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885e:	f7f7 feeb 	bl	8000638 <__aeabi_dmul>
 8008862:	a367      	add	r3, pc, #412	; (adr r3, 8008a00 <_dtoa_r+0x2d8>)
 8008864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008868:	f7f7 fd30 	bl	80002cc <__adddf3>
 800886c:	4606      	mov	r6, r0
 800886e:	4628      	mov	r0, r5
 8008870:	460f      	mov	r7, r1
 8008872:	f7f7 fe77 	bl	8000564 <__aeabi_i2d>
 8008876:	a364      	add	r3, pc, #400	; (adr r3, 8008a08 <_dtoa_r+0x2e0>)
 8008878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887c:	f7f7 fedc 	bl	8000638 <__aeabi_dmul>
 8008880:	4602      	mov	r2, r0
 8008882:	460b      	mov	r3, r1
 8008884:	4630      	mov	r0, r6
 8008886:	4639      	mov	r1, r7
 8008888:	f7f7 fd20 	bl	80002cc <__adddf3>
 800888c:	4606      	mov	r6, r0
 800888e:	460f      	mov	r7, r1
 8008890:	f7f8 f982 	bl	8000b98 <__aeabi_d2iz>
 8008894:	2200      	movs	r2, #0
 8008896:	4683      	mov	fp, r0
 8008898:	2300      	movs	r3, #0
 800889a:	4630      	mov	r0, r6
 800889c:	4639      	mov	r1, r7
 800889e:	f7f8 f93d 	bl	8000b1c <__aeabi_dcmplt>
 80088a2:	b148      	cbz	r0, 80088b8 <_dtoa_r+0x190>
 80088a4:	4658      	mov	r0, fp
 80088a6:	f7f7 fe5d 	bl	8000564 <__aeabi_i2d>
 80088aa:	4632      	mov	r2, r6
 80088ac:	463b      	mov	r3, r7
 80088ae:	f7f8 f92b 	bl	8000b08 <__aeabi_dcmpeq>
 80088b2:	b908      	cbnz	r0, 80088b8 <_dtoa_r+0x190>
 80088b4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80088b8:	f1bb 0f16 	cmp.w	fp, #22
 80088bc:	d857      	bhi.n	800896e <_dtoa_r+0x246>
 80088be:	4b5b      	ldr	r3, [pc, #364]	; (8008a2c <_dtoa_r+0x304>)
 80088c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80088c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c8:	ec51 0b18 	vmov	r0, r1, d8
 80088cc:	f7f8 f926 	bl	8000b1c <__aeabi_dcmplt>
 80088d0:	2800      	cmp	r0, #0
 80088d2:	d04e      	beq.n	8008972 <_dtoa_r+0x24a>
 80088d4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80088d8:	2300      	movs	r3, #0
 80088da:	930c      	str	r3, [sp, #48]	; 0x30
 80088dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088de:	1b5b      	subs	r3, r3, r5
 80088e0:	1e5a      	subs	r2, r3, #1
 80088e2:	bf45      	ittet	mi
 80088e4:	f1c3 0301 	rsbmi	r3, r3, #1
 80088e8:	9305      	strmi	r3, [sp, #20]
 80088ea:	2300      	movpl	r3, #0
 80088ec:	2300      	movmi	r3, #0
 80088ee:	9206      	str	r2, [sp, #24]
 80088f0:	bf54      	ite	pl
 80088f2:	9305      	strpl	r3, [sp, #20]
 80088f4:	9306      	strmi	r3, [sp, #24]
 80088f6:	f1bb 0f00 	cmp.w	fp, #0
 80088fa:	db3c      	blt.n	8008976 <_dtoa_r+0x24e>
 80088fc:	9b06      	ldr	r3, [sp, #24]
 80088fe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008902:	445b      	add	r3, fp
 8008904:	9306      	str	r3, [sp, #24]
 8008906:	2300      	movs	r3, #0
 8008908:	9308      	str	r3, [sp, #32]
 800890a:	9b07      	ldr	r3, [sp, #28]
 800890c:	2b09      	cmp	r3, #9
 800890e:	d868      	bhi.n	80089e2 <_dtoa_r+0x2ba>
 8008910:	2b05      	cmp	r3, #5
 8008912:	bfc4      	itt	gt
 8008914:	3b04      	subgt	r3, #4
 8008916:	9307      	strgt	r3, [sp, #28]
 8008918:	9b07      	ldr	r3, [sp, #28]
 800891a:	f1a3 0302 	sub.w	r3, r3, #2
 800891e:	bfcc      	ite	gt
 8008920:	2500      	movgt	r5, #0
 8008922:	2501      	movle	r5, #1
 8008924:	2b03      	cmp	r3, #3
 8008926:	f200 8085 	bhi.w	8008a34 <_dtoa_r+0x30c>
 800892a:	e8df f003 	tbb	[pc, r3]
 800892e:	3b2e      	.short	0x3b2e
 8008930:	5839      	.short	0x5839
 8008932:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008936:	441d      	add	r5, r3
 8008938:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800893c:	2b20      	cmp	r3, #32
 800893e:	bfc1      	itttt	gt
 8008940:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008944:	fa08 f803 	lslgt.w	r8, r8, r3
 8008948:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800894c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008950:	bfd6      	itet	le
 8008952:	f1c3 0320 	rsble	r3, r3, #32
 8008956:	ea48 0003 	orrgt.w	r0, r8, r3
 800895a:	fa06 f003 	lslle.w	r0, r6, r3
 800895e:	f7f7 fdf1 	bl	8000544 <__aeabi_ui2d>
 8008962:	2201      	movs	r2, #1
 8008964:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008968:	3d01      	subs	r5, #1
 800896a:	920e      	str	r2, [sp, #56]	; 0x38
 800896c:	e76f      	b.n	800884e <_dtoa_r+0x126>
 800896e:	2301      	movs	r3, #1
 8008970:	e7b3      	b.n	80088da <_dtoa_r+0x1b2>
 8008972:	900c      	str	r0, [sp, #48]	; 0x30
 8008974:	e7b2      	b.n	80088dc <_dtoa_r+0x1b4>
 8008976:	9b05      	ldr	r3, [sp, #20]
 8008978:	eba3 030b 	sub.w	r3, r3, fp
 800897c:	9305      	str	r3, [sp, #20]
 800897e:	f1cb 0300 	rsb	r3, fp, #0
 8008982:	9308      	str	r3, [sp, #32]
 8008984:	2300      	movs	r3, #0
 8008986:	930b      	str	r3, [sp, #44]	; 0x2c
 8008988:	e7bf      	b.n	800890a <_dtoa_r+0x1e2>
 800898a:	2300      	movs	r3, #0
 800898c:	9309      	str	r3, [sp, #36]	; 0x24
 800898e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008990:	2b00      	cmp	r3, #0
 8008992:	dc52      	bgt.n	8008a3a <_dtoa_r+0x312>
 8008994:	2301      	movs	r3, #1
 8008996:	9301      	str	r3, [sp, #4]
 8008998:	9304      	str	r3, [sp, #16]
 800899a:	461a      	mov	r2, r3
 800899c:	920a      	str	r2, [sp, #40]	; 0x28
 800899e:	e00b      	b.n	80089b8 <_dtoa_r+0x290>
 80089a0:	2301      	movs	r3, #1
 80089a2:	e7f3      	b.n	800898c <_dtoa_r+0x264>
 80089a4:	2300      	movs	r3, #0
 80089a6:	9309      	str	r3, [sp, #36]	; 0x24
 80089a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089aa:	445b      	add	r3, fp
 80089ac:	9301      	str	r3, [sp, #4]
 80089ae:	3301      	adds	r3, #1
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	9304      	str	r3, [sp, #16]
 80089b4:	bfb8      	it	lt
 80089b6:	2301      	movlt	r3, #1
 80089b8:	69e0      	ldr	r0, [r4, #28]
 80089ba:	2100      	movs	r1, #0
 80089bc:	2204      	movs	r2, #4
 80089be:	f102 0614 	add.w	r6, r2, #20
 80089c2:	429e      	cmp	r6, r3
 80089c4:	d93d      	bls.n	8008a42 <_dtoa_r+0x31a>
 80089c6:	6041      	str	r1, [r0, #4]
 80089c8:	4620      	mov	r0, r4
 80089ca:	f000 ffa5 	bl	8009918 <_Balloc>
 80089ce:	9000      	str	r0, [sp, #0]
 80089d0:	2800      	cmp	r0, #0
 80089d2:	d139      	bne.n	8008a48 <_dtoa_r+0x320>
 80089d4:	4b16      	ldr	r3, [pc, #88]	; (8008a30 <_dtoa_r+0x308>)
 80089d6:	4602      	mov	r2, r0
 80089d8:	f240 11af 	movw	r1, #431	; 0x1af
 80089dc:	e6bd      	b.n	800875a <_dtoa_r+0x32>
 80089de:	2301      	movs	r3, #1
 80089e0:	e7e1      	b.n	80089a6 <_dtoa_r+0x27e>
 80089e2:	2501      	movs	r5, #1
 80089e4:	2300      	movs	r3, #0
 80089e6:	9307      	str	r3, [sp, #28]
 80089e8:	9509      	str	r5, [sp, #36]	; 0x24
 80089ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089ee:	9301      	str	r3, [sp, #4]
 80089f0:	9304      	str	r3, [sp, #16]
 80089f2:	2200      	movs	r2, #0
 80089f4:	2312      	movs	r3, #18
 80089f6:	e7d1      	b.n	800899c <_dtoa_r+0x274>
 80089f8:	636f4361 	.word	0x636f4361
 80089fc:	3fd287a7 	.word	0x3fd287a7
 8008a00:	8b60c8b3 	.word	0x8b60c8b3
 8008a04:	3fc68a28 	.word	0x3fc68a28
 8008a08:	509f79fb 	.word	0x509f79fb
 8008a0c:	3fd34413 	.word	0x3fd34413
 8008a10:	0800c9a5 	.word	0x0800c9a5
 8008a14:	0800c9bc 	.word	0x0800c9bc
 8008a18:	7ff00000 	.word	0x7ff00000
 8008a1c:	0800c9a1 	.word	0x0800c9a1
 8008a20:	0800c998 	.word	0x0800c998
 8008a24:	0800c975 	.word	0x0800c975
 8008a28:	3ff80000 	.word	0x3ff80000
 8008a2c:	0800cab8 	.word	0x0800cab8
 8008a30:	0800ca14 	.word	0x0800ca14
 8008a34:	2301      	movs	r3, #1
 8008a36:	9309      	str	r3, [sp, #36]	; 0x24
 8008a38:	e7d7      	b.n	80089ea <_dtoa_r+0x2c2>
 8008a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a3c:	9301      	str	r3, [sp, #4]
 8008a3e:	9304      	str	r3, [sp, #16]
 8008a40:	e7ba      	b.n	80089b8 <_dtoa_r+0x290>
 8008a42:	3101      	adds	r1, #1
 8008a44:	0052      	lsls	r2, r2, #1
 8008a46:	e7ba      	b.n	80089be <_dtoa_r+0x296>
 8008a48:	69e3      	ldr	r3, [r4, #28]
 8008a4a:	9a00      	ldr	r2, [sp, #0]
 8008a4c:	601a      	str	r2, [r3, #0]
 8008a4e:	9b04      	ldr	r3, [sp, #16]
 8008a50:	2b0e      	cmp	r3, #14
 8008a52:	f200 80a8 	bhi.w	8008ba6 <_dtoa_r+0x47e>
 8008a56:	2d00      	cmp	r5, #0
 8008a58:	f000 80a5 	beq.w	8008ba6 <_dtoa_r+0x47e>
 8008a5c:	f1bb 0f00 	cmp.w	fp, #0
 8008a60:	dd38      	ble.n	8008ad4 <_dtoa_r+0x3ac>
 8008a62:	4bc0      	ldr	r3, [pc, #768]	; (8008d64 <_dtoa_r+0x63c>)
 8008a64:	f00b 020f 	and.w	r2, fp, #15
 8008a68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a6c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008a70:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008a74:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008a78:	d019      	beq.n	8008aae <_dtoa_r+0x386>
 8008a7a:	4bbb      	ldr	r3, [pc, #748]	; (8008d68 <_dtoa_r+0x640>)
 8008a7c:	ec51 0b18 	vmov	r0, r1, d8
 8008a80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a84:	f7f7 ff02 	bl	800088c <__aeabi_ddiv>
 8008a88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a8c:	f008 080f 	and.w	r8, r8, #15
 8008a90:	2503      	movs	r5, #3
 8008a92:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008d68 <_dtoa_r+0x640>
 8008a96:	f1b8 0f00 	cmp.w	r8, #0
 8008a9a:	d10a      	bne.n	8008ab2 <_dtoa_r+0x38a>
 8008a9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aa0:	4632      	mov	r2, r6
 8008aa2:	463b      	mov	r3, r7
 8008aa4:	f7f7 fef2 	bl	800088c <__aeabi_ddiv>
 8008aa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008aac:	e02b      	b.n	8008b06 <_dtoa_r+0x3de>
 8008aae:	2502      	movs	r5, #2
 8008ab0:	e7ef      	b.n	8008a92 <_dtoa_r+0x36a>
 8008ab2:	f018 0f01 	tst.w	r8, #1
 8008ab6:	d008      	beq.n	8008aca <_dtoa_r+0x3a2>
 8008ab8:	4630      	mov	r0, r6
 8008aba:	4639      	mov	r1, r7
 8008abc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008ac0:	f7f7 fdba 	bl	8000638 <__aeabi_dmul>
 8008ac4:	3501      	adds	r5, #1
 8008ac6:	4606      	mov	r6, r0
 8008ac8:	460f      	mov	r7, r1
 8008aca:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008ace:	f109 0908 	add.w	r9, r9, #8
 8008ad2:	e7e0      	b.n	8008a96 <_dtoa_r+0x36e>
 8008ad4:	f000 809f 	beq.w	8008c16 <_dtoa_r+0x4ee>
 8008ad8:	f1cb 0600 	rsb	r6, fp, #0
 8008adc:	4ba1      	ldr	r3, [pc, #644]	; (8008d64 <_dtoa_r+0x63c>)
 8008ade:	4fa2      	ldr	r7, [pc, #648]	; (8008d68 <_dtoa_r+0x640>)
 8008ae0:	f006 020f 	and.w	r2, r6, #15
 8008ae4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aec:	ec51 0b18 	vmov	r0, r1, d8
 8008af0:	f7f7 fda2 	bl	8000638 <__aeabi_dmul>
 8008af4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008af8:	1136      	asrs	r6, r6, #4
 8008afa:	2300      	movs	r3, #0
 8008afc:	2502      	movs	r5, #2
 8008afe:	2e00      	cmp	r6, #0
 8008b00:	d17e      	bne.n	8008c00 <_dtoa_r+0x4d8>
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1d0      	bne.n	8008aa8 <_dtoa_r+0x380>
 8008b06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b08:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f000 8084 	beq.w	8008c1a <_dtoa_r+0x4f2>
 8008b12:	4b96      	ldr	r3, [pc, #600]	; (8008d6c <_dtoa_r+0x644>)
 8008b14:	2200      	movs	r2, #0
 8008b16:	4640      	mov	r0, r8
 8008b18:	4649      	mov	r1, r9
 8008b1a:	f7f7 ffff 	bl	8000b1c <__aeabi_dcmplt>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	d07b      	beq.n	8008c1a <_dtoa_r+0x4f2>
 8008b22:	9b04      	ldr	r3, [sp, #16]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d078      	beq.n	8008c1a <_dtoa_r+0x4f2>
 8008b28:	9b01      	ldr	r3, [sp, #4]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	dd39      	ble.n	8008ba2 <_dtoa_r+0x47a>
 8008b2e:	4b90      	ldr	r3, [pc, #576]	; (8008d70 <_dtoa_r+0x648>)
 8008b30:	2200      	movs	r2, #0
 8008b32:	4640      	mov	r0, r8
 8008b34:	4649      	mov	r1, r9
 8008b36:	f7f7 fd7f 	bl	8000638 <__aeabi_dmul>
 8008b3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b3e:	9e01      	ldr	r6, [sp, #4]
 8008b40:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8008b44:	3501      	adds	r5, #1
 8008b46:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	f7f7 fd0a 	bl	8000564 <__aeabi_i2d>
 8008b50:	4642      	mov	r2, r8
 8008b52:	464b      	mov	r3, r9
 8008b54:	f7f7 fd70 	bl	8000638 <__aeabi_dmul>
 8008b58:	4b86      	ldr	r3, [pc, #536]	; (8008d74 <_dtoa_r+0x64c>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f7f7 fbb6 	bl	80002cc <__adddf3>
 8008b60:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008b64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b68:	9303      	str	r3, [sp, #12]
 8008b6a:	2e00      	cmp	r6, #0
 8008b6c:	d158      	bne.n	8008c20 <_dtoa_r+0x4f8>
 8008b6e:	4b82      	ldr	r3, [pc, #520]	; (8008d78 <_dtoa_r+0x650>)
 8008b70:	2200      	movs	r2, #0
 8008b72:	4640      	mov	r0, r8
 8008b74:	4649      	mov	r1, r9
 8008b76:	f7f7 fba7 	bl	80002c8 <__aeabi_dsub>
 8008b7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b7e:	4680      	mov	r8, r0
 8008b80:	4689      	mov	r9, r1
 8008b82:	f7f7 ffe9 	bl	8000b58 <__aeabi_dcmpgt>
 8008b86:	2800      	cmp	r0, #0
 8008b88:	f040 8296 	bne.w	80090b8 <_dtoa_r+0x990>
 8008b8c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008b90:	4640      	mov	r0, r8
 8008b92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b96:	4649      	mov	r1, r9
 8008b98:	f7f7 ffc0 	bl	8000b1c <__aeabi_dcmplt>
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	f040 8289 	bne.w	80090b4 <_dtoa_r+0x98c>
 8008ba2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008ba6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f2c0 814e 	blt.w	8008e4a <_dtoa_r+0x722>
 8008bae:	f1bb 0f0e 	cmp.w	fp, #14
 8008bb2:	f300 814a 	bgt.w	8008e4a <_dtoa_r+0x722>
 8008bb6:	4b6b      	ldr	r3, [pc, #428]	; (8008d64 <_dtoa_r+0x63c>)
 8008bb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008bbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f280 80dc 	bge.w	8008d80 <_dtoa_r+0x658>
 8008bc8:	9b04      	ldr	r3, [sp, #16]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f300 80d8 	bgt.w	8008d80 <_dtoa_r+0x658>
 8008bd0:	f040 826f 	bne.w	80090b2 <_dtoa_r+0x98a>
 8008bd4:	4b68      	ldr	r3, [pc, #416]	; (8008d78 <_dtoa_r+0x650>)
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	4640      	mov	r0, r8
 8008bda:	4649      	mov	r1, r9
 8008bdc:	f7f7 fd2c 	bl	8000638 <__aeabi_dmul>
 8008be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008be4:	f7f7 ffae 	bl	8000b44 <__aeabi_dcmpge>
 8008be8:	9e04      	ldr	r6, [sp, #16]
 8008bea:	4637      	mov	r7, r6
 8008bec:	2800      	cmp	r0, #0
 8008bee:	f040 8245 	bne.w	800907c <_dtoa_r+0x954>
 8008bf2:	9d00      	ldr	r5, [sp, #0]
 8008bf4:	2331      	movs	r3, #49	; 0x31
 8008bf6:	f805 3b01 	strb.w	r3, [r5], #1
 8008bfa:	f10b 0b01 	add.w	fp, fp, #1
 8008bfe:	e241      	b.n	8009084 <_dtoa_r+0x95c>
 8008c00:	07f2      	lsls	r2, r6, #31
 8008c02:	d505      	bpl.n	8008c10 <_dtoa_r+0x4e8>
 8008c04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c08:	f7f7 fd16 	bl	8000638 <__aeabi_dmul>
 8008c0c:	3501      	adds	r5, #1
 8008c0e:	2301      	movs	r3, #1
 8008c10:	1076      	asrs	r6, r6, #1
 8008c12:	3708      	adds	r7, #8
 8008c14:	e773      	b.n	8008afe <_dtoa_r+0x3d6>
 8008c16:	2502      	movs	r5, #2
 8008c18:	e775      	b.n	8008b06 <_dtoa_r+0x3de>
 8008c1a:	9e04      	ldr	r6, [sp, #16]
 8008c1c:	465f      	mov	r7, fp
 8008c1e:	e792      	b.n	8008b46 <_dtoa_r+0x41e>
 8008c20:	9900      	ldr	r1, [sp, #0]
 8008c22:	4b50      	ldr	r3, [pc, #320]	; (8008d64 <_dtoa_r+0x63c>)
 8008c24:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c28:	4431      	add	r1, r6
 8008c2a:	9102      	str	r1, [sp, #8]
 8008c2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c2e:	eeb0 9a47 	vmov.f32	s18, s14
 8008c32:	eef0 9a67 	vmov.f32	s19, s15
 8008c36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008c3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008c3e:	2900      	cmp	r1, #0
 8008c40:	d044      	beq.n	8008ccc <_dtoa_r+0x5a4>
 8008c42:	494e      	ldr	r1, [pc, #312]	; (8008d7c <_dtoa_r+0x654>)
 8008c44:	2000      	movs	r0, #0
 8008c46:	f7f7 fe21 	bl	800088c <__aeabi_ddiv>
 8008c4a:	ec53 2b19 	vmov	r2, r3, d9
 8008c4e:	f7f7 fb3b 	bl	80002c8 <__aeabi_dsub>
 8008c52:	9d00      	ldr	r5, [sp, #0]
 8008c54:	ec41 0b19 	vmov	d9, r0, r1
 8008c58:	4649      	mov	r1, r9
 8008c5a:	4640      	mov	r0, r8
 8008c5c:	f7f7 ff9c 	bl	8000b98 <__aeabi_d2iz>
 8008c60:	4606      	mov	r6, r0
 8008c62:	f7f7 fc7f 	bl	8000564 <__aeabi_i2d>
 8008c66:	4602      	mov	r2, r0
 8008c68:	460b      	mov	r3, r1
 8008c6a:	4640      	mov	r0, r8
 8008c6c:	4649      	mov	r1, r9
 8008c6e:	f7f7 fb2b 	bl	80002c8 <__aeabi_dsub>
 8008c72:	3630      	adds	r6, #48	; 0x30
 8008c74:	f805 6b01 	strb.w	r6, [r5], #1
 8008c78:	ec53 2b19 	vmov	r2, r3, d9
 8008c7c:	4680      	mov	r8, r0
 8008c7e:	4689      	mov	r9, r1
 8008c80:	f7f7 ff4c 	bl	8000b1c <__aeabi_dcmplt>
 8008c84:	2800      	cmp	r0, #0
 8008c86:	d164      	bne.n	8008d52 <_dtoa_r+0x62a>
 8008c88:	4642      	mov	r2, r8
 8008c8a:	464b      	mov	r3, r9
 8008c8c:	4937      	ldr	r1, [pc, #220]	; (8008d6c <_dtoa_r+0x644>)
 8008c8e:	2000      	movs	r0, #0
 8008c90:	f7f7 fb1a 	bl	80002c8 <__aeabi_dsub>
 8008c94:	ec53 2b19 	vmov	r2, r3, d9
 8008c98:	f7f7 ff40 	bl	8000b1c <__aeabi_dcmplt>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	f040 80b6 	bne.w	8008e0e <_dtoa_r+0x6e6>
 8008ca2:	9b02      	ldr	r3, [sp, #8]
 8008ca4:	429d      	cmp	r5, r3
 8008ca6:	f43f af7c 	beq.w	8008ba2 <_dtoa_r+0x47a>
 8008caa:	4b31      	ldr	r3, [pc, #196]	; (8008d70 <_dtoa_r+0x648>)
 8008cac:	ec51 0b19 	vmov	r0, r1, d9
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f7f7 fcc1 	bl	8000638 <__aeabi_dmul>
 8008cb6:	4b2e      	ldr	r3, [pc, #184]	; (8008d70 <_dtoa_r+0x648>)
 8008cb8:	ec41 0b19 	vmov	d9, r0, r1
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	4640      	mov	r0, r8
 8008cc0:	4649      	mov	r1, r9
 8008cc2:	f7f7 fcb9 	bl	8000638 <__aeabi_dmul>
 8008cc6:	4680      	mov	r8, r0
 8008cc8:	4689      	mov	r9, r1
 8008cca:	e7c5      	b.n	8008c58 <_dtoa_r+0x530>
 8008ccc:	ec51 0b17 	vmov	r0, r1, d7
 8008cd0:	f7f7 fcb2 	bl	8000638 <__aeabi_dmul>
 8008cd4:	9b02      	ldr	r3, [sp, #8]
 8008cd6:	9d00      	ldr	r5, [sp, #0]
 8008cd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008cda:	ec41 0b19 	vmov	d9, r0, r1
 8008cde:	4649      	mov	r1, r9
 8008ce0:	4640      	mov	r0, r8
 8008ce2:	f7f7 ff59 	bl	8000b98 <__aeabi_d2iz>
 8008ce6:	4606      	mov	r6, r0
 8008ce8:	f7f7 fc3c 	bl	8000564 <__aeabi_i2d>
 8008cec:	3630      	adds	r6, #48	; 0x30
 8008cee:	4602      	mov	r2, r0
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	4640      	mov	r0, r8
 8008cf4:	4649      	mov	r1, r9
 8008cf6:	f7f7 fae7 	bl	80002c8 <__aeabi_dsub>
 8008cfa:	f805 6b01 	strb.w	r6, [r5], #1
 8008cfe:	9b02      	ldr	r3, [sp, #8]
 8008d00:	429d      	cmp	r5, r3
 8008d02:	4680      	mov	r8, r0
 8008d04:	4689      	mov	r9, r1
 8008d06:	f04f 0200 	mov.w	r2, #0
 8008d0a:	d124      	bne.n	8008d56 <_dtoa_r+0x62e>
 8008d0c:	4b1b      	ldr	r3, [pc, #108]	; (8008d7c <_dtoa_r+0x654>)
 8008d0e:	ec51 0b19 	vmov	r0, r1, d9
 8008d12:	f7f7 fadb 	bl	80002cc <__adddf3>
 8008d16:	4602      	mov	r2, r0
 8008d18:	460b      	mov	r3, r1
 8008d1a:	4640      	mov	r0, r8
 8008d1c:	4649      	mov	r1, r9
 8008d1e:	f7f7 ff1b 	bl	8000b58 <__aeabi_dcmpgt>
 8008d22:	2800      	cmp	r0, #0
 8008d24:	d173      	bne.n	8008e0e <_dtoa_r+0x6e6>
 8008d26:	ec53 2b19 	vmov	r2, r3, d9
 8008d2a:	4914      	ldr	r1, [pc, #80]	; (8008d7c <_dtoa_r+0x654>)
 8008d2c:	2000      	movs	r0, #0
 8008d2e:	f7f7 facb 	bl	80002c8 <__aeabi_dsub>
 8008d32:	4602      	mov	r2, r0
 8008d34:	460b      	mov	r3, r1
 8008d36:	4640      	mov	r0, r8
 8008d38:	4649      	mov	r1, r9
 8008d3a:	f7f7 feef 	bl	8000b1c <__aeabi_dcmplt>
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	f43f af2f 	beq.w	8008ba2 <_dtoa_r+0x47a>
 8008d44:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008d46:	1e6b      	subs	r3, r5, #1
 8008d48:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008d4e:	2b30      	cmp	r3, #48	; 0x30
 8008d50:	d0f8      	beq.n	8008d44 <_dtoa_r+0x61c>
 8008d52:	46bb      	mov	fp, r7
 8008d54:	e04a      	b.n	8008dec <_dtoa_r+0x6c4>
 8008d56:	4b06      	ldr	r3, [pc, #24]	; (8008d70 <_dtoa_r+0x648>)
 8008d58:	f7f7 fc6e 	bl	8000638 <__aeabi_dmul>
 8008d5c:	4680      	mov	r8, r0
 8008d5e:	4689      	mov	r9, r1
 8008d60:	e7bd      	b.n	8008cde <_dtoa_r+0x5b6>
 8008d62:	bf00      	nop
 8008d64:	0800cab8 	.word	0x0800cab8
 8008d68:	0800ca90 	.word	0x0800ca90
 8008d6c:	3ff00000 	.word	0x3ff00000
 8008d70:	40240000 	.word	0x40240000
 8008d74:	401c0000 	.word	0x401c0000
 8008d78:	40140000 	.word	0x40140000
 8008d7c:	3fe00000 	.word	0x3fe00000
 8008d80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008d84:	9d00      	ldr	r5, [sp, #0]
 8008d86:	4642      	mov	r2, r8
 8008d88:	464b      	mov	r3, r9
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	4639      	mov	r1, r7
 8008d8e:	f7f7 fd7d 	bl	800088c <__aeabi_ddiv>
 8008d92:	f7f7 ff01 	bl	8000b98 <__aeabi_d2iz>
 8008d96:	9001      	str	r0, [sp, #4]
 8008d98:	f7f7 fbe4 	bl	8000564 <__aeabi_i2d>
 8008d9c:	4642      	mov	r2, r8
 8008d9e:	464b      	mov	r3, r9
 8008da0:	f7f7 fc4a 	bl	8000638 <__aeabi_dmul>
 8008da4:	4602      	mov	r2, r0
 8008da6:	460b      	mov	r3, r1
 8008da8:	4630      	mov	r0, r6
 8008daa:	4639      	mov	r1, r7
 8008dac:	f7f7 fa8c 	bl	80002c8 <__aeabi_dsub>
 8008db0:	9e01      	ldr	r6, [sp, #4]
 8008db2:	9f04      	ldr	r7, [sp, #16]
 8008db4:	3630      	adds	r6, #48	; 0x30
 8008db6:	f805 6b01 	strb.w	r6, [r5], #1
 8008dba:	9e00      	ldr	r6, [sp, #0]
 8008dbc:	1bae      	subs	r6, r5, r6
 8008dbe:	42b7      	cmp	r7, r6
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	d134      	bne.n	8008e30 <_dtoa_r+0x708>
 8008dc6:	f7f7 fa81 	bl	80002cc <__adddf3>
 8008dca:	4642      	mov	r2, r8
 8008dcc:	464b      	mov	r3, r9
 8008dce:	4606      	mov	r6, r0
 8008dd0:	460f      	mov	r7, r1
 8008dd2:	f7f7 fec1 	bl	8000b58 <__aeabi_dcmpgt>
 8008dd6:	b9c8      	cbnz	r0, 8008e0c <_dtoa_r+0x6e4>
 8008dd8:	4642      	mov	r2, r8
 8008dda:	464b      	mov	r3, r9
 8008ddc:	4630      	mov	r0, r6
 8008dde:	4639      	mov	r1, r7
 8008de0:	f7f7 fe92 	bl	8000b08 <__aeabi_dcmpeq>
 8008de4:	b110      	cbz	r0, 8008dec <_dtoa_r+0x6c4>
 8008de6:	9b01      	ldr	r3, [sp, #4]
 8008de8:	07db      	lsls	r3, r3, #31
 8008dea:	d40f      	bmi.n	8008e0c <_dtoa_r+0x6e4>
 8008dec:	4651      	mov	r1, sl
 8008dee:	4620      	mov	r0, r4
 8008df0:	f000 fdd2 	bl	8009998 <_Bfree>
 8008df4:	2300      	movs	r3, #0
 8008df6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008df8:	702b      	strb	r3, [r5, #0]
 8008dfa:	f10b 0301 	add.w	r3, fp, #1
 8008dfe:	6013      	str	r3, [r2, #0]
 8008e00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f43f ace2 	beq.w	80087cc <_dtoa_r+0xa4>
 8008e08:	601d      	str	r5, [r3, #0]
 8008e0a:	e4df      	b.n	80087cc <_dtoa_r+0xa4>
 8008e0c:	465f      	mov	r7, fp
 8008e0e:	462b      	mov	r3, r5
 8008e10:	461d      	mov	r5, r3
 8008e12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e16:	2a39      	cmp	r2, #57	; 0x39
 8008e18:	d106      	bne.n	8008e28 <_dtoa_r+0x700>
 8008e1a:	9a00      	ldr	r2, [sp, #0]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d1f7      	bne.n	8008e10 <_dtoa_r+0x6e8>
 8008e20:	9900      	ldr	r1, [sp, #0]
 8008e22:	2230      	movs	r2, #48	; 0x30
 8008e24:	3701      	adds	r7, #1
 8008e26:	700a      	strb	r2, [r1, #0]
 8008e28:	781a      	ldrb	r2, [r3, #0]
 8008e2a:	3201      	adds	r2, #1
 8008e2c:	701a      	strb	r2, [r3, #0]
 8008e2e:	e790      	b.n	8008d52 <_dtoa_r+0x62a>
 8008e30:	4ba3      	ldr	r3, [pc, #652]	; (80090c0 <_dtoa_r+0x998>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	f7f7 fc00 	bl	8000638 <__aeabi_dmul>
 8008e38:	2200      	movs	r2, #0
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	4606      	mov	r6, r0
 8008e3e:	460f      	mov	r7, r1
 8008e40:	f7f7 fe62 	bl	8000b08 <__aeabi_dcmpeq>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d09e      	beq.n	8008d86 <_dtoa_r+0x65e>
 8008e48:	e7d0      	b.n	8008dec <_dtoa_r+0x6c4>
 8008e4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e4c:	2a00      	cmp	r2, #0
 8008e4e:	f000 80ca 	beq.w	8008fe6 <_dtoa_r+0x8be>
 8008e52:	9a07      	ldr	r2, [sp, #28]
 8008e54:	2a01      	cmp	r2, #1
 8008e56:	f300 80ad 	bgt.w	8008fb4 <_dtoa_r+0x88c>
 8008e5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e5c:	2a00      	cmp	r2, #0
 8008e5e:	f000 80a5 	beq.w	8008fac <_dtoa_r+0x884>
 8008e62:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008e66:	9e08      	ldr	r6, [sp, #32]
 8008e68:	9d05      	ldr	r5, [sp, #20]
 8008e6a:	9a05      	ldr	r2, [sp, #20]
 8008e6c:	441a      	add	r2, r3
 8008e6e:	9205      	str	r2, [sp, #20]
 8008e70:	9a06      	ldr	r2, [sp, #24]
 8008e72:	2101      	movs	r1, #1
 8008e74:	441a      	add	r2, r3
 8008e76:	4620      	mov	r0, r4
 8008e78:	9206      	str	r2, [sp, #24]
 8008e7a:	f000 fe43 	bl	8009b04 <__i2b>
 8008e7e:	4607      	mov	r7, r0
 8008e80:	b165      	cbz	r5, 8008e9c <_dtoa_r+0x774>
 8008e82:	9b06      	ldr	r3, [sp, #24]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	dd09      	ble.n	8008e9c <_dtoa_r+0x774>
 8008e88:	42ab      	cmp	r3, r5
 8008e8a:	9a05      	ldr	r2, [sp, #20]
 8008e8c:	bfa8      	it	ge
 8008e8e:	462b      	movge	r3, r5
 8008e90:	1ad2      	subs	r2, r2, r3
 8008e92:	9205      	str	r2, [sp, #20]
 8008e94:	9a06      	ldr	r2, [sp, #24]
 8008e96:	1aed      	subs	r5, r5, r3
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	9306      	str	r3, [sp, #24]
 8008e9c:	9b08      	ldr	r3, [sp, #32]
 8008e9e:	b1f3      	cbz	r3, 8008ede <_dtoa_r+0x7b6>
 8008ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f000 80a3 	beq.w	8008fee <_dtoa_r+0x8c6>
 8008ea8:	2e00      	cmp	r6, #0
 8008eaa:	dd10      	ble.n	8008ece <_dtoa_r+0x7a6>
 8008eac:	4639      	mov	r1, r7
 8008eae:	4632      	mov	r2, r6
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	f000 fee7 	bl	8009c84 <__pow5mult>
 8008eb6:	4652      	mov	r2, sl
 8008eb8:	4601      	mov	r1, r0
 8008eba:	4607      	mov	r7, r0
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	f000 fe37 	bl	8009b30 <__multiply>
 8008ec2:	4651      	mov	r1, sl
 8008ec4:	4680      	mov	r8, r0
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	f000 fd66 	bl	8009998 <_Bfree>
 8008ecc:	46c2      	mov	sl, r8
 8008ece:	9b08      	ldr	r3, [sp, #32]
 8008ed0:	1b9a      	subs	r2, r3, r6
 8008ed2:	d004      	beq.n	8008ede <_dtoa_r+0x7b6>
 8008ed4:	4651      	mov	r1, sl
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	f000 fed4 	bl	8009c84 <__pow5mult>
 8008edc:	4682      	mov	sl, r0
 8008ede:	2101      	movs	r1, #1
 8008ee0:	4620      	mov	r0, r4
 8008ee2:	f000 fe0f 	bl	8009b04 <__i2b>
 8008ee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	4606      	mov	r6, r0
 8008eec:	f340 8081 	ble.w	8008ff2 <_dtoa_r+0x8ca>
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	4601      	mov	r1, r0
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	f000 fec5 	bl	8009c84 <__pow5mult>
 8008efa:	9b07      	ldr	r3, [sp, #28]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	4606      	mov	r6, r0
 8008f00:	dd7a      	ble.n	8008ff8 <_dtoa_r+0x8d0>
 8008f02:	f04f 0800 	mov.w	r8, #0
 8008f06:	6933      	ldr	r3, [r6, #16]
 8008f08:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008f0c:	6918      	ldr	r0, [r3, #16]
 8008f0e:	f000 fdab 	bl	8009a68 <__hi0bits>
 8008f12:	f1c0 0020 	rsb	r0, r0, #32
 8008f16:	9b06      	ldr	r3, [sp, #24]
 8008f18:	4418      	add	r0, r3
 8008f1a:	f010 001f 	ands.w	r0, r0, #31
 8008f1e:	f000 8094 	beq.w	800904a <_dtoa_r+0x922>
 8008f22:	f1c0 0320 	rsb	r3, r0, #32
 8008f26:	2b04      	cmp	r3, #4
 8008f28:	f340 8085 	ble.w	8009036 <_dtoa_r+0x90e>
 8008f2c:	9b05      	ldr	r3, [sp, #20]
 8008f2e:	f1c0 001c 	rsb	r0, r0, #28
 8008f32:	4403      	add	r3, r0
 8008f34:	9305      	str	r3, [sp, #20]
 8008f36:	9b06      	ldr	r3, [sp, #24]
 8008f38:	4403      	add	r3, r0
 8008f3a:	4405      	add	r5, r0
 8008f3c:	9306      	str	r3, [sp, #24]
 8008f3e:	9b05      	ldr	r3, [sp, #20]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	dd05      	ble.n	8008f50 <_dtoa_r+0x828>
 8008f44:	4651      	mov	r1, sl
 8008f46:	461a      	mov	r2, r3
 8008f48:	4620      	mov	r0, r4
 8008f4a:	f000 fef5 	bl	8009d38 <__lshift>
 8008f4e:	4682      	mov	sl, r0
 8008f50:	9b06      	ldr	r3, [sp, #24]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	dd05      	ble.n	8008f62 <_dtoa_r+0x83a>
 8008f56:	4631      	mov	r1, r6
 8008f58:	461a      	mov	r2, r3
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	f000 feec 	bl	8009d38 <__lshift>
 8008f60:	4606      	mov	r6, r0
 8008f62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d072      	beq.n	800904e <_dtoa_r+0x926>
 8008f68:	4631      	mov	r1, r6
 8008f6a:	4650      	mov	r0, sl
 8008f6c:	f000 ff50 	bl	8009e10 <__mcmp>
 8008f70:	2800      	cmp	r0, #0
 8008f72:	da6c      	bge.n	800904e <_dtoa_r+0x926>
 8008f74:	2300      	movs	r3, #0
 8008f76:	4651      	mov	r1, sl
 8008f78:	220a      	movs	r2, #10
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	f000 fd2e 	bl	80099dc <__multadd>
 8008f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f82:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008f86:	4682      	mov	sl, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f000 81b0 	beq.w	80092ee <_dtoa_r+0xbc6>
 8008f8e:	2300      	movs	r3, #0
 8008f90:	4639      	mov	r1, r7
 8008f92:	220a      	movs	r2, #10
 8008f94:	4620      	mov	r0, r4
 8008f96:	f000 fd21 	bl	80099dc <__multadd>
 8008f9a:	9b01      	ldr	r3, [sp, #4]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	4607      	mov	r7, r0
 8008fa0:	f300 8096 	bgt.w	80090d0 <_dtoa_r+0x9a8>
 8008fa4:	9b07      	ldr	r3, [sp, #28]
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	dc59      	bgt.n	800905e <_dtoa_r+0x936>
 8008faa:	e091      	b.n	80090d0 <_dtoa_r+0x9a8>
 8008fac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008fae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008fb2:	e758      	b.n	8008e66 <_dtoa_r+0x73e>
 8008fb4:	9b04      	ldr	r3, [sp, #16]
 8008fb6:	1e5e      	subs	r6, r3, #1
 8008fb8:	9b08      	ldr	r3, [sp, #32]
 8008fba:	42b3      	cmp	r3, r6
 8008fbc:	bfbf      	itttt	lt
 8008fbe:	9b08      	ldrlt	r3, [sp, #32]
 8008fc0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008fc2:	9608      	strlt	r6, [sp, #32]
 8008fc4:	1af3      	sublt	r3, r6, r3
 8008fc6:	bfb4      	ite	lt
 8008fc8:	18d2      	addlt	r2, r2, r3
 8008fca:	1b9e      	subge	r6, r3, r6
 8008fcc:	9b04      	ldr	r3, [sp, #16]
 8008fce:	bfbc      	itt	lt
 8008fd0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008fd2:	2600      	movlt	r6, #0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	bfb7      	itett	lt
 8008fd8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008fdc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008fe0:	1a9d      	sublt	r5, r3, r2
 8008fe2:	2300      	movlt	r3, #0
 8008fe4:	e741      	b.n	8008e6a <_dtoa_r+0x742>
 8008fe6:	9e08      	ldr	r6, [sp, #32]
 8008fe8:	9d05      	ldr	r5, [sp, #20]
 8008fea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008fec:	e748      	b.n	8008e80 <_dtoa_r+0x758>
 8008fee:	9a08      	ldr	r2, [sp, #32]
 8008ff0:	e770      	b.n	8008ed4 <_dtoa_r+0x7ac>
 8008ff2:	9b07      	ldr	r3, [sp, #28]
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	dc19      	bgt.n	800902c <_dtoa_r+0x904>
 8008ff8:	9b02      	ldr	r3, [sp, #8]
 8008ffa:	b9bb      	cbnz	r3, 800902c <_dtoa_r+0x904>
 8008ffc:	9b03      	ldr	r3, [sp, #12]
 8008ffe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009002:	b99b      	cbnz	r3, 800902c <_dtoa_r+0x904>
 8009004:	9b03      	ldr	r3, [sp, #12]
 8009006:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800900a:	0d1b      	lsrs	r3, r3, #20
 800900c:	051b      	lsls	r3, r3, #20
 800900e:	b183      	cbz	r3, 8009032 <_dtoa_r+0x90a>
 8009010:	9b05      	ldr	r3, [sp, #20]
 8009012:	3301      	adds	r3, #1
 8009014:	9305      	str	r3, [sp, #20]
 8009016:	9b06      	ldr	r3, [sp, #24]
 8009018:	3301      	adds	r3, #1
 800901a:	9306      	str	r3, [sp, #24]
 800901c:	f04f 0801 	mov.w	r8, #1
 8009020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009022:	2b00      	cmp	r3, #0
 8009024:	f47f af6f 	bne.w	8008f06 <_dtoa_r+0x7de>
 8009028:	2001      	movs	r0, #1
 800902a:	e774      	b.n	8008f16 <_dtoa_r+0x7ee>
 800902c:	f04f 0800 	mov.w	r8, #0
 8009030:	e7f6      	b.n	8009020 <_dtoa_r+0x8f8>
 8009032:	4698      	mov	r8, r3
 8009034:	e7f4      	b.n	8009020 <_dtoa_r+0x8f8>
 8009036:	d082      	beq.n	8008f3e <_dtoa_r+0x816>
 8009038:	9a05      	ldr	r2, [sp, #20]
 800903a:	331c      	adds	r3, #28
 800903c:	441a      	add	r2, r3
 800903e:	9205      	str	r2, [sp, #20]
 8009040:	9a06      	ldr	r2, [sp, #24]
 8009042:	441a      	add	r2, r3
 8009044:	441d      	add	r5, r3
 8009046:	9206      	str	r2, [sp, #24]
 8009048:	e779      	b.n	8008f3e <_dtoa_r+0x816>
 800904a:	4603      	mov	r3, r0
 800904c:	e7f4      	b.n	8009038 <_dtoa_r+0x910>
 800904e:	9b04      	ldr	r3, [sp, #16]
 8009050:	2b00      	cmp	r3, #0
 8009052:	dc37      	bgt.n	80090c4 <_dtoa_r+0x99c>
 8009054:	9b07      	ldr	r3, [sp, #28]
 8009056:	2b02      	cmp	r3, #2
 8009058:	dd34      	ble.n	80090c4 <_dtoa_r+0x99c>
 800905a:	9b04      	ldr	r3, [sp, #16]
 800905c:	9301      	str	r3, [sp, #4]
 800905e:	9b01      	ldr	r3, [sp, #4]
 8009060:	b963      	cbnz	r3, 800907c <_dtoa_r+0x954>
 8009062:	4631      	mov	r1, r6
 8009064:	2205      	movs	r2, #5
 8009066:	4620      	mov	r0, r4
 8009068:	f000 fcb8 	bl	80099dc <__multadd>
 800906c:	4601      	mov	r1, r0
 800906e:	4606      	mov	r6, r0
 8009070:	4650      	mov	r0, sl
 8009072:	f000 fecd 	bl	8009e10 <__mcmp>
 8009076:	2800      	cmp	r0, #0
 8009078:	f73f adbb 	bgt.w	8008bf2 <_dtoa_r+0x4ca>
 800907c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800907e:	9d00      	ldr	r5, [sp, #0]
 8009080:	ea6f 0b03 	mvn.w	fp, r3
 8009084:	f04f 0800 	mov.w	r8, #0
 8009088:	4631      	mov	r1, r6
 800908a:	4620      	mov	r0, r4
 800908c:	f000 fc84 	bl	8009998 <_Bfree>
 8009090:	2f00      	cmp	r7, #0
 8009092:	f43f aeab 	beq.w	8008dec <_dtoa_r+0x6c4>
 8009096:	f1b8 0f00 	cmp.w	r8, #0
 800909a:	d005      	beq.n	80090a8 <_dtoa_r+0x980>
 800909c:	45b8      	cmp	r8, r7
 800909e:	d003      	beq.n	80090a8 <_dtoa_r+0x980>
 80090a0:	4641      	mov	r1, r8
 80090a2:	4620      	mov	r0, r4
 80090a4:	f000 fc78 	bl	8009998 <_Bfree>
 80090a8:	4639      	mov	r1, r7
 80090aa:	4620      	mov	r0, r4
 80090ac:	f000 fc74 	bl	8009998 <_Bfree>
 80090b0:	e69c      	b.n	8008dec <_dtoa_r+0x6c4>
 80090b2:	2600      	movs	r6, #0
 80090b4:	4637      	mov	r7, r6
 80090b6:	e7e1      	b.n	800907c <_dtoa_r+0x954>
 80090b8:	46bb      	mov	fp, r7
 80090ba:	4637      	mov	r7, r6
 80090bc:	e599      	b.n	8008bf2 <_dtoa_r+0x4ca>
 80090be:	bf00      	nop
 80090c0:	40240000 	.word	0x40240000
 80090c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f000 80c8 	beq.w	800925c <_dtoa_r+0xb34>
 80090cc:	9b04      	ldr	r3, [sp, #16]
 80090ce:	9301      	str	r3, [sp, #4]
 80090d0:	2d00      	cmp	r5, #0
 80090d2:	dd05      	ble.n	80090e0 <_dtoa_r+0x9b8>
 80090d4:	4639      	mov	r1, r7
 80090d6:	462a      	mov	r2, r5
 80090d8:	4620      	mov	r0, r4
 80090da:	f000 fe2d 	bl	8009d38 <__lshift>
 80090de:	4607      	mov	r7, r0
 80090e0:	f1b8 0f00 	cmp.w	r8, #0
 80090e4:	d05b      	beq.n	800919e <_dtoa_r+0xa76>
 80090e6:	6879      	ldr	r1, [r7, #4]
 80090e8:	4620      	mov	r0, r4
 80090ea:	f000 fc15 	bl	8009918 <_Balloc>
 80090ee:	4605      	mov	r5, r0
 80090f0:	b928      	cbnz	r0, 80090fe <_dtoa_r+0x9d6>
 80090f2:	4b83      	ldr	r3, [pc, #524]	; (8009300 <_dtoa_r+0xbd8>)
 80090f4:	4602      	mov	r2, r0
 80090f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80090fa:	f7ff bb2e 	b.w	800875a <_dtoa_r+0x32>
 80090fe:	693a      	ldr	r2, [r7, #16]
 8009100:	3202      	adds	r2, #2
 8009102:	0092      	lsls	r2, r2, #2
 8009104:	f107 010c 	add.w	r1, r7, #12
 8009108:	300c      	adds	r0, #12
 800910a:	f7ff fa76 	bl	80085fa <memcpy>
 800910e:	2201      	movs	r2, #1
 8009110:	4629      	mov	r1, r5
 8009112:	4620      	mov	r0, r4
 8009114:	f000 fe10 	bl	8009d38 <__lshift>
 8009118:	9b00      	ldr	r3, [sp, #0]
 800911a:	3301      	adds	r3, #1
 800911c:	9304      	str	r3, [sp, #16]
 800911e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009122:	4413      	add	r3, r2
 8009124:	9308      	str	r3, [sp, #32]
 8009126:	9b02      	ldr	r3, [sp, #8]
 8009128:	f003 0301 	and.w	r3, r3, #1
 800912c:	46b8      	mov	r8, r7
 800912e:	9306      	str	r3, [sp, #24]
 8009130:	4607      	mov	r7, r0
 8009132:	9b04      	ldr	r3, [sp, #16]
 8009134:	4631      	mov	r1, r6
 8009136:	3b01      	subs	r3, #1
 8009138:	4650      	mov	r0, sl
 800913a:	9301      	str	r3, [sp, #4]
 800913c:	f7ff fa6b 	bl	8008616 <quorem>
 8009140:	4641      	mov	r1, r8
 8009142:	9002      	str	r0, [sp, #8]
 8009144:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009148:	4650      	mov	r0, sl
 800914a:	f000 fe61 	bl	8009e10 <__mcmp>
 800914e:	463a      	mov	r2, r7
 8009150:	9005      	str	r0, [sp, #20]
 8009152:	4631      	mov	r1, r6
 8009154:	4620      	mov	r0, r4
 8009156:	f000 fe77 	bl	8009e48 <__mdiff>
 800915a:	68c2      	ldr	r2, [r0, #12]
 800915c:	4605      	mov	r5, r0
 800915e:	bb02      	cbnz	r2, 80091a2 <_dtoa_r+0xa7a>
 8009160:	4601      	mov	r1, r0
 8009162:	4650      	mov	r0, sl
 8009164:	f000 fe54 	bl	8009e10 <__mcmp>
 8009168:	4602      	mov	r2, r0
 800916a:	4629      	mov	r1, r5
 800916c:	4620      	mov	r0, r4
 800916e:	9209      	str	r2, [sp, #36]	; 0x24
 8009170:	f000 fc12 	bl	8009998 <_Bfree>
 8009174:	9b07      	ldr	r3, [sp, #28]
 8009176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009178:	9d04      	ldr	r5, [sp, #16]
 800917a:	ea43 0102 	orr.w	r1, r3, r2
 800917e:	9b06      	ldr	r3, [sp, #24]
 8009180:	4319      	orrs	r1, r3
 8009182:	d110      	bne.n	80091a6 <_dtoa_r+0xa7e>
 8009184:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009188:	d029      	beq.n	80091de <_dtoa_r+0xab6>
 800918a:	9b05      	ldr	r3, [sp, #20]
 800918c:	2b00      	cmp	r3, #0
 800918e:	dd02      	ble.n	8009196 <_dtoa_r+0xa6e>
 8009190:	9b02      	ldr	r3, [sp, #8]
 8009192:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009196:	9b01      	ldr	r3, [sp, #4]
 8009198:	f883 9000 	strb.w	r9, [r3]
 800919c:	e774      	b.n	8009088 <_dtoa_r+0x960>
 800919e:	4638      	mov	r0, r7
 80091a0:	e7ba      	b.n	8009118 <_dtoa_r+0x9f0>
 80091a2:	2201      	movs	r2, #1
 80091a4:	e7e1      	b.n	800916a <_dtoa_r+0xa42>
 80091a6:	9b05      	ldr	r3, [sp, #20]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	db04      	blt.n	80091b6 <_dtoa_r+0xa8e>
 80091ac:	9907      	ldr	r1, [sp, #28]
 80091ae:	430b      	orrs	r3, r1
 80091b0:	9906      	ldr	r1, [sp, #24]
 80091b2:	430b      	orrs	r3, r1
 80091b4:	d120      	bne.n	80091f8 <_dtoa_r+0xad0>
 80091b6:	2a00      	cmp	r2, #0
 80091b8:	dded      	ble.n	8009196 <_dtoa_r+0xa6e>
 80091ba:	4651      	mov	r1, sl
 80091bc:	2201      	movs	r2, #1
 80091be:	4620      	mov	r0, r4
 80091c0:	f000 fdba 	bl	8009d38 <__lshift>
 80091c4:	4631      	mov	r1, r6
 80091c6:	4682      	mov	sl, r0
 80091c8:	f000 fe22 	bl	8009e10 <__mcmp>
 80091cc:	2800      	cmp	r0, #0
 80091ce:	dc03      	bgt.n	80091d8 <_dtoa_r+0xab0>
 80091d0:	d1e1      	bne.n	8009196 <_dtoa_r+0xa6e>
 80091d2:	f019 0f01 	tst.w	r9, #1
 80091d6:	d0de      	beq.n	8009196 <_dtoa_r+0xa6e>
 80091d8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80091dc:	d1d8      	bne.n	8009190 <_dtoa_r+0xa68>
 80091de:	9a01      	ldr	r2, [sp, #4]
 80091e0:	2339      	movs	r3, #57	; 0x39
 80091e2:	7013      	strb	r3, [r2, #0]
 80091e4:	462b      	mov	r3, r5
 80091e6:	461d      	mov	r5, r3
 80091e8:	3b01      	subs	r3, #1
 80091ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80091ee:	2a39      	cmp	r2, #57	; 0x39
 80091f0:	d06c      	beq.n	80092cc <_dtoa_r+0xba4>
 80091f2:	3201      	adds	r2, #1
 80091f4:	701a      	strb	r2, [r3, #0]
 80091f6:	e747      	b.n	8009088 <_dtoa_r+0x960>
 80091f8:	2a00      	cmp	r2, #0
 80091fa:	dd07      	ble.n	800920c <_dtoa_r+0xae4>
 80091fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009200:	d0ed      	beq.n	80091de <_dtoa_r+0xab6>
 8009202:	9a01      	ldr	r2, [sp, #4]
 8009204:	f109 0301 	add.w	r3, r9, #1
 8009208:	7013      	strb	r3, [r2, #0]
 800920a:	e73d      	b.n	8009088 <_dtoa_r+0x960>
 800920c:	9b04      	ldr	r3, [sp, #16]
 800920e:	9a08      	ldr	r2, [sp, #32]
 8009210:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009214:	4293      	cmp	r3, r2
 8009216:	d043      	beq.n	80092a0 <_dtoa_r+0xb78>
 8009218:	4651      	mov	r1, sl
 800921a:	2300      	movs	r3, #0
 800921c:	220a      	movs	r2, #10
 800921e:	4620      	mov	r0, r4
 8009220:	f000 fbdc 	bl	80099dc <__multadd>
 8009224:	45b8      	cmp	r8, r7
 8009226:	4682      	mov	sl, r0
 8009228:	f04f 0300 	mov.w	r3, #0
 800922c:	f04f 020a 	mov.w	r2, #10
 8009230:	4641      	mov	r1, r8
 8009232:	4620      	mov	r0, r4
 8009234:	d107      	bne.n	8009246 <_dtoa_r+0xb1e>
 8009236:	f000 fbd1 	bl	80099dc <__multadd>
 800923a:	4680      	mov	r8, r0
 800923c:	4607      	mov	r7, r0
 800923e:	9b04      	ldr	r3, [sp, #16]
 8009240:	3301      	adds	r3, #1
 8009242:	9304      	str	r3, [sp, #16]
 8009244:	e775      	b.n	8009132 <_dtoa_r+0xa0a>
 8009246:	f000 fbc9 	bl	80099dc <__multadd>
 800924a:	4639      	mov	r1, r7
 800924c:	4680      	mov	r8, r0
 800924e:	2300      	movs	r3, #0
 8009250:	220a      	movs	r2, #10
 8009252:	4620      	mov	r0, r4
 8009254:	f000 fbc2 	bl	80099dc <__multadd>
 8009258:	4607      	mov	r7, r0
 800925a:	e7f0      	b.n	800923e <_dtoa_r+0xb16>
 800925c:	9b04      	ldr	r3, [sp, #16]
 800925e:	9301      	str	r3, [sp, #4]
 8009260:	9d00      	ldr	r5, [sp, #0]
 8009262:	4631      	mov	r1, r6
 8009264:	4650      	mov	r0, sl
 8009266:	f7ff f9d6 	bl	8008616 <quorem>
 800926a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800926e:	9b00      	ldr	r3, [sp, #0]
 8009270:	f805 9b01 	strb.w	r9, [r5], #1
 8009274:	1aea      	subs	r2, r5, r3
 8009276:	9b01      	ldr	r3, [sp, #4]
 8009278:	4293      	cmp	r3, r2
 800927a:	dd07      	ble.n	800928c <_dtoa_r+0xb64>
 800927c:	4651      	mov	r1, sl
 800927e:	2300      	movs	r3, #0
 8009280:	220a      	movs	r2, #10
 8009282:	4620      	mov	r0, r4
 8009284:	f000 fbaa 	bl	80099dc <__multadd>
 8009288:	4682      	mov	sl, r0
 800928a:	e7ea      	b.n	8009262 <_dtoa_r+0xb3a>
 800928c:	9b01      	ldr	r3, [sp, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	bfc8      	it	gt
 8009292:	461d      	movgt	r5, r3
 8009294:	9b00      	ldr	r3, [sp, #0]
 8009296:	bfd8      	it	le
 8009298:	2501      	movle	r5, #1
 800929a:	441d      	add	r5, r3
 800929c:	f04f 0800 	mov.w	r8, #0
 80092a0:	4651      	mov	r1, sl
 80092a2:	2201      	movs	r2, #1
 80092a4:	4620      	mov	r0, r4
 80092a6:	f000 fd47 	bl	8009d38 <__lshift>
 80092aa:	4631      	mov	r1, r6
 80092ac:	4682      	mov	sl, r0
 80092ae:	f000 fdaf 	bl	8009e10 <__mcmp>
 80092b2:	2800      	cmp	r0, #0
 80092b4:	dc96      	bgt.n	80091e4 <_dtoa_r+0xabc>
 80092b6:	d102      	bne.n	80092be <_dtoa_r+0xb96>
 80092b8:	f019 0f01 	tst.w	r9, #1
 80092bc:	d192      	bne.n	80091e4 <_dtoa_r+0xabc>
 80092be:	462b      	mov	r3, r5
 80092c0:	461d      	mov	r5, r3
 80092c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092c6:	2a30      	cmp	r2, #48	; 0x30
 80092c8:	d0fa      	beq.n	80092c0 <_dtoa_r+0xb98>
 80092ca:	e6dd      	b.n	8009088 <_dtoa_r+0x960>
 80092cc:	9a00      	ldr	r2, [sp, #0]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d189      	bne.n	80091e6 <_dtoa_r+0xabe>
 80092d2:	f10b 0b01 	add.w	fp, fp, #1
 80092d6:	2331      	movs	r3, #49	; 0x31
 80092d8:	e796      	b.n	8009208 <_dtoa_r+0xae0>
 80092da:	4b0a      	ldr	r3, [pc, #40]	; (8009304 <_dtoa_r+0xbdc>)
 80092dc:	f7ff ba99 	b.w	8008812 <_dtoa_r+0xea>
 80092e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f47f aa6d 	bne.w	80087c2 <_dtoa_r+0x9a>
 80092e8:	4b07      	ldr	r3, [pc, #28]	; (8009308 <_dtoa_r+0xbe0>)
 80092ea:	f7ff ba92 	b.w	8008812 <_dtoa_r+0xea>
 80092ee:	9b01      	ldr	r3, [sp, #4]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	dcb5      	bgt.n	8009260 <_dtoa_r+0xb38>
 80092f4:	9b07      	ldr	r3, [sp, #28]
 80092f6:	2b02      	cmp	r3, #2
 80092f8:	f73f aeb1 	bgt.w	800905e <_dtoa_r+0x936>
 80092fc:	e7b0      	b.n	8009260 <_dtoa_r+0xb38>
 80092fe:	bf00      	nop
 8009300:	0800ca14 	.word	0x0800ca14
 8009304:	0800c974 	.word	0x0800c974
 8009308:	0800c998 	.word	0x0800c998

0800930c <_free_r>:
 800930c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800930e:	2900      	cmp	r1, #0
 8009310:	d044      	beq.n	800939c <_free_r+0x90>
 8009312:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009316:	9001      	str	r0, [sp, #4]
 8009318:	2b00      	cmp	r3, #0
 800931a:	f1a1 0404 	sub.w	r4, r1, #4
 800931e:	bfb8      	it	lt
 8009320:	18e4      	addlt	r4, r4, r3
 8009322:	f000 faed 	bl	8009900 <__malloc_lock>
 8009326:	4a1e      	ldr	r2, [pc, #120]	; (80093a0 <_free_r+0x94>)
 8009328:	9801      	ldr	r0, [sp, #4]
 800932a:	6813      	ldr	r3, [r2, #0]
 800932c:	b933      	cbnz	r3, 800933c <_free_r+0x30>
 800932e:	6063      	str	r3, [r4, #4]
 8009330:	6014      	str	r4, [r2, #0]
 8009332:	b003      	add	sp, #12
 8009334:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009338:	f000 bae8 	b.w	800990c <__malloc_unlock>
 800933c:	42a3      	cmp	r3, r4
 800933e:	d908      	bls.n	8009352 <_free_r+0x46>
 8009340:	6825      	ldr	r5, [r4, #0]
 8009342:	1961      	adds	r1, r4, r5
 8009344:	428b      	cmp	r3, r1
 8009346:	bf01      	itttt	eq
 8009348:	6819      	ldreq	r1, [r3, #0]
 800934a:	685b      	ldreq	r3, [r3, #4]
 800934c:	1949      	addeq	r1, r1, r5
 800934e:	6021      	streq	r1, [r4, #0]
 8009350:	e7ed      	b.n	800932e <_free_r+0x22>
 8009352:	461a      	mov	r2, r3
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	b10b      	cbz	r3, 800935c <_free_r+0x50>
 8009358:	42a3      	cmp	r3, r4
 800935a:	d9fa      	bls.n	8009352 <_free_r+0x46>
 800935c:	6811      	ldr	r1, [r2, #0]
 800935e:	1855      	adds	r5, r2, r1
 8009360:	42a5      	cmp	r5, r4
 8009362:	d10b      	bne.n	800937c <_free_r+0x70>
 8009364:	6824      	ldr	r4, [r4, #0]
 8009366:	4421      	add	r1, r4
 8009368:	1854      	adds	r4, r2, r1
 800936a:	42a3      	cmp	r3, r4
 800936c:	6011      	str	r1, [r2, #0]
 800936e:	d1e0      	bne.n	8009332 <_free_r+0x26>
 8009370:	681c      	ldr	r4, [r3, #0]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	6053      	str	r3, [r2, #4]
 8009376:	440c      	add	r4, r1
 8009378:	6014      	str	r4, [r2, #0]
 800937a:	e7da      	b.n	8009332 <_free_r+0x26>
 800937c:	d902      	bls.n	8009384 <_free_r+0x78>
 800937e:	230c      	movs	r3, #12
 8009380:	6003      	str	r3, [r0, #0]
 8009382:	e7d6      	b.n	8009332 <_free_r+0x26>
 8009384:	6825      	ldr	r5, [r4, #0]
 8009386:	1961      	adds	r1, r4, r5
 8009388:	428b      	cmp	r3, r1
 800938a:	bf04      	itt	eq
 800938c:	6819      	ldreq	r1, [r3, #0]
 800938e:	685b      	ldreq	r3, [r3, #4]
 8009390:	6063      	str	r3, [r4, #4]
 8009392:	bf04      	itt	eq
 8009394:	1949      	addeq	r1, r1, r5
 8009396:	6021      	streq	r1, [r4, #0]
 8009398:	6054      	str	r4, [r2, #4]
 800939a:	e7ca      	b.n	8009332 <_free_r+0x26>
 800939c:	b003      	add	sp, #12
 800939e:	bd30      	pop	{r4, r5, pc}
 80093a0:	2000527c 	.word	0x2000527c

080093a4 <__ssputs_r>:
 80093a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093a8:	688e      	ldr	r6, [r1, #8]
 80093aa:	461f      	mov	r7, r3
 80093ac:	42be      	cmp	r6, r7
 80093ae:	680b      	ldr	r3, [r1, #0]
 80093b0:	4682      	mov	sl, r0
 80093b2:	460c      	mov	r4, r1
 80093b4:	4690      	mov	r8, r2
 80093b6:	d82c      	bhi.n	8009412 <__ssputs_r+0x6e>
 80093b8:	898a      	ldrh	r2, [r1, #12]
 80093ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80093be:	d026      	beq.n	800940e <__ssputs_r+0x6a>
 80093c0:	6965      	ldr	r5, [r4, #20]
 80093c2:	6909      	ldr	r1, [r1, #16]
 80093c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093c8:	eba3 0901 	sub.w	r9, r3, r1
 80093cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093d0:	1c7b      	adds	r3, r7, #1
 80093d2:	444b      	add	r3, r9
 80093d4:	106d      	asrs	r5, r5, #1
 80093d6:	429d      	cmp	r5, r3
 80093d8:	bf38      	it	cc
 80093da:	461d      	movcc	r5, r3
 80093dc:	0553      	lsls	r3, r2, #21
 80093de:	d527      	bpl.n	8009430 <__ssputs_r+0x8c>
 80093e0:	4629      	mov	r1, r5
 80093e2:	f000 f95f 	bl	80096a4 <_malloc_r>
 80093e6:	4606      	mov	r6, r0
 80093e8:	b360      	cbz	r0, 8009444 <__ssputs_r+0xa0>
 80093ea:	6921      	ldr	r1, [r4, #16]
 80093ec:	464a      	mov	r2, r9
 80093ee:	f7ff f904 	bl	80085fa <memcpy>
 80093f2:	89a3      	ldrh	r3, [r4, #12]
 80093f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80093f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093fc:	81a3      	strh	r3, [r4, #12]
 80093fe:	6126      	str	r6, [r4, #16]
 8009400:	6165      	str	r5, [r4, #20]
 8009402:	444e      	add	r6, r9
 8009404:	eba5 0509 	sub.w	r5, r5, r9
 8009408:	6026      	str	r6, [r4, #0]
 800940a:	60a5      	str	r5, [r4, #8]
 800940c:	463e      	mov	r6, r7
 800940e:	42be      	cmp	r6, r7
 8009410:	d900      	bls.n	8009414 <__ssputs_r+0x70>
 8009412:	463e      	mov	r6, r7
 8009414:	6820      	ldr	r0, [r4, #0]
 8009416:	4632      	mov	r2, r6
 8009418:	4641      	mov	r1, r8
 800941a:	f000 fe6b 	bl	800a0f4 <memmove>
 800941e:	68a3      	ldr	r3, [r4, #8]
 8009420:	1b9b      	subs	r3, r3, r6
 8009422:	60a3      	str	r3, [r4, #8]
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	4433      	add	r3, r6
 8009428:	6023      	str	r3, [r4, #0]
 800942a:	2000      	movs	r0, #0
 800942c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009430:	462a      	mov	r2, r5
 8009432:	f000 fe30 	bl	800a096 <_realloc_r>
 8009436:	4606      	mov	r6, r0
 8009438:	2800      	cmp	r0, #0
 800943a:	d1e0      	bne.n	80093fe <__ssputs_r+0x5a>
 800943c:	6921      	ldr	r1, [r4, #16]
 800943e:	4650      	mov	r0, sl
 8009440:	f7ff ff64 	bl	800930c <_free_r>
 8009444:	230c      	movs	r3, #12
 8009446:	f8ca 3000 	str.w	r3, [sl]
 800944a:	89a3      	ldrh	r3, [r4, #12]
 800944c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009450:	81a3      	strh	r3, [r4, #12]
 8009452:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009456:	e7e9      	b.n	800942c <__ssputs_r+0x88>

08009458 <_svfiprintf_r>:
 8009458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800945c:	4698      	mov	r8, r3
 800945e:	898b      	ldrh	r3, [r1, #12]
 8009460:	061b      	lsls	r3, r3, #24
 8009462:	b09d      	sub	sp, #116	; 0x74
 8009464:	4607      	mov	r7, r0
 8009466:	460d      	mov	r5, r1
 8009468:	4614      	mov	r4, r2
 800946a:	d50e      	bpl.n	800948a <_svfiprintf_r+0x32>
 800946c:	690b      	ldr	r3, [r1, #16]
 800946e:	b963      	cbnz	r3, 800948a <_svfiprintf_r+0x32>
 8009470:	2140      	movs	r1, #64	; 0x40
 8009472:	f000 f917 	bl	80096a4 <_malloc_r>
 8009476:	6028      	str	r0, [r5, #0]
 8009478:	6128      	str	r0, [r5, #16]
 800947a:	b920      	cbnz	r0, 8009486 <_svfiprintf_r+0x2e>
 800947c:	230c      	movs	r3, #12
 800947e:	603b      	str	r3, [r7, #0]
 8009480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009484:	e0d0      	b.n	8009628 <_svfiprintf_r+0x1d0>
 8009486:	2340      	movs	r3, #64	; 0x40
 8009488:	616b      	str	r3, [r5, #20]
 800948a:	2300      	movs	r3, #0
 800948c:	9309      	str	r3, [sp, #36]	; 0x24
 800948e:	2320      	movs	r3, #32
 8009490:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009494:	f8cd 800c 	str.w	r8, [sp, #12]
 8009498:	2330      	movs	r3, #48	; 0x30
 800949a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009640 <_svfiprintf_r+0x1e8>
 800949e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094a2:	f04f 0901 	mov.w	r9, #1
 80094a6:	4623      	mov	r3, r4
 80094a8:	469a      	mov	sl, r3
 80094aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094ae:	b10a      	cbz	r2, 80094b4 <_svfiprintf_r+0x5c>
 80094b0:	2a25      	cmp	r2, #37	; 0x25
 80094b2:	d1f9      	bne.n	80094a8 <_svfiprintf_r+0x50>
 80094b4:	ebba 0b04 	subs.w	fp, sl, r4
 80094b8:	d00b      	beq.n	80094d2 <_svfiprintf_r+0x7a>
 80094ba:	465b      	mov	r3, fp
 80094bc:	4622      	mov	r2, r4
 80094be:	4629      	mov	r1, r5
 80094c0:	4638      	mov	r0, r7
 80094c2:	f7ff ff6f 	bl	80093a4 <__ssputs_r>
 80094c6:	3001      	adds	r0, #1
 80094c8:	f000 80a9 	beq.w	800961e <_svfiprintf_r+0x1c6>
 80094cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094ce:	445a      	add	r2, fp
 80094d0:	9209      	str	r2, [sp, #36]	; 0x24
 80094d2:	f89a 3000 	ldrb.w	r3, [sl]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	f000 80a1 	beq.w	800961e <_svfiprintf_r+0x1c6>
 80094dc:	2300      	movs	r3, #0
 80094de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094e6:	f10a 0a01 	add.w	sl, sl, #1
 80094ea:	9304      	str	r3, [sp, #16]
 80094ec:	9307      	str	r3, [sp, #28]
 80094ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094f2:	931a      	str	r3, [sp, #104]	; 0x68
 80094f4:	4654      	mov	r4, sl
 80094f6:	2205      	movs	r2, #5
 80094f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094fc:	4850      	ldr	r0, [pc, #320]	; (8009640 <_svfiprintf_r+0x1e8>)
 80094fe:	f7f6 fe87 	bl	8000210 <memchr>
 8009502:	9a04      	ldr	r2, [sp, #16]
 8009504:	b9d8      	cbnz	r0, 800953e <_svfiprintf_r+0xe6>
 8009506:	06d0      	lsls	r0, r2, #27
 8009508:	bf44      	itt	mi
 800950a:	2320      	movmi	r3, #32
 800950c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009510:	0711      	lsls	r1, r2, #28
 8009512:	bf44      	itt	mi
 8009514:	232b      	movmi	r3, #43	; 0x2b
 8009516:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800951a:	f89a 3000 	ldrb.w	r3, [sl]
 800951e:	2b2a      	cmp	r3, #42	; 0x2a
 8009520:	d015      	beq.n	800954e <_svfiprintf_r+0xf6>
 8009522:	9a07      	ldr	r2, [sp, #28]
 8009524:	4654      	mov	r4, sl
 8009526:	2000      	movs	r0, #0
 8009528:	f04f 0c0a 	mov.w	ip, #10
 800952c:	4621      	mov	r1, r4
 800952e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009532:	3b30      	subs	r3, #48	; 0x30
 8009534:	2b09      	cmp	r3, #9
 8009536:	d94d      	bls.n	80095d4 <_svfiprintf_r+0x17c>
 8009538:	b1b0      	cbz	r0, 8009568 <_svfiprintf_r+0x110>
 800953a:	9207      	str	r2, [sp, #28]
 800953c:	e014      	b.n	8009568 <_svfiprintf_r+0x110>
 800953e:	eba0 0308 	sub.w	r3, r0, r8
 8009542:	fa09 f303 	lsl.w	r3, r9, r3
 8009546:	4313      	orrs	r3, r2
 8009548:	9304      	str	r3, [sp, #16]
 800954a:	46a2      	mov	sl, r4
 800954c:	e7d2      	b.n	80094f4 <_svfiprintf_r+0x9c>
 800954e:	9b03      	ldr	r3, [sp, #12]
 8009550:	1d19      	adds	r1, r3, #4
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	9103      	str	r1, [sp, #12]
 8009556:	2b00      	cmp	r3, #0
 8009558:	bfbb      	ittet	lt
 800955a:	425b      	neglt	r3, r3
 800955c:	f042 0202 	orrlt.w	r2, r2, #2
 8009560:	9307      	strge	r3, [sp, #28]
 8009562:	9307      	strlt	r3, [sp, #28]
 8009564:	bfb8      	it	lt
 8009566:	9204      	strlt	r2, [sp, #16]
 8009568:	7823      	ldrb	r3, [r4, #0]
 800956a:	2b2e      	cmp	r3, #46	; 0x2e
 800956c:	d10c      	bne.n	8009588 <_svfiprintf_r+0x130>
 800956e:	7863      	ldrb	r3, [r4, #1]
 8009570:	2b2a      	cmp	r3, #42	; 0x2a
 8009572:	d134      	bne.n	80095de <_svfiprintf_r+0x186>
 8009574:	9b03      	ldr	r3, [sp, #12]
 8009576:	1d1a      	adds	r2, r3, #4
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	9203      	str	r2, [sp, #12]
 800957c:	2b00      	cmp	r3, #0
 800957e:	bfb8      	it	lt
 8009580:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009584:	3402      	adds	r4, #2
 8009586:	9305      	str	r3, [sp, #20]
 8009588:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009650 <_svfiprintf_r+0x1f8>
 800958c:	7821      	ldrb	r1, [r4, #0]
 800958e:	2203      	movs	r2, #3
 8009590:	4650      	mov	r0, sl
 8009592:	f7f6 fe3d 	bl	8000210 <memchr>
 8009596:	b138      	cbz	r0, 80095a8 <_svfiprintf_r+0x150>
 8009598:	9b04      	ldr	r3, [sp, #16]
 800959a:	eba0 000a 	sub.w	r0, r0, sl
 800959e:	2240      	movs	r2, #64	; 0x40
 80095a0:	4082      	lsls	r2, r0
 80095a2:	4313      	orrs	r3, r2
 80095a4:	3401      	adds	r4, #1
 80095a6:	9304      	str	r3, [sp, #16]
 80095a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095ac:	4825      	ldr	r0, [pc, #148]	; (8009644 <_svfiprintf_r+0x1ec>)
 80095ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095b2:	2206      	movs	r2, #6
 80095b4:	f7f6 fe2c 	bl	8000210 <memchr>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	d038      	beq.n	800962e <_svfiprintf_r+0x1d6>
 80095bc:	4b22      	ldr	r3, [pc, #136]	; (8009648 <_svfiprintf_r+0x1f0>)
 80095be:	bb1b      	cbnz	r3, 8009608 <_svfiprintf_r+0x1b0>
 80095c0:	9b03      	ldr	r3, [sp, #12]
 80095c2:	3307      	adds	r3, #7
 80095c4:	f023 0307 	bic.w	r3, r3, #7
 80095c8:	3308      	adds	r3, #8
 80095ca:	9303      	str	r3, [sp, #12]
 80095cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095ce:	4433      	add	r3, r6
 80095d0:	9309      	str	r3, [sp, #36]	; 0x24
 80095d2:	e768      	b.n	80094a6 <_svfiprintf_r+0x4e>
 80095d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80095d8:	460c      	mov	r4, r1
 80095da:	2001      	movs	r0, #1
 80095dc:	e7a6      	b.n	800952c <_svfiprintf_r+0xd4>
 80095de:	2300      	movs	r3, #0
 80095e0:	3401      	adds	r4, #1
 80095e2:	9305      	str	r3, [sp, #20]
 80095e4:	4619      	mov	r1, r3
 80095e6:	f04f 0c0a 	mov.w	ip, #10
 80095ea:	4620      	mov	r0, r4
 80095ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095f0:	3a30      	subs	r2, #48	; 0x30
 80095f2:	2a09      	cmp	r2, #9
 80095f4:	d903      	bls.n	80095fe <_svfiprintf_r+0x1a6>
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d0c6      	beq.n	8009588 <_svfiprintf_r+0x130>
 80095fa:	9105      	str	r1, [sp, #20]
 80095fc:	e7c4      	b.n	8009588 <_svfiprintf_r+0x130>
 80095fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8009602:	4604      	mov	r4, r0
 8009604:	2301      	movs	r3, #1
 8009606:	e7f0      	b.n	80095ea <_svfiprintf_r+0x192>
 8009608:	ab03      	add	r3, sp, #12
 800960a:	9300      	str	r3, [sp, #0]
 800960c:	462a      	mov	r2, r5
 800960e:	4b0f      	ldr	r3, [pc, #60]	; (800964c <_svfiprintf_r+0x1f4>)
 8009610:	a904      	add	r1, sp, #16
 8009612:	4638      	mov	r0, r7
 8009614:	f7fe faba 	bl	8007b8c <_printf_float>
 8009618:	1c42      	adds	r2, r0, #1
 800961a:	4606      	mov	r6, r0
 800961c:	d1d6      	bne.n	80095cc <_svfiprintf_r+0x174>
 800961e:	89ab      	ldrh	r3, [r5, #12]
 8009620:	065b      	lsls	r3, r3, #25
 8009622:	f53f af2d 	bmi.w	8009480 <_svfiprintf_r+0x28>
 8009626:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009628:	b01d      	add	sp, #116	; 0x74
 800962a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800962e:	ab03      	add	r3, sp, #12
 8009630:	9300      	str	r3, [sp, #0]
 8009632:	462a      	mov	r2, r5
 8009634:	4b05      	ldr	r3, [pc, #20]	; (800964c <_svfiprintf_r+0x1f4>)
 8009636:	a904      	add	r1, sp, #16
 8009638:	4638      	mov	r0, r7
 800963a:	f7fe fd4b 	bl	80080d4 <_printf_i>
 800963e:	e7eb      	b.n	8009618 <_svfiprintf_r+0x1c0>
 8009640:	0800ca25 	.word	0x0800ca25
 8009644:	0800ca2f 	.word	0x0800ca2f
 8009648:	08007b8d 	.word	0x08007b8d
 800964c:	080093a5 	.word	0x080093a5
 8009650:	0800ca2b 	.word	0x0800ca2b

08009654 <malloc>:
 8009654:	4b02      	ldr	r3, [pc, #8]	; (8009660 <malloc+0xc>)
 8009656:	4601      	mov	r1, r0
 8009658:	6818      	ldr	r0, [r3, #0]
 800965a:	f000 b823 	b.w	80096a4 <_malloc_r>
 800965e:	bf00      	nop
 8009660:	20000078 	.word	0x20000078

08009664 <sbrk_aligned>:
 8009664:	b570      	push	{r4, r5, r6, lr}
 8009666:	4e0e      	ldr	r6, [pc, #56]	; (80096a0 <sbrk_aligned+0x3c>)
 8009668:	460c      	mov	r4, r1
 800966a:	6831      	ldr	r1, [r6, #0]
 800966c:	4605      	mov	r5, r0
 800966e:	b911      	cbnz	r1, 8009676 <sbrk_aligned+0x12>
 8009670:	f000 fd8e 	bl	800a190 <_sbrk_r>
 8009674:	6030      	str	r0, [r6, #0]
 8009676:	4621      	mov	r1, r4
 8009678:	4628      	mov	r0, r5
 800967a:	f000 fd89 	bl	800a190 <_sbrk_r>
 800967e:	1c43      	adds	r3, r0, #1
 8009680:	d00a      	beq.n	8009698 <sbrk_aligned+0x34>
 8009682:	1cc4      	adds	r4, r0, #3
 8009684:	f024 0403 	bic.w	r4, r4, #3
 8009688:	42a0      	cmp	r0, r4
 800968a:	d007      	beq.n	800969c <sbrk_aligned+0x38>
 800968c:	1a21      	subs	r1, r4, r0
 800968e:	4628      	mov	r0, r5
 8009690:	f000 fd7e 	bl	800a190 <_sbrk_r>
 8009694:	3001      	adds	r0, #1
 8009696:	d101      	bne.n	800969c <sbrk_aligned+0x38>
 8009698:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800969c:	4620      	mov	r0, r4
 800969e:	bd70      	pop	{r4, r5, r6, pc}
 80096a0:	20005280 	.word	0x20005280

080096a4 <_malloc_r>:
 80096a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096a8:	1ccd      	adds	r5, r1, #3
 80096aa:	f025 0503 	bic.w	r5, r5, #3
 80096ae:	3508      	adds	r5, #8
 80096b0:	2d0c      	cmp	r5, #12
 80096b2:	bf38      	it	cc
 80096b4:	250c      	movcc	r5, #12
 80096b6:	2d00      	cmp	r5, #0
 80096b8:	4607      	mov	r7, r0
 80096ba:	db01      	blt.n	80096c0 <_malloc_r+0x1c>
 80096bc:	42a9      	cmp	r1, r5
 80096be:	d905      	bls.n	80096cc <_malloc_r+0x28>
 80096c0:	230c      	movs	r3, #12
 80096c2:	603b      	str	r3, [r7, #0]
 80096c4:	2600      	movs	r6, #0
 80096c6:	4630      	mov	r0, r6
 80096c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80097a0 <_malloc_r+0xfc>
 80096d0:	f000 f916 	bl	8009900 <__malloc_lock>
 80096d4:	f8d8 3000 	ldr.w	r3, [r8]
 80096d8:	461c      	mov	r4, r3
 80096da:	bb5c      	cbnz	r4, 8009734 <_malloc_r+0x90>
 80096dc:	4629      	mov	r1, r5
 80096de:	4638      	mov	r0, r7
 80096e0:	f7ff ffc0 	bl	8009664 <sbrk_aligned>
 80096e4:	1c43      	adds	r3, r0, #1
 80096e6:	4604      	mov	r4, r0
 80096e8:	d155      	bne.n	8009796 <_malloc_r+0xf2>
 80096ea:	f8d8 4000 	ldr.w	r4, [r8]
 80096ee:	4626      	mov	r6, r4
 80096f0:	2e00      	cmp	r6, #0
 80096f2:	d145      	bne.n	8009780 <_malloc_r+0xdc>
 80096f4:	2c00      	cmp	r4, #0
 80096f6:	d048      	beq.n	800978a <_malloc_r+0xe6>
 80096f8:	6823      	ldr	r3, [r4, #0]
 80096fa:	4631      	mov	r1, r6
 80096fc:	4638      	mov	r0, r7
 80096fe:	eb04 0903 	add.w	r9, r4, r3
 8009702:	f000 fd45 	bl	800a190 <_sbrk_r>
 8009706:	4581      	cmp	r9, r0
 8009708:	d13f      	bne.n	800978a <_malloc_r+0xe6>
 800970a:	6821      	ldr	r1, [r4, #0]
 800970c:	1a6d      	subs	r5, r5, r1
 800970e:	4629      	mov	r1, r5
 8009710:	4638      	mov	r0, r7
 8009712:	f7ff ffa7 	bl	8009664 <sbrk_aligned>
 8009716:	3001      	adds	r0, #1
 8009718:	d037      	beq.n	800978a <_malloc_r+0xe6>
 800971a:	6823      	ldr	r3, [r4, #0]
 800971c:	442b      	add	r3, r5
 800971e:	6023      	str	r3, [r4, #0]
 8009720:	f8d8 3000 	ldr.w	r3, [r8]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d038      	beq.n	800979a <_malloc_r+0xf6>
 8009728:	685a      	ldr	r2, [r3, #4]
 800972a:	42a2      	cmp	r2, r4
 800972c:	d12b      	bne.n	8009786 <_malloc_r+0xe2>
 800972e:	2200      	movs	r2, #0
 8009730:	605a      	str	r2, [r3, #4]
 8009732:	e00f      	b.n	8009754 <_malloc_r+0xb0>
 8009734:	6822      	ldr	r2, [r4, #0]
 8009736:	1b52      	subs	r2, r2, r5
 8009738:	d41f      	bmi.n	800977a <_malloc_r+0xd6>
 800973a:	2a0b      	cmp	r2, #11
 800973c:	d917      	bls.n	800976e <_malloc_r+0xca>
 800973e:	1961      	adds	r1, r4, r5
 8009740:	42a3      	cmp	r3, r4
 8009742:	6025      	str	r5, [r4, #0]
 8009744:	bf18      	it	ne
 8009746:	6059      	strne	r1, [r3, #4]
 8009748:	6863      	ldr	r3, [r4, #4]
 800974a:	bf08      	it	eq
 800974c:	f8c8 1000 	streq.w	r1, [r8]
 8009750:	5162      	str	r2, [r4, r5]
 8009752:	604b      	str	r3, [r1, #4]
 8009754:	4638      	mov	r0, r7
 8009756:	f104 060b 	add.w	r6, r4, #11
 800975a:	f000 f8d7 	bl	800990c <__malloc_unlock>
 800975e:	f026 0607 	bic.w	r6, r6, #7
 8009762:	1d23      	adds	r3, r4, #4
 8009764:	1af2      	subs	r2, r6, r3
 8009766:	d0ae      	beq.n	80096c6 <_malloc_r+0x22>
 8009768:	1b9b      	subs	r3, r3, r6
 800976a:	50a3      	str	r3, [r4, r2]
 800976c:	e7ab      	b.n	80096c6 <_malloc_r+0x22>
 800976e:	42a3      	cmp	r3, r4
 8009770:	6862      	ldr	r2, [r4, #4]
 8009772:	d1dd      	bne.n	8009730 <_malloc_r+0x8c>
 8009774:	f8c8 2000 	str.w	r2, [r8]
 8009778:	e7ec      	b.n	8009754 <_malloc_r+0xb0>
 800977a:	4623      	mov	r3, r4
 800977c:	6864      	ldr	r4, [r4, #4]
 800977e:	e7ac      	b.n	80096da <_malloc_r+0x36>
 8009780:	4634      	mov	r4, r6
 8009782:	6876      	ldr	r6, [r6, #4]
 8009784:	e7b4      	b.n	80096f0 <_malloc_r+0x4c>
 8009786:	4613      	mov	r3, r2
 8009788:	e7cc      	b.n	8009724 <_malloc_r+0x80>
 800978a:	230c      	movs	r3, #12
 800978c:	603b      	str	r3, [r7, #0]
 800978e:	4638      	mov	r0, r7
 8009790:	f000 f8bc 	bl	800990c <__malloc_unlock>
 8009794:	e797      	b.n	80096c6 <_malloc_r+0x22>
 8009796:	6025      	str	r5, [r4, #0]
 8009798:	e7dc      	b.n	8009754 <_malloc_r+0xb0>
 800979a:	605b      	str	r3, [r3, #4]
 800979c:	deff      	udf	#255	; 0xff
 800979e:	bf00      	nop
 80097a0:	2000527c 	.word	0x2000527c

080097a4 <__sflush_r>:
 80097a4:	898a      	ldrh	r2, [r1, #12]
 80097a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097aa:	4605      	mov	r5, r0
 80097ac:	0710      	lsls	r0, r2, #28
 80097ae:	460c      	mov	r4, r1
 80097b0:	d458      	bmi.n	8009864 <__sflush_r+0xc0>
 80097b2:	684b      	ldr	r3, [r1, #4]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	dc05      	bgt.n	80097c4 <__sflush_r+0x20>
 80097b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	dc02      	bgt.n	80097c4 <__sflush_r+0x20>
 80097be:	2000      	movs	r0, #0
 80097c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097c6:	2e00      	cmp	r6, #0
 80097c8:	d0f9      	beq.n	80097be <__sflush_r+0x1a>
 80097ca:	2300      	movs	r3, #0
 80097cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80097d0:	682f      	ldr	r7, [r5, #0]
 80097d2:	6a21      	ldr	r1, [r4, #32]
 80097d4:	602b      	str	r3, [r5, #0]
 80097d6:	d032      	beq.n	800983e <__sflush_r+0x9a>
 80097d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80097da:	89a3      	ldrh	r3, [r4, #12]
 80097dc:	075a      	lsls	r2, r3, #29
 80097de:	d505      	bpl.n	80097ec <__sflush_r+0x48>
 80097e0:	6863      	ldr	r3, [r4, #4]
 80097e2:	1ac0      	subs	r0, r0, r3
 80097e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097e6:	b10b      	cbz	r3, 80097ec <__sflush_r+0x48>
 80097e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097ea:	1ac0      	subs	r0, r0, r3
 80097ec:	2300      	movs	r3, #0
 80097ee:	4602      	mov	r2, r0
 80097f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097f2:	6a21      	ldr	r1, [r4, #32]
 80097f4:	4628      	mov	r0, r5
 80097f6:	47b0      	blx	r6
 80097f8:	1c43      	adds	r3, r0, #1
 80097fa:	89a3      	ldrh	r3, [r4, #12]
 80097fc:	d106      	bne.n	800980c <__sflush_r+0x68>
 80097fe:	6829      	ldr	r1, [r5, #0]
 8009800:	291d      	cmp	r1, #29
 8009802:	d82b      	bhi.n	800985c <__sflush_r+0xb8>
 8009804:	4a29      	ldr	r2, [pc, #164]	; (80098ac <__sflush_r+0x108>)
 8009806:	410a      	asrs	r2, r1
 8009808:	07d6      	lsls	r6, r2, #31
 800980a:	d427      	bmi.n	800985c <__sflush_r+0xb8>
 800980c:	2200      	movs	r2, #0
 800980e:	6062      	str	r2, [r4, #4]
 8009810:	04d9      	lsls	r1, r3, #19
 8009812:	6922      	ldr	r2, [r4, #16]
 8009814:	6022      	str	r2, [r4, #0]
 8009816:	d504      	bpl.n	8009822 <__sflush_r+0x7e>
 8009818:	1c42      	adds	r2, r0, #1
 800981a:	d101      	bne.n	8009820 <__sflush_r+0x7c>
 800981c:	682b      	ldr	r3, [r5, #0]
 800981e:	b903      	cbnz	r3, 8009822 <__sflush_r+0x7e>
 8009820:	6560      	str	r0, [r4, #84]	; 0x54
 8009822:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009824:	602f      	str	r7, [r5, #0]
 8009826:	2900      	cmp	r1, #0
 8009828:	d0c9      	beq.n	80097be <__sflush_r+0x1a>
 800982a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800982e:	4299      	cmp	r1, r3
 8009830:	d002      	beq.n	8009838 <__sflush_r+0x94>
 8009832:	4628      	mov	r0, r5
 8009834:	f7ff fd6a 	bl	800930c <_free_r>
 8009838:	2000      	movs	r0, #0
 800983a:	6360      	str	r0, [r4, #52]	; 0x34
 800983c:	e7c0      	b.n	80097c0 <__sflush_r+0x1c>
 800983e:	2301      	movs	r3, #1
 8009840:	4628      	mov	r0, r5
 8009842:	47b0      	blx	r6
 8009844:	1c41      	adds	r1, r0, #1
 8009846:	d1c8      	bne.n	80097da <__sflush_r+0x36>
 8009848:	682b      	ldr	r3, [r5, #0]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d0c5      	beq.n	80097da <__sflush_r+0x36>
 800984e:	2b1d      	cmp	r3, #29
 8009850:	d001      	beq.n	8009856 <__sflush_r+0xb2>
 8009852:	2b16      	cmp	r3, #22
 8009854:	d101      	bne.n	800985a <__sflush_r+0xb6>
 8009856:	602f      	str	r7, [r5, #0]
 8009858:	e7b1      	b.n	80097be <__sflush_r+0x1a>
 800985a:	89a3      	ldrh	r3, [r4, #12]
 800985c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009860:	81a3      	strh	r3, [r4, #12]
 8009862:	e7ad      	b.n	80097c0 <__sflush_r+0x1c>
 8009864:	690f      	ldr	r7, [r1, #16]
 8009866:	2f00      	cmp	r7, #0
 8009868:	d0a9      	beq.n	80097be <__sflush_r+0x1a>
 800986a:	0793      	lsls	r3, r2, #30
 800986c:	680e      	ldr	r6, [r1, #0]
 800986e:	bf08      	it	eq
 8009870:	694b      	ldreq	r3, [r1, #20]
 8009872:	600f      	str	r7, [r1, #0]
 8009874:	bf18      	it	ne
 8009876:	2300      	movne	r3, #0
 8009878:	eba6 0807 	sub.w	r8, r6, r7
 800987c:	608b      	str	r3, [r1, #8]
 800987e:	f1b8 0f00 	cmp.w	r8, #0
 8009882:	dd9c      	ble.n	80097be <__sflush_r+0x1a>
 8009884:	6a21      	ldr	r1, [r4, #32]
 8009886:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009888:	4643      	mov	r3, r8
 800988a:	463a      	mov	r2, r7
 800988c:	4628      	mov	r0, r5
 800988e:	47b0      	blx	r6
 8009890:	2800      	cmp	r0, #0
 8009892:	dc06      	bgt.n	80098a2 <__sflush_r+0xfe>
 8009894:	89a3      	ldrh	r3, [r4, #12]
 8009896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800989a:	81a3      	strh	r3, [r4, #12]
 800989c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098a0:	e78e      	b.n	80097c0 <__sflush_r+0x1c>
 80098a2:	4407      	add	r7, r0
 80098a4:	eba8 0800 	sub.w	r8, r8, r0
 80098a8:	e7e9      	b.n	800987e <__sflush_r+0xda>
 80098aa:	bf00      	nop
 80098ac:	dfbffffe 	.word	0xdfbffffe

080098b0 <_fflush_r>:
 80098b0:	b538      	push	{r3, r4, r5, lr}
 80098b2:	690b      	ldr	r3, [r1, #16]
 80098b4:	4605      	mov	r5, r0
 80098b6:	460c      	mov	r4, r1
 80098b8:	b913      	cbnz	r3, 80098c0 <_fflush_r+0x10>
 80098ba:	2500      	movs	r5, #0
 80098bc:	4628      	mov	r0, r5
 80098be:	bd38      	pop	{r3, r4, r5, pc}
 80098c0:	b118      	cbz	r0, 80098ca <_fflush_r+0x1a>
 80098c2:	6a03      	ldr	r3, [r0, #32]
 80098c4:	b90b      	cbnz	r3, 80098ca <_fflush_r+0x1a>
 80098c6:	f7fe fdd3 	bl	8008470 <__sinit>
 80098ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d0f3      	beq.n	80098ba <_fflush_r+0xa>
 80098d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80098d4:	07d0      	lsls	r0, r2, #31
 80098d6:	d404      	bmi.n	80098e2 <_fflush_r+0x32>
 80098d8:	0599      	lsls	r1, r3, #22
 80098da:	d402      	bmi.n	80098e2 <_fflush_r+0x32>
 80098dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098de:	f7fe fe8a 	bl	80085f6 <__retarget_lock_acquire_recursive>
 80098e2:	4628      	mov	r0, r5
 80098e4:	4621      	mov	r1, r4
 80098e6:	f7ff ff5d 	bl	80097a4 <__sflush_r>
 80098ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098ec:	07da      	lsls	r2, r3, #31
 80098ee:	4605      	mov	r5, r0
 80098f0:	d4e4      	bmi.n	80098bc <_fflush_r+0xc>
 80098f2:	89a3      	ldrh	r3, [r4, #12]
 80098f4:	059b      	lsls	r3, r3, #22
 80098f6:	d4e1      	bmi.n	80098bc <_fflush_r+0xc>
 80098f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098fa:	f7fe fe7d 	bl	80085f8 <__retarget_lock_release_recursive>
 80098fe:	e7dd      	b.n	80098bc <_fflush_r+0xc>

08009900 <__malloc_lock>:
 8009900:	4801      	ldr	r0, [pc, #4]	; (8009908 <__malloc_lock+0x8>)
 8009902:	f7fe be78 	b.w	80085f6 <__retarget_lock_acquire_recursive>
 8009906:	bf00      	nop
 8009908:	20005278 	.word	0x20005278

0800990c <__malloc_unlock>:
 800990c:	4801      	ldr	r0, [pc, #4]	; (8009914 <__malloc_unlock+0x8>)
 800990e:	f7fe be73 	b.w	80085f8 <__retarget_lock_release_recursive>
 8009912:	bf00      	nop
 8009914:	20005278 	.word	0x20005278

08009918 <_Balloc>:
 8009918:	b570      	push	{r4, r5, r6, lr}
 800991a:	69c6      	ldr	r6, [r0, #28]
 800991c:	4604      	mov	r4, r0
 800991e:	460d      	mov	r5, r1
 8009920:	b976      	cbnz	r6, 8009940 <_Balloc+0x28>
 8009922:	2010      	movs	r0, #16
 8009924:	f7ff fe96 	bl	8009654 <malloc>
 8009928:	4602      	mov	r2, r0
 800992a:	61e0      	str	r0, [r4, #28]
 800992c:	b920      	cbnz	r0, 8009938 <_Balloc+0x20>
 800992e:	4b18      	ldr	r3, [pc, #96]	; (8009990 <_Balloc+0x78>)
 8009930:	4818      	ldr	r0, [pc, #96]	; (8009994 <_Balloc+0x7c>)
 8009932:	216b      	movs	r1, #107	; 0x6b
 8009934:	f000 fc4e 	bl	800a1d4 <__assert_func>
 8009938:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800993c:	6006      	str	r6, [r0, #0]
 800993e:	60c6      	str	r6, [r0, #12]
 8009940:	69e6      	ldr	r6, [r4, #28]
 8009942:	68f3      	ldr	r3, [r6, #12]
 8009944:	b183      	cbz	r3, 8009968 <_Balloc+0x50>
 8009946:	69e3      	ldr	r3, [r4, #28]
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800994e:	b9b8      	cbnz	r0, 8009980 <_Balloc+0x68>
 8009950:	2101      	movs	r1, #1
 8009952:	fa01 f605 	lsl.w	r6, r1, r5
 8009956:	1d72      	adds	r2, r6, #5
 8009958:	0092      	lsls	r2, r2, #2
 800995a:	4620      	mov	r0, r4
 800995c:	f000 fc58 	bl	800a210 <_calloc_r>
 8009960:	b160      	cbz	r0, 800997c <_Balloc+0x64>
 8009962:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009966:	e00e      	b.n	8009986 <_Balloc+0x6e>
 8009968:	2221      	movs	r2, #33	; 0x21
 800996a:	2104      	movs	r1, #4
 800996c:	4620      	mov	r0, r4
 800996e:	f000 fc4f 	bl	800a210 <_calloc_r>
 8009972:	69e3      	ldr	r3, [r4, #28]
 8009974:	60f0      	str	r0, [r6, #12]
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d1e4      	bne.n	8009946 <_Balloc+0x2e>
 800997c:	2000      	movs	r0, #0
 800997e:	bd70      	pop	{r4, r5, r6, pc}
 8009980:	6802      	ldr	r2, [r0, #0]
 8009982:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009986:	2300      	movs	r3, #0
 8009988:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800998c:	e7f7      	b.n	800997e <_Balloc+0x66>
 800998e:	bf00      	nop
 8009990:	0800c9a5 	.word	0x0800c9a5
 8009994:	0800ca36 	.word	0x0800ca36

08009998 <_Bfree>:
 8009998:	b570      	push	{r4, r5, r6, lr}
 800999a:	69c6      	ldr	r6, [r0, #28]
 800999c:	4605      	mov	r5, r0
 800999e:	460c      	mov	r4, r1
 80099a0:	b976      	cbnz	r6, 80099c0 <_Bfree+0x28>
 80099a2:	2010      	movs	r0, #16
 80099a4:	f7ff fe56 	bl	8009654 <malloc>
 80099a8:	4602      	mov	r2, r0
 80099aa:	61e8      	str	r0, [r5, #28]
 80099ac:	b920      	cbnz	r0, 80099b8 <_Bfree+0x20>
 80099ae:	4b09      	ldr	r3, [pc, #36]	; (80099d4 <_Bfree+0x3c>)
 80099b0:	4809      	ldr	r0, [pc, #36]	; (80099d8 <_Bfree+0x40>)
 80099b2:	218f      	movs	r1, #143	; 0x8f
 80099b4:	f000 fc0e 	bl	800a1d4 <__assert_func>
 80099b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099bc:	6006      	str	r6, [r0, #0]
 80099be:	60c6      	str	r6, [r0, #12]
 80099c0:	b13c      	cbz	r4, 80099d2 <_Bfree+0x3a>
 80099c2:	69eb      	ldr	r3, [r5, #28]
 80099c4:	6862      	ldr	r2, [r4, #4]
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099cc:	6021      	str	r1, [r4, #0]
 80099ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80099d2:	bd70      	pop	{r4, r5, r6, pc}
 80099d4:	0800c9a5 	.word	0x0800c9a5
 80099d8:	0800ca36 	.word	0x0800ca36

080099dc <__multadd>:
 80099dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e0:	690d      	ldr	r5, [r1, #16]
 80099e2:	4607      	mov	r7, r0
 80099e4:	460c      	mov	r4, r1
 80099e6:	461e      	mov	r6, r3
 80099e8:	f101 0c14 	add.w	ip, r1, #20
 80099ec:	2000      	movs	r0, #0
 80099ee:	f8dc 3000 	ldr.w	r3, [ip]
 80099f2:	b299      	uxth	r1, r3
 80099f4:	fb02 6101 	mla	r1, r2, r1, r6
 80099f8:	0c1e      	lsrs	r6, r3, #16
 80099fa:	0c0b      	lsrs	r3, r1, #16
 80099fc:	fb02 3306 	mla	r3, r2, r6, r3
 8009a00:	b289      	uxth	r1, r1
 8009a02:	3001      	adds	r0, #1
 8009a04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a08:	4285      	cmp	r5, r0
 8009a0a:	f84c 1b04 	str.w	r1, [ip], #4
 8009a0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a12:	dcec      	bgt.n	80099ee <__multadd+0x12>
 8009a14:	b30e      	cbz	r6, 8009a5a <__multadd+0x7e>
 8009a16:	68a3      	ldr	r3, [r4, #8]
 8009a18:	42ab      	cmp	r3, r5
 8009a1a:	dc19      	bgt.n	8009a50 <__multadd+0x74>
 8009a1c:	6861      	ldr	r1, [r4, #4]
 8009a1e:	4638      	mov	r0, r7
 8009a20:	3101      	adds	r1, #1
 8009a22:	f7ff ff79 	bl	8009918 <_Balloc>
 8009a26:	4680      	mov	r8, r0
 8009a28:	b928      	cbnz	r0, 8009a36 <__multadd+0x5a>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	4b0c      	ldr	r3, [pc, #48]	; (8009a60 <__multadd+0x84>)
 8009a2e:	480d      	ldr	r0, [pc, #52]	; (8009a64 <__multadd+0x88>)
 8009a30:	21ba      	movs	r1, #186	; 0xba
 8009a32:	f000 fbcf 	bl	800a1d4 <__assert_func>
 8009a36:	6922      	ldr	r2, [r4, #16]
 8009a38:	3202      	adds	r2, #2
 8009a3a:	f104 010c 	add.w	r1, r4, #12
 8009a3e:	0092      	lsls	r2, r2, #2
 8009a40:	300c      	adds	r0, #12
 8009a42:	f7fe fdda 	bl	80085fa <memcpy>
 8009a46:	4621      	mov	r1, r4
 8009a48:	4638      	mov	r0, r7
 8009a4a:	f7ff ffa5 	bl	8009998 <_Bfree>
 8009a4e:	4644      	mov	r4, r8
 8009a50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a54:	3501      	adds	r5, #1
 8009a56:	615e      	str	r6, [r3, #20]
 8009a58:	6125      	str	r5, [r4, #16]
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a60:	0800ca14 	.word	0x0800ca14
 8009a64:	0800ca36 	.word	0x0800ca36

08009a68 <__hi0bits>:
 8009a68:	0c03      	lsrs	r3, r0, #16
 8009a6a:	041b      	lsls	r3, r3, #16
 8009a6c:	b9d3      	cbnz	r3, 8009aa4 <__hi0bits+0x3c>
 8009a6e:	0400      	lsls	r0, r0, #16
 8009a70:	2310      	movs	r3, #16
 8009a72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009a76:	bf04      	itt	eq
 8009a78:	0200      	lsleq	r0, r0, #8
 8009a7a:	3308      	addeq	r3, #8
 8009a7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009a80:	bf04      	itt	eq
 8009a82:	0100      	lsleq	r0, r0, #4
 8009a84:	3304      	addeq	r3, #4
 8009a86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009a8a:	bf04      	itt	eq
 8009a8c:	0080      	lsleq	r0, r0, #2
 8009a8e:	3302      	addeq	r3, #2
 8009a90:	2800      	cmp	r0, #0
 8009a92:	db05      	blt.n	8009aa0 <__hi0bits+0x38>
 8009a94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009a98:	f103 0301 	add.w	r3, r3, #1
 8009a9c:	bf08      	it	eq
 8009a9e:	2320      	moveq	r3, #32
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	4770      	bx	lr
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	e7e4      	b.n	8009a72 <__hi0bits+0xa>

08009aa8 <__lo0bits>:
 8009aa8:	6803      	ldr	r3, [r0, #0]
 8009aaa:	f013 0207 	ands.w	r2, r3, #7
 8009aae:	d00c      	beq.n	8009aca <__lo0bits+0x22>
 8009ab0:	07d9      	lsls	r1, r3, #31
 8009ab2:	d422      	bmi.n	8009afa <__lo0bits+0x52>
 8009ab4:	079a      	lsls	r2, r3, #30
 8009ab6:	bf49      	itett	mi
 8009ab8:	085b      	lsrmi	r3, r3, #1
 8009aba:	089b      	lsrpl	r3, r3, #2
 8009abc:	6003      	strmi	r3, [r0, #0]
 8009abe:	2201      	movmi	r2, #1
 8009ac0:	bf5c      	itt	pl
 8009ac2:	6003      	strpl	r3, [r0, #0]
 8009ac4:	2202      	movpl	r2, #2
 8009ac6:	4610      	mov	r0, r2
 8009ac8:	4770      	bx	lr
 8009aca:	b299      	uxth	r1, r3
 8009acc:	b909      	cbnz	r1, 8009ad2 <__lo0bits+0x2a>
 8009ace:	0c1b      	lsrs	r3, r3, #16
 8009ad0:	2210      	movs	r2, #16
 8009ad2:	b2d9      	uxtb	r1, r3
 8009ad4:	b909      	cbnz	r1, 8009ada <__lo0bits+0x32>
 8009ad6:	3208      	adds	r2, #8
 8009ad8:	0a1b      	lsrs	r3, r3, #8
 8009ada:	0719      	lsls	r1, r3, #28
 8009adc:	bf04      	itt	eq
 8009ade:	091b      	lsreq	r3, r3, #4
 8009ae0:	3204      	addeq	r2, #4
 8009ae2:	0799      	lsls	r1, r3, #30
 8009ae4:	bf04      	itt	eq
 8009ae6:	089b      	lsreq	r3, r3, #2
 8009ae8:	3202      	addeq	r2, #2
 8009aea:	07d9      	lsls	r1, r3, #31
 8009aec:	d403      	bmi.n	8009af6 <__lo0bits+0x4e>
 8009aee:	085b      	lsrs	r3, r3, #1
 8009af0:	f102 0201 	add.w	r2, r2, #1
 8009af4:	d003      	beq.n	8009afe <__lo0bits+0x56>
 8009af6:	6003      	str	r3, [r0, #0]
 8009af8:	e7e5      	b.n	8009ac6 <__lo0bits+0x1e>
 8009afa:	2200      	movs	r2, #0
 8009afc:	e7e3      	b.n	8009ac6 <__lo0bits+0x1e>
 8009afe:	2220      	movs	r2, #32
 8009b00:	e7e1      	b.n	8009ac6 <__lo0bits+0x1e>
	...

08009b04 <__i2b>:
 8009b04:	b510      	push	{r4, lr}
 8009b06:	460c      	mov	r4, r1
 8009b08:	2101      	movs	r1, #1
 8009b0a:	f7ff ff05 	bl	8009918 <_Balloc>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	b928      	cbnz	r0, 8009b1e <__i2b+0x1a>
 8009b12:	4b05      	ldr	r3, [pc, #20]	; (8009b28 <__i2b+0x24>)
 8009b14:	4805      	ldr	r0, [pc, #20]	; (8009b2c <__i2b+0x28>)
 8009b16:	f240 1145 	movw	r1, #325	; 0x145
 8009b1a:	f000 fb5b 	bl	800a1d4 <__assert_func>
 8009b1e:	2301      	movs	r3, #1
 8009b20:	6144      	str	r4, [r0, #20]
 8009b22:	6103      	str	r3, [r0, #16]
 8009b24:	bd10      	pop	{r4, pc}
 8009b26:	bf00      	nop
 8009b28:	0800ca14 	.word	0x0800ca14
 8009b2c:	0800ca36 	.word	0x0800ca36

08009b30 <__multiply>:
 8009b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b34:	4691      	mov	r9, r2
 8009b36:	690a      	ldr	r2, [r1, #16]
 8009b38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	bfb8      	it	lt
 8009b40:	460b      	movlt	r3, r1
 8009b42:	460c      	mov	r4, r1
 8009b44:	bfbc      	itt	lt
 8009b46:	464c      	movlt	r4, r9
 8009b48:	4699      	movlt	r9, r3
 8009b4a:	6927      	ldr	r7, [r4, #16]
 8009b4c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009b50:	68a3      	ldr	r3, [r4, #8]
 8009b52:	6861      	ldr	r1, [r4, #4]
 8009b54:	eb07 060a 	add.w	r6, r7, sl
 8009b58:	42b3      	cmp	r3, r6
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	bfb8      	it	lt
 8009b5e:	3101      	addlt	r1, #1
 8009b60:	f7ff feda 	bl	8009918 <_Balloc>
 8009b64:	b930      	cbnz	r0, 8009b74 <__multiply+0x44>
 8009b66:	4602      	mov	r2, r0
 8009b68:	4b44      	ldr	r3, [pc, #272]	; (8009c7c <__multiply+0x14c>)
 8009b6a:	4845      	ldr	r0, [pc, #276]	; (8009c80 <__multiply+0x150>)
 8009b6c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009b70:	f000 fb30 	bl	800a1d4 <__assert_func>
 8009b74:	f100 0514 	add.w	r5, r0, #20
 8009b78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b7c:	462b      	mov	r3, r5
 8009b7e:	2200      	movs	r2, #0
 8009b80:	4543      	cmp	r3, r8
 8009b82:	d321      	bcc.n	8009bc8 <__multiply+0x98>
 8009b84:	f104 0314 	add.w	r3, r4, #20
 8009b88:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009b8c:	f109 0314 	add.w	r3, r9, #20
 8009b90:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009b94:	9202      	str	r2, [sp, #8]
 8009b96:	1b3a      	subs	r2, r7, r4
 8009b98:	3a15      	subs	r2, #21
 8009b9a:	f022 0203 	bic.w	r2, r2, #3
 8009b9e:	3204      	adds	r2, #4
 8009ba0:	f104 0115 	add.w	r1, r4, #21
 8009ba4:	428f      	cmp	r7, r1
 8009ba6:	bf38      	it	cc
 8009ba8:	2204      	movcc	r2, #4
 8009baa:	9201      	str	r2, [sp, #4]
 8009bac:	9a02      	ldr	r2, [sp, #8]
 8009bae:	9303      	str	r3, [sp, #12]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d80c      	bhi.n	8009bce <__multiply+0x9e>
 8009bb4:	2e00      	cmp	r6, #0
 8009bb6:	dd03      	ble.n	8009bc0 <__multiply+0x90>
 8009bb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d05b      	beq.n	8009c78 <__multiply+0x148>
 8009bc0:	6106      	str	r6, [r0, #16]
 8009bc2:	b005      	add	sp, #20
 8009bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc8:	f843 2b04 	str.w	r2, [r3], #4
 8009bcc:	e7d8      	b.n	8009b80 <__multiply+0x50>
 8009bce:	f8b3 a000 	ldrh.w	sl, [r3]
 8009bd2:	f1ba 0f00 	cmp.w	sl, #0
 8009bd6:	d024      	beq.n	8009c22 <__multiply+0xf2>
 8009bd8:	f104 0e14 	add.w	lr, r4, #20
 8009bdc:	46a9      	mov	r9, r5
 8009bde:	f04f 0c00 	mov.w	ip, #0
 8009be2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009be6:	f8d9 1000 	ldr.w	r1, [r9]
 8009bea:	fa1f fb82 	uxth.w	fp, r2
 8009bee:	b289      	uxth	r1, r1
 8009bf0:	fb0a 110b 	mla	r1, sl, fp, r1
 8009bf4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009bf8:	f8d9 2000 	ldr.w	r2, [r9]
 8009bfc:	4461      	add	r1, ip
 8009bfe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c02:	fb0a c20b 	mla	r2, sl, fp, ip
 8009c06:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009c0a:	b289      	uxth	r1, r1
 8009c0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c10:	4577      	cmp	r7, lr
 8009c12:	f849 1b04 	str.w	r1, [r9], #4
 8009c16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c1a:	d8e2      	bhi.n	8009be2 <__multiply+0xb2>
 8009c1c:	9a01      	ldr	r2, [sp, #4]
 8009c1e:	f845 c002 	str.w	ip, [r5, r2]
 8009c22:	9a03      	ldr	r2, [sp, #12]
 8009c24:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009c28:	3304      	adds	r3, #4
 8009c2a:	f1b9 0f00 	cmp.w	r9, #0
 8009c2e:	d021      	beq.n	8009c74 <__multiply+0x144>
 8009c30:	6829      	ldr	r1, [r5, #0]
 8009c32:	f104 0c14 	add.w	ip, r4, #20
 8009c36:	46ae      	mov	lr, r5
 8009c38:	f04f 0a00 	mov.w	sl, #0
 8009c3c:	f8bc b000 	ldrh.w	fp, [ip]
 8009c40:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009c44:	fb09 220b 	mla	r2, r9, fp, r2
 8009c48:	4452      	add	r2, sl
 8009c4a:	b289      	uxth	r1, r1
 8009c4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c50:	f84e 1b04 	str.w	r1, [lr], #4
 8009c54:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009c58:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c5c:	f8be 1000 	ldrh.w	r1, [lr]
 8009c60:	fb09 110a 	mla	r1, r9, sl, r1
 8009c64:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009c68:	4567      	cmp	r7, ip
 8009c6a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c6e:	d8e5      	bhi.n	8009c3c <__multiply+0x10c>
 8009c70:	9a01      	ldr	r2, [sp, #4]
 8009c72:	50a9      	str	r1, [r5, r2]
 8009c74:	3504      	adds	r5, #4
 8009c76:	e799      	b.n	8009bac <__multiply+0x7c>
 8009c78:	3e01      	subs	r6, #1
 8009c7a:	e79b      	b.n	8009bb4 <__multiply+0x84>
 8009c7c:	0800ca14 	.word	0x0800ca14
 8009c80:	0800ca36 	.word	0x0800ca36

08009c84 <__pow5mult>:
 8009c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c88:	4615      	mov	r5, r2
 8009c8a:	f012 0203 	ands.w	r2, r2, #3
 8009c8e:	4606      	mov	r6, r0
 8009c90:	460f      	mov	r7, r1
 8009c92:	d007      	beq.n	8009ca4 <__pow5mult+0x20>
 8009c94:	4c25      	ldr	r4, [pc, #148]	; (8009d2c <__pow5mult+0xa8>)
 8009c96:	3a01      	subs	r2, #1
 8009c98:	2300      	movs	r3, #0
 8009c9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c9e:	f7ff fe9d 	bl	80099dc <__multadd>
 8009ca2:	4607      	mov	r7, r0
 8009ca4:	10ad      	asrs	r5, r5, #2
 8009ca6:	d03d      	beq.n	8009d24 <__pow5mult+0xa0>
 8009ca8:	69f4      	ldr	r4, [r6, #28]
 8009caa:	b97c      	cbnz	r4, 8009ccc <__pow5mult+0x48>
 8009cac:	2010      	movs	r0, #16
 8009cae:	f7ff fcd1 	bl	8009654 <malloc>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	61f0      	str	r0, [r6, #28]
 8009cb6:	b928      	cbnz	r0, 8009cc4 <__pow5mult+0x40>
 8009cb8:	4b1d      	ldr	r3, [pc, #116]	; (8009d30 <__pow5mult+0xac>)
 8009cba:	481e      	ldr	r0, [pc, #120]	; (8009d34 <__pow5mult+0xb0>)
 8009cbc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009cc0:	f000 fa88 	bl	800a1d4 <__assert_func>
 8009cc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009cc8:	6004      	str	r4, [r0, #0]
 8009cca:	60c4      	str	r4, [r0, #12]
 8009ccc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009cd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009cd4:	b94c      	cbnz	r4, 8009cea <__pow5mult+0x66>
 8009cd6:	f240 2171 	movw	r1, #625	; 0x271
 8009cda:	4630      	mov	r0, r6
 8009cdc:	f7ff ff12 	bl	8009b04 <__i2b>
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	6003      	str	r3, [r0, #0]
 8009cea:	f04f 0900 	mov.w	r9, #0
 8009cee:	07eb      	lsls	r3, r5, #31
 8009cf0:	d50a      	bpl.n	8009d08 <__pow5mult+0x84>
 8009cf2:	4639      	mov	r1, r7
 8009cf4:	4622      	mov	r2, r4
 8009cf6:	4630      	mov	r0, r6
 8009cf8:	f7ff ff1a 	bl	8009b30 <__multiply>
 8009cfc:	4639      	mov	r1, r7
 8009cfe:	4680      	mov	r8, r0
 8009d00:	4630      	mov	r0, r6
 8009d02:	f7ff fe49 	bl	8009998 <_Bfree>
 8009d06:	4647      	mov	r7, r8
 8009d08:	106d      	asrs	r5, r5, #1
 8009d0a:	d00b      	beq.n	8009d24 <__pow5mult+0xa0>
 8009d0c:	6820      	ldr	r0, [r4, #0]
 8009d0e:	b938      	cbnz	r0, 8009d20 <__pow5mult+0x9c>
 8009d10:	4622      	mov	r2, r4
 8009d12:	4621      	mov	r1, r4
 8009d14:	4630      	mov	r0, r6
 8009d16:	f7ff ff0b 	bl	8009b30 <__multiply>
 8009d1a:	6020      	str	r0, [r4, #0]
 8009d1c:	f8c0 9000 	str.w	r9, [r0]
 8009d20:	4604      	mov	r4, r0
 8009d22:	e7e4      	b.n	8009cee <__pow5mult+0x6a>
 8009d24:	4638      	mov	r0, r7
 8009d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d2a:	bf00      	nop
 8009d2c:	0800cb80 	.word	0x0800cb80
 8009d30:	0800c9a5 	.word	0x0800c9a5
 8009d34:	0800ca36 	.word	0x0800ca36

08009d38 <__lshift>:
 8009d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d3c:	460c      	mov	r4, r1
 8009d3e:	6849      	ldr	r1, [r1, #4]
 8009d40:	6923      	ldr	r3, [r4, #16]
 8009d42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d46:	68a3      	ldr	r3, [r4, #8]
 8009d48:	4607      	mov	r7, r0
 8009d4a:	4691      	mov	r9, r2
 8009d4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d50:	f108 0601 	add.w	r6, r8, #1
 8009d54:	42b3      	cmp	r3, r6
 8009d56:	db0b      	blt.n	8009d70 <__lshift+0x38>
 8009d58:	4638      	mov	r0, r7
 8009d5a:	f7ff fddd 	bl	8009918 <_Balloc>
 8009d5e:	4605      	mov	r5, r0
 8009d60:	b948      	cbnz	r0, 8009d76 <__lshift+0x3e>
 8009d62:	4602      	mov	r2, r0
 8009d64:	4b28      	ldr	r3, [pc, #160]	; (8009e08 <__lshift+0xd0>)
 8009d66:	4829      	ldr	r0, [pc, #164]	; (8009e0c <__lshift+0xd4>)
 8009d68:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009d6c:	f000 fa32 	bl	800a1d4 <__assert_func>
 8009d70:	3101      	adds	r1, #1
 8009d72:	005b      	lsls	r3, r3, #1
 8009d74:	e7ee      	b.n	8009d54 <__lshift+0x1c>
 8009d76:	2300      	movs	r3, #0
 8009d78:	f100 0114 	add.w	r1, r0, #20
 8009d7c:	f100 0210 	add.w	r2, r0, #16
 8009d80:	4618      	mov	r0, r3
 8009d82:	4553      	cmp	r3, sl
 8009d84:	db33      	blt.n	8009dee <__lshift+0xb6>
 8009d86:	6920      	ldr	r0, [r4, #16]
 8009d88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d8c:	f104 0314 	add.w	r3, r4, #20
 8009d90:	f019 091f 	ands.w	r9, r9, #31
 8009d94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d9c:	d02b      	beq.n	8009df6 <__lshift+0xbe>
 8009d9e:	f1c9 0e20 	rsb	lr, r9, #32
 8009da2:	468a      	mov	sl, r1
 8009da4:	2200      	movs	r2, #0
 8009da6:	6818      	ldr	r0, [r3, #0]
 8009da8:	fa00 f009 	lsl.w	r0, r0, r9
 8009dac:	4310      	orrs	r0, r2
 8009dae:	f84a 0b04 	str.w	r0, [sl], #4
 8009db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009db6:	459c      	cmp	ip, r3
 8009db8:	fa22 f20e 	lsr.w	r2, r2, lr
 8009dbc:	d8f3      	bhi.n	8009da6 <__lshift+0x6e>
 8009dbe:	ebac 0304 	sub.w	r3, ip, r4
 8009dc2:	3b15      	subs	r3, #21
 8009dc4:	f023 0303 	bic.w	r3, r3, #3
 8009dc8:	3304      	adds	r3, #4
 8009dca:	f104 0015 	add.w	r0, r4, #21
 8009dce:	4584      	cmp	ip, r0
 8009dd0:	bf38      	it	cc
 8009dd2:	2304      	movcc	r3, #4
 8009dd4:	50ca      	str	r2, [r1, r3]
 8009dd6:	b10a      	cbz	r2, 8009ddc <__lshift+0xa4>
 8009dd8:	f108 0602 	add.w	r6, r8, #2
 8009ddc:	3e01      	subs	r6, #1
 8009dde:	4638      	mov	r0, r7
 8009de0:	612e      	str	r6, [r5, #16]
 8009de2:	4621      	mov	r1, r4
 8009de4:	f7ff fdd8 	bl	8009998 <_Bfree>
 8009de8:	4628      	mov	r0, r5
 8009dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dee:	f842 0f04 	str.w	r0, [r2, #4]!
 8009df2:	3301      	adds	r3, #1
 8009df4:	e7c5      	b.n	8009d82 <__lshift+0x4a>
 8009df6:	3904      	subs	r1, #4
 8009df8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dfc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e00:	459c      	cmp	ip, r3
 8009e02:	d8f9      	bhi.n	8009df8 <__lshift+0xc0>
 8009e04:	e7ea      	b.n	8009ddc <__lshift+0xa4>
 8009e06:	bf00      	nop
 8009e08:	0800ca14 	.word	0x0800ca14
 8009e0c:	0800ca36 	.word	0x0800ca36

08009e10 <__mcmp>:
 8009e10:	b530      	push	{r4, r5, lr}
 8009e12:	6902      	ldr	r2, [r0, #16]
 8009e14:	690c      	ldr	r4, [r1, #16]
 8009e16:	1b12      	subs	r2, r2, r4
 8009e18:	d10e      	bne.n	8009e38 <__mcmp+0x28>
 8009e1a:	f100 0314 	add.w	r3, r0, #20
 8009e1e:	3114      	adds	r1, #20
 8009e20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009e24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009e28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009e2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009e30:	42a5      	cmp	r5, r4
 8009e32:	d003      	beq.n	8009e3c <__mcmp+0x2c>
 8009e34:	d305      	bcc.n	8009e42 <__mcmp+0x32>
 8009e36:	2201      	movs	r2, #1
 8009e38:	4610      	mov	r0, r2
 8009e3a:	bd30      	pop	{r4, r5, pc}
 8009e3c:	4283      	cmp	r3, r0
 8009e3e:	d3f3      	bcc.n	8009e28 <__mcmp+0x18>
 8009e40:	e7fa      	b.n	8009e38 <__mcmp+0x28>
 8009e42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e46:	e7f7      	b.n	8009e38 <__mcmp+0x28>

08009e48 <__mdiff>:
 8009e48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e4c:	460c      	mov	r4, r1
 8009e4e:	4606      	mov	r6, r0
 8009e50:	4611      	mov	r1, r2
 8009e52:	4620      	mov	r0, r4
 8009e54:	4690      	mov	r8, r2
 8009e56:	f7ff ffdb 	bl	8009e10 <__mcmp>
 8009e5a:	1e05      	subs	r5, r0, #0
 8009e5c:	d110      	bne.n	8009e80 <__mdiff+0x38>
 8009e5e:	4629      	mov	r1, r5
 8009e60:	4630      	mov	r0, r6
 8009e62:	f7ff fd59 	bl	8009918 <_Balloc>
 8009e66:	b930      	cbnz	r0, 8009e76 <__mdiff+0x2e>
 8009e68:	4b3a      	ldr	r3, [pc, #232]	; (8009f54 <__mdiff+0x10c>)
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	f240 2137 	movw	r1, #567	; 0x237
 8009e70:	4839      	ldr	r0, [pc, #228]	; (8009f58 <__mdiff+0x110>)
 8009e72:	f000 f9af 	bl	800a1d4 <__assert_func>
 8009e76:	2301      	movs	r3, #1
 8009e78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e80:	bfa4      	itt	ge
 8009e82:	4643      	movge	r3, r8
 8009e84:	46a0      	movge	r8, r4
 8009e86:	4630      	mov	r0, r6
 8009e88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009e8c:	bfa6      	itte	ge
 8009e8e:	461c      	movge	r4, r3
 8009e90:	2500      	movge	r5, #0
 8009e92:	2501      	movlt	r5, #1
 8009e94:	f7ff fd40 	bl	8009918 <_Balloc>
 8009e98:	b920      	cbnz	r0, 8009ea4 <__mdiff+0x5c>
 8009e9a:	4b2e      	ldr	r3, [pc, #184]	; (8009f54 <__mdiff+0x10c>)
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	f240 2145 	movw	r1, #581	; 0x245
 8009ea2:	e7e5      	b.n	8009e70 <__mdiff+0x28>
 8009ea4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009ea8:	6926      	ldr	r6, [r4, #16]
 8009eaa:	60c5      	str	r5, [r0, #12]
 8009eac:	f104 0914 	add.w	r9, r4, #20
 8009eb0:	f108 0514 	add.w	r5, r8, #20
 8009eb4:	f100 0e14 	add.w	lr, r0, #20
 8009eb8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009ebc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009ec0:	f108 0210 	add.w	r2, r8, #16
 8009ec4:	46f2      	mov	sl, lr
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ecc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009ed0:	fa11 f88b 	uxtah	r8, r1, fp
 8009ed4:	b299      	uxth	r1, r3
 8009ed6:	0c1b      	lsrs	r3, r3, #16
 8009ed8:	eba8 0801 	sub.w	r8, r8, r1
 8009edc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ee0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009ee4:	fa1f f888 	uxth.w	r8, r8
 8009ee8:	1419      	asrs	r1, r3, #16
 8009eea:	454e      	cmp	r6, r9
 8009eec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009ef0:	f84a 3b04 	str.w	r3, [sl], #4
 8009ef4:	d8e8      	bhi.n	8009ec8 <__mdiff+0x80>
 8009ef6:	1b33      	subs	r3, r6, r4
 8009ef8:	3b15      	subs	r3, #21
 8009efa:	f023 0303 	bic.w	r3, r3, #3
 8009efe:	3304      	adds	r3, #4
 8009f00:	3415      	adds	r4, #21
 8009f02:	42a6      	cmp	r6, r4
 8009f04:	bf38      	it	cc
 8009f06:	2304      	movcc	r3, #4
 8009f08:	441d      	add	r5, r3
 8009f0a:	4473      	add	r3, lr
 8009f0c:	469e      	mov	lr, r3
 8009f0e:	462e      	mov	r6, r5
 8009f10:	4566      	cmp	r6, ip
 8009f12:	d30e      	bcc.n	8009f32 <__mdiff+0xea>
 8009f14:	f10c 0203 	add.w	r2, ip, #3
 8009f18:	1b52      	subs	r2, r2, r5
 8009f1a:	f022 0203 	bic.w	r2, r2, #3
 8009f1e:	3d03      	subs	r5, #3
 8009f20:	45ac      	cmp	ip, r5
 8009f22:	bf38      	it	cc
 8009f24:	2200      	movcc	r2, #0
 8009f26:	4413      	add	r3, r2
 8009f28:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009f2c:	b17a      	cbz	r2, 8009f4e <__mdiff+0x106>
 8009f2e:	6107      	str	r7, [r0, #16]
 8009f30:	e7a4      	b.n	8009e7c <__mdiff+0x34>
 8009f32:	f856 8b04 	ldr.w	r8, [r6], #4
 8009f36:	fa11 f288 	uxtah	r2, r1, r8
 8009f3a:	1414      	asrs	r4, r2, #16
 8009f3c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009f40:	b292      	uxth	r2, r2
 8009f42:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009f46:	f84e 2b04 	str.w	r2, [lr], #4
 8009f4a:	1421      	asrs	r1, r4, #16
 8009f4c:	e7e0      	b.n	8009f10 <__mdiff+0xc8>
 8009f4e:	3f01      	subs	r7, #1
 8009f50:	e7ea      	b.n	8009f28 <__mdiff+0xe0>
 8009f52:	bf00      	nop
 8009f54:	0800ca14 	.word	0x0800ca14
 8009f58:	0800ca36 	.word	0x0800ca36

08009f5c <__d2b>:
 8009f5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f60:	460f      	mov	r7, r1
 8009f62:	2101      	movs	r1, #1
 8009f64:	ec59 8b10 	vmov	r8, r9, d0
 8009f68:	4616      	mov	r6, r2
 8009f6a:	f7ff fcd5 	bl	8009918 <_Balloc>
 8009f6e:	4604      	mov	r4, r0
 8009f70:	b930      	cbnz	r0, 8009f80 <__d2b+0x24>
 8009f72:	4602      	mov	r2, r0
 8009f74:	4b24      	ldr	r3, [pc, #144]	; (800a008 <__d2b+0xac>)
 8009f76:	4825      	ldr	r0, [pc, #148]	; (800a00c <__d2b+0xb0>)
 8009f78:	f240 310f 	movw	r1, #783	; 0x30f
 8009f7c:	f000 f92a 	bl	800a1d4 <__assert_func>
 8009f80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009f84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f88:	bb2d      	cbnz	r5, 8009fd6 <__d2b+0x7a>
 8009f8a:	9301      	str	r3, [sp, #4]
 8009f8c:	f1b8 0300 	subs.w	r3, r8, #0
 8009f90:	d026      	beq.n	8009fe0 <__d2b+0x84>
 8009f92:	4668      	mov	r0, sp
 8009f94:	9300      	str	r3, [sp, #0]
 8009f96:	f7ff fd87 	bl	8009aa8 <__lo0bits>
 8009f9a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009f9e:	b1e8      	cbz	r0, 8009fdc <__d2b+0x80>
 8009fa0:	f1c0 0320 	rsb	r3, r0, #32
 8009fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8009fa8:	430b      	orrs	r3, r1
 8009faa:	40c2      	lsrs	r2, r0
 8009fac:	6163      	str	r3, [r4, #20]
 8009fae:	9201      	str	r2, [sp, #4]
 8009fb0:	9b01      	ldr	r3, [sp, #4]
 8009fb2:	61a3      	str	r3, [r4, #24]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	bf14      	ite	ne
 8009fb8:	2202      	movne	r2, #2
 8009fba:	2201      	moveq	r2, #1
 8009fbc:	6122      	str	r2, [r4, #16]
 8009fbe:	b1bd      	cbz	r5, 8009ff0 <__d2b+0x94>
 8009fc0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009fc4:	4405      	add	r5, r0
 8009fc6:	603d      	str	r5, [r7, #0]
 8009fc8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009fcc:	6030      	str	r0, [r6, #0]
 8009fce:	4620      	mov	r0, r4
 8009fd0:	b003      	add	sp, #12
 8009fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009fda:	e7d6      	b.n	8009f8a <__d2b+0x2e>
 8009fdc:	6161      	str	r1, [r4, #20]
 8009fde:	e7e7      	b.n	8009fb0 <__d2b+0x54>
 8009fe0:	a801      	add	r0, sp, #4
 8009fe2:	f7ff fd61 	bl	8009aa8 <__lo0bits>
 8009fe6:	9b01      	ldr	r3, [sp, #4]
 8009fe8:	6163      	str	r3, [r4, #20]
 8009fea:	3020      	adds	r0, #32
 8009fec:	2201      	movs	r2, #1
 8009fee:	e7e5      	b.n	8009fbc <__d2b+0x60>
 8009ff0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ff4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ff8:	6038      	str	r0, [r7, #0]
 8009ffa:	6918      	ldr	r0, [r3, #16]
 8009ffc:	f7ff fd34 	bl	8009a68 <__hi0bits>
 800a000:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a004:	e7e2      	b.n	8009fcc <__d2b+0x70>
 800a006:	bf00      	nop
 800a008:	0800ca14 	.word	0x0800ca14
 800a00c:	0800ca36 	.word	0x0800ca36

0800a010 <__sread>:
 800a010:	b510      	push	{r4, lr}
 800a012:	460c      	mov	r4, r1
 800a014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a018:	f000 f8a8 	bl	800a16c <_read_r>
 800a01c:	2800      	cmp	r0, #0
 800a01e:	bfab      	itete	ge
 800a020:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a022:	89a3      	ldrhlt	r3, [r4, #12]
 800a024:	181b      	addge	r3, r3, r0
 800a026:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a02a:	bfac      	ite	ge
 800a02c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a02e:	81a3      	strhlt	r3, [r4, #12]
 800a030:	bd10      	pop	{r4, pc}

0800a032 <__swrite>:
 800a032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a036:	461f      	mov	r7, r3
 800a038:	898b      	ldrh	r3, [r1, #12]
 800a03a:	05db      	lsls	r3, r3, #23
 800a03c:	4605      	mov	r5, r0
 800a03e:	460c      	mov	r4, r1
 800a040:	4616      	mov	r6, r2
 800a042:	d505      	bpl.n	800a050 <__swrite+0x1e>
 800a044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a048:	2302      	movs	r3, #2
 800a04a:	2200      	movs	r2, #0
 800a04c:	f000 f87c 	bl	800a148 <_lseek_r>
 800a050:	89a3      	ldrh	r3, [r4, #12]
 800a052:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a056:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a05a:	81a3      	strh	r3, [r4, #12]
 800a05c:	4632      	mov	r2, r6
 800a05e:	463b      	mov	r3, r7
 800a060:	4628      	mov	r0, r5
 800a062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a066:	f000 b8a3 	b.w	800a1b0 <_write_r>

0800a06a <__sseek>:
 800a06a:	b510      	push	{r4, lr}
 800a06c:	460c      	mov	r4, r1
 800a06e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a072:	f000 f869 	bl	800a148 <_lseek_r>
 800a076:	1c43      	adds	r3, r0, #1
 800a078:	89a3      	ldrh	r3, [r4, #12]
 800a07a:	bf15      	itete	ne
 800a07c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a07e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a082:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a086:	81a3      	strheq	r3, [r4, #12]
 800a088:	bf18      	it	ne
 800a08a:	81a3      	strhne	r3, [r4, #12]
 800a08c:	bd10      	pop	{r4, pc}

0800a08e <__sclose>:
 800a08e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a092:	f000 b849 	b.w	800a128 <_close_r>

0800a096 <_realloc_r>:
 800a096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a09a:	4680      	mov	r8, r0
 800a09c:	4614      	mov	r4, r2
 800a09e:	460e      	mov	r6, r1
 800a0a0:	b921      	cbnz	r1, 800a0ac <_realloc_r+0x16>
 800a0a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a6:	4611      	mov	r1, r2
 800a0a8:	f7ff bafc 	b.w	80096a4 <_malloc_r>
 800a0ac:	b92a      	cbnz	r2, 800a0ba <_realloc_r+0x24>
 800a0ae:	f7ff f92d 	bl	800930c <_free_r>
 800a0b2:	4625      	mov	r5, r4
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0ba:	f000 f8d1 	bl	800a260 <_malloc_usable_size_r>
 800a0be:	4284      	cmp	r4, r0
 800a0c0:	4607      	mov	r7, r0
 800a0c2:	d802      	bhi.n	800a0ca <_realloc_r+0x34>
 800a0c4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a0c8:	d812      	bhi.n	800a0f0 <_realloc_r+0x5a>
 800a0ca:	4621      	mov	r1, r4
 800a0cc:	4640      	mov	r0, r8
 800a0ce:	f7ff fae9 	bl	80096a4 <_malloc_r>
 800a0d2:	4605      	mov	r5, r0
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	d0ed      	beq.n	800a0b4 <_realloc_r+0x1e>
 800a0d8:	42bc      	cmp	r4, r7
 800a0da:	4622      	mov	r2, r4
 800a0dc:	4631      	mov	r1, r6
 800a0de:	bf28      	it	cs
 800a0e0:	463a      	movcs	r2, r7
 800a0e2:	f7fe fa8a 	bl	80085fa <memcpy>
 800a0e6:	4631      	mov	r1, r6
 800a0e8:	4640      	mov	r0, r8
 800a0ea:	f7ff f90f 	bl	800930c <_free_r>
 800a0ee:	e7e1      	b.n	800a0b4 <_realloc_r+0x1e>
 800a0f0:	4635      	mov	r5, r6
 800a0f2:	e7df      	b.n	800a0b4 <_realloc_r+0x1e>

0800a0f4 <memmove>:
 800a0f4:	4288      	cmp	r0, r1
 800a0f6:	b510      	push	{r4, lr}
 800a0f8:	eb01 0402 	add.w	r4, r1, r2
 800a0fc:	d902      	bls.n	800a104 <memmove+0x10>
 800a0fe:	4284      	cmp	r4, r0
 800a100:	4623      	mov	r3, r4
 800a102:	d807      	bhi.n	800a114 <memmove+0x20>
 800a104:	1e43      	subs	r3, r0, #1
 800a106:	42a1      	cmp	r1, r4
 800a108:	d008      	beq.n	800a11c <memmove+0x28>
 800a10a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a10e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a112:	e7f8      	b.n	800a106 <memmove+0x12>
 800a114:	4402      	add	r2, r0
 800a116:	4601      	mov	r1, r0
 800a118:	428a      	cmp	r2, r1
 800a11a:	d100      	bne.n	800a11e <memmove+0x2a>
 800a11c:	bd10      	pop	{r4, pc}
 800a11e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a122:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a126:	e7f7      	b.n	800a118 <memmove+0x24>

0800a128 <_close_r>:
 800a128:	b538      	push	{r3, r4, r5, lr}
 800a12a:	4d06      	ldr	r5, [pc, #24]	; (800a144 <_close_r+0x1c>)
 800a12c:	2300      	movs	r3, #0
 800a12e:	4604      	mov	r4, r0
 800a130:	4608      	mov	r0, r1
 800a132:	602b      	str	r3, [r5, #0]
 800a134:	f7f7 fe1d 	bl	8001d72 <_close>
 800a138:	1c43      	adds	r3, r0, #1
 800a13a:	d102      	bne.n	800a142 <_close_r+0x1a>
 800a13c:	682b      	ldr	r3, [r5, #0]
 800a13e:	b103      	cbz	r3, 800a142 <_close_r+0x1a>
 800a140:	6023      	str	r3, [r4, #0]
 800a142:	bd38      	pop	{r3, r4, r5, pc}
 800a144:	20005274 	.word	0x20005274

0800a148 <_lseek_r>:
 800a148:	b538      	push	{r3, r4, r5, lr}
 800a14a:	4d07      	ldr	r5, [pc, #28]	; (800a168 <_lseek_r+0x20>)
 800a14c:	4604      	mov	r4, r0
 800a14e:	4608      	mov	r0, r1
 800a150:	4611      	mov	r1, r2
 800a152:	2200      	movs	r2, #0
 800a154:	602a      	str	r2, [r5, #0]
 800a156:	461a      	mov	r2, r3
 800a158:	f7f7 fe32 	bl	8001dc0 <_lseek>
 800a15c:	1c43      	adds	r3, r0, #1
 800a15e:	d102      	bne.n	800a166 <_lseek_r+0x1e>
 800a160:	682b      	ldr	r3, [r5, #0]
 800a162:	b103      	cbz	r3, 800a166 <_lseek_r+0x1e>
 800a164:	6023      	str	r3, [r4, #0]
 800a166:	bd38      	pop	{r3, r4, r5, pc}
 800a168:	20005274 	.word	0x20005274

0800a16c <_read_r>:
 800a16c:	b538      	push	{r3, r4, r5, lr}
 800a16e:	4d07      	ldr	r5, [pc, #28]	; (800a18c <_read_r+0x20>)
 800a170:	4604      	mov	r4, r0
 800a172:	4608      	mov	r0, r1
 800a174:	4611      	mov	r1, r2
 800a176:	2200      	movs	r2, #0
 800a178:	602a      	str	r2, [r5, #0]
 800a17a:	461a      	mov	r2, r3
 800a17c:	f7f7 fdc0 	bl	8001d00 <_read>
 800a180:	1c43      	adds	r3, r0, #1
 800a182:	d102      	bne.n	800a18a <_read_r+0x1e>
 800a184:	682b      	ldr	r3, [r5, #0]
 800a186:	b103      	cbz	r3, 800a18a <_read_r+0x1e>
 800a188:	6023      	str	r3, [r4, #0]
 800a18a:	bd38      	pop	{r3, r4, r5, pc}
 800a18c:	20005274 	.word	0x20005274

0800a190 <_sbrk_r>:
 800a190:	b538      	push	{r3, r4, r5, lr}
 800a192:	4d06      	ldr	r5, [pc, #24]	; (800a1ac <_sbrk_r+0x1c>)
 800a194:	2300      	movs	r3, #0
 800a196:	4604      	mov	r4, r0
 800a198:	4608      	mov	r0, r1
 800a19a:	602b      	str	r3, [r5, #0]
 800a19c:	f7f7 fe1e 	bl	8001ddc <_sbrk>
 800a1a0:	1c43      	adds	r3, r0, #1
 800a1a2:	d102      	bne.n	800a1aa <_sbrk_r+0x1a>
 800a1a4:	682b      	ldr	r3, [r5, #0]
 800a1a6:	b103      	cbz	r3, 800a1aa <_sbrk_r+0x1a>
 800a1a8:	6023      	str	r3, [r4, #0]
 800a1aa:	bd38      	pop	{r3, r4, r5, pc}
 800a1ac:	20005274 	.word	0x20005274

0800a1b0 <_write_r>:
 800a1b0:	b538      	push	{r3, r4, r5, lr}
 800a1b2:	4d07      	ldr	r5, [pc, #28]	; (800a1d0 <_write_r+0x20>)
 800a1b4:	4604      	mov	r4, r0
 800a1b6:	4608      	mov	r0, r1
 800a1b8:	4611      	mov	r1, r2
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	602a      	str	r2, [r5, #0]
 800a1be:	461a      	mov	r2, r3
 800a1c0:	f7f7 fdbb 	bl	8001d3a <_write>
 800a1c4:	1c43      	adds	r3, r0, #1
 800a1c6:	d102      	bne.n	800a1ce <_write_r+0x1e>
 800a1c8:	682b      	ldr	r3, [r5, #0]
 800a1ca:	b103      	cbz	r3, 800a1ce <_write_r+0x1e>
 800a1cc:	6023      	str	r3, [r4, #0]
 800a1ce:	bd38      	pop	{r3, r4, r5, pc}
 800a1d0:	20005274 	.word	0x20005274

0800a1d4 <__assert_func>:
 800a1d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1d6:	4614      	mov	r4, r2
 800a1d8:	461a      	mov	r2, r3
 800a1da:	4b09      	ldr	r3, [pc, #36]	; (800a200 <__assert_func+0x2c>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4605      	mov	r5, r0
 800a1e0:	68d8      	ldr	r0, [r3, #12]
 800a1e2:	b14c      	cbz	r4, 800a1f8 <__assert_func+0x24>
 800a1e4:	4b07      	ldr	r3, [pc, #28]	; (800a204 <__assert_func+0x30>)
 800a1e6:	9100      	str	r1, [sp, #0]
 800a1e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1ec:	4906      	ldr	r1, [pc, #24]	; (800a208 <__assert_func+0x34>)
 800a1ee:	462b      	mov	r3, r5
 800a1f0:	f000 f83e 	bl	800a270 <fiprintf>
 800a1f4:	f000 f85b 	bl	800a2ae <abort>
 800a1f8:	4b04      	ldr	r3, [pc, #16]	; (800a20c <__assert_func+0x38>)
 800a1fa:	461c      	mov	r4, r3
 800a1fc:	e7f3      	b.n	800a1e6 <__assert_func+0x12>
 800a1fe:	bf00      	nop
 800a200:	20000078 	.word	0x20000078
 800a204:	0800cc97 	.word	0x0800cc97
 800a208:	0800cca4 	.word	0x0800cca4
 800a20c:	0800ccd2 	.word	0x0800ccd2

0800a210 <_calloc_r>:
 800a210:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a212:	fba1 2402 	umull	r2, r4, r1, r2
 800a216:	b94c      	cbnz	r4, 800a22c <_calloc_r+0x1c>
 800a218:	4611      	mov	r1, r2
 800a21a:	9201      	str	r2, [sp, #4]
 800a21c:	f7ff fa42 	bl	80096a4 <_malloc_r>
 800a220:	9a01      	ldr	r2, [sp, #4]
 800a222:	4605      	mov	r5, r0
 800a224:	b930      	cbnz	r0, 800a234 <_calloc_r+0x24>
 800a226:	4628      	mov	r0, r5
 800a228:	b003      	add	sp, #12
 800a22a:	bd30      	pop	{r4, r5, pc}
 800a22c:	220c      	movs	r2, #12
 800a22e:	6002      	str	r2, [r0, #0]
 800a230:	2500      	movs	r5, #0
 800a232:	e7f8      	b.n	800a226 <_calloc_r+0x16>
 800a234:	4621      	mov	r1, r4
 800a236:	f7fe f951 	bl	80084dc <memset>
 800a23a:	e7f4      	b.n	800a226 <_calloc_r+0x16>

0800a23c <__ascii_mbtowc>:
 800a23c:	b082      	sub	sp, #8
 800a23e:	b901      	cbnz	r1, 800a242 <__ascii_mbtowc+0x6>
 800a240:	a901      	add	r1, sp, #4
 800a242:	b142      	cbz	r2, 800a256 <__ascii_mbtowc+0x1a>
 800a244:	b14b      	cbz	r3, 800a25a <__ascii_mbtowc+0x1e>
 800a246:	7813      	ldrb	r3, [r2, #0]
 800a248:	600b      	str	r3, [r1, #0]
 800a24a:	7812      	ldrb	r2, [r2, #0]
 800a24c:	1e10      	subs	r0, r2, #0
 800a24e:	bf18      	it	ne
 800a250:	2001      	movne	r0, #1
 800a252:	b002      	add	sp, #8
 800a254:	4770      	bx	lr
 800a256:	4610      	mov	r0, r2
 800a258:	e7fb      	b.n	800a252 <__ascii_mbtowc+0x16>
 800a25a:	f06f 0001 	mvn.w	r0, #1
 800a25e:	e7f8      	b.n	800a252 <__ascii_mbtowc+0x16>

0800a260 <_malloc_usable_size_r>:
 800a260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a264:	1f18      	subs	r0, r3, #4
 800a266:	2b00      	cmp	r3, #0
 800a268:	bfbc      	itt	lt
 800a26a:	580b      	ldrlt	r3, [r1, r0]
 800a26c:	18c0      	addlt	r0, r0, r3
 800a26e:	4770      	bx	lr

0800a270 <fiprintf>:
 800a270:	b40e      	push	{r1, r2, r3}
 800a272:	b503      	push	{r0, r1, lr}
 800a274:	4601      	mov	r1, r0
 800a276:	ab03      	add	r3, sp, #12
 800a278:	4805      	ldr	r0, [pc, #20]	; (800a290 <fiprintf+0x20>)
 800a27a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a27e:	6800      	ldr	r0, [r0, #0]
 800a280:	9301      	str	r3, [sp, #4]
 800a282:	f000 f845 	bl	800a310 <_vfiprintf_r>
 800a286:	b002      	add	sp, #8
 800a288:	f85d eb04 	ldr.w	lr, [sp], #4
 800a28c:	b003      	add	sp, #12
 800a28e:	4770      	bx	lr
 800a290:	20000078 	.word	0x20000078

0800a294 <__ascii_wctomb>:
 800a294:	b149      	cbz	r1, 800a2aa <__ascii_wctomb+0x16>
 800a296:	2aff      	cmp	r2, #255	; 0xff
 800a298:	bf85      	ittet	hi
 800a29a:	238a      	movhi	r3, #138	; 0x8a
 800a29c:	6003      	strhi	r3, [r0, #0]
 800a29e:	700a      	strbls	r2, [r1, #0]
 800a2a0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a2a4:	bf98      	it	ls
 800a2a6:	2001      	movls	r0, #1
 800a2a8:	4770      	bx	lr
 800a2aa:	4608      	mov	r0, r1
 800a2ac:	4770      	bx	lr

0800a2ae <abort>:
 800a2ae:	b508      	push	{r3, lr}
 800a2b0:	2006      	movs	r0, #6
 800a2b2:	f000 fa89 	bl	800a7c8 <raise>
 800a2b6:	2001      	movs	r0, #1
 800a2b8:	f7f7 fd18 	bl	8001cec <_exit>

0800a2bc <__sfputc_r>:
 800a2bc:	6893      	ldr	r3, [r2, #8]
 800a2be:	3b01      	subs	r3, #1
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	b410      	push	{r4}
 800a2c4:	6093      	str	r3, [r2, #8]
 800a2c6:	da08      	bge.n	800a2da <__sfputc_r+0x1e>
 800a2c8:	6994      	ldr	r4, [r2, #24]
 800a2ca:	42a3      	cmp	r3, r4
 800a2cc:	db01      	blt.n	800a2d2 <__sfputc_r+0x16>
 800a2ce:	290a      	cmp	r1, #10
 800a2d0:	d103      	bne.n	800a2da <__sfputc_r+0x1e>
 800a2d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2d6:	f000 b935 	b.w	800a544 <__swbuf_r>
 800a2da:	6813      	ldr	r3, [r2, #0]
 800a2dc:	1c58      	adds	r0, r3, #1
 800a2de:	6010      	str	r0, [r2, #0]
 800a2e0:	7019      	strb	r1, [r3, #0]
 800a2e2:	4608      	mov	r0, r1
 800a2e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2e8:	4770      	bx	lr

0800a2ea <__sfputs_r>:
 800a2ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ec:	4606      	mov	r6, r0
 800a2ee:	460f      	mov	r7, r1
 800a2f0:	4614      	mov	r4, r2
 800a2f2:	18d5      	adds	r5, r2, r3
 800a2f4:	42ac      	cmp	r4, r5
 800a2f6:	d101      	bne.n	800a2fc <__sfputs_r+0x12>
 800a2f8:	2000      	movs	r0, #0
 800a2fa:	e007      	b.n	800a30c <__sfputs_r+0x22>
 800a2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a300:	463a      	mov	r2, r7
 800a302:	4630      	mov	r0, r6
 800a304:	f7ff ffda 	bl	800a2bc <__sfputc_r>
 800a308:	1c43      	adds	r3, r0, #1
 800a30a:	d1f3      	bne.n	800a2f4 <__sfputs_r+0xa>
 800a30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a310 <_vfiprintf_r>:
 800a310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a314:	460d      	mov	r5, r1
 800a316:	b09d      	sub	sp, #116	; 0x74
 800a318:	4614      	mov	r4, r2
 800a31a:	4698      	mov	r8, r3
 800a31c:	4606      	mov	r6, r0
 800a31e:	b118      	cbz	r0, 800a328 <_vfiprintf_r+0x18>
 800a320:	6a03      	ldr	r3, [r0, #32]
 800a322:	b90b      	cbnz	r3, 800a328 <_vfiprintf_r+0x18>
 800a324:	f7fe f8a4 	bl	8008470 <__sinit>
 800a328:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a32a:	07d9      	lsls	r1, r3, #31
 800a32c:	d405      	bmi.n	800a33a <_vfiprintf_r+0x2a>
 800a32e:	89ab      	ldrh	r3, [r5, #12]
 800a330:	059a      	lsls	r2, r3, #22
 800a332:	d402      	bmi.n	800a33a <_vfiprintf_r+0x2a>
 800a334:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a336:	f7fe f95e 	bl	80085f6 <__retarget_lock_acquire_recursive>
 800a33a:	89ab      	ldrh	r3, [r5, #12]
 800a33c:	071b      	lsls	r3, r3, #28
 800a33e:	d501      	bpl.n	800a344 <_vfiprintf_r+0x34>
 800a340:	692b      	ldr	r3, [r5, #16]
 800a342:	b99b      	cbnz	r3, 800a36c <_vfiprintf_r+0x5c>
 800a344:	4629      	mov	r1, r5
 800a346:	4630      	mov	r0, r6
 800a348:	f000 f93a 	bl	800a5c0 <__swsetup_r>
 800a34c:	b170      	cbz	r0, 800a36c <_vfiprintf_r+0x5c>
 800a34e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a350:	07dc      	lsls	r4, r3, #31
 800a352:	d504      	bpl.n	800a35e <_vfiprintf_r+0x4e>
 800a354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a358:	b01d      	add	sp, #116	; 0x74
 800a35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a35e:	89ab      	ldrh	r3, [r5, #12]
 800a360:	0598      	lsls	r0, r3, #22
 800a362:	d4f7      	bmi.n	800a354 <_vfiprintf_r+0x44>
 800a364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a366:	f7fe f947 	bl	80085f8 <__retarget_lock_release_recursive>
 800a36a:	e7f3      	b.n	800a354 <_vfiprintf_r+0x44>
 800a36c:	2300      	movs	r3, #0
 800a36e:	9309      	str	r3, [sp, #36]	; 0x24
 800a370:	2320      	movs	r3, #32
 800a372:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a376:	f8cd 800c 	str.w	r8, [sp, #12]
 800a37a:	2330      	movs	r3, #48	; 0x30
 800a37c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a530 <_vfiprintf_r+0x220>
 800a380:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a384:	f04f 0901 	mov.w	r9, #1
 800a388:	4623      	mov	r3, r4
 800a38a:	469a      	mov	sl, r3
 800a38c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a390:	b10a      	cbz	r2, 800a396 <_vfiprintf_r+0x86>
 800a392:	2a25      	cmp	r2, #37	; 0x25
 800a394:	d1f9      	bne.n	800a38a <_vfiprintf_r+0x7a>
 800a396:	ebba 0b04 	subs.w	fp, sl, r4
 800a39a:	d00b      	beq.n	800a3b4 <_vfiprintf_r+0xa4>
 800a39c:	465b      	mov	r3, fp
 800a39e:	4622      	mov	r2, r4
 800a3a0:	4629      	mov	r1, r5
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	f7ff ffa1 	bl	800a2ea <__sfputs_r>
 800a3a8:	3001      	adds	r0, #1
 800a3aa:	f000 80a9 	beq.w	800a500 <_vfiprintf_r+0x1f0>
 800a3ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3b0:	445a      	add	r2, fp
 800a3b2:	9209      	str	r2, [sp, #36]	; 0x24
 800a3b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	f000 80a1 	beq.w	800a500 <_vfiprintf_r+0x1f0>
 800a3be:	2300      	movs	r3, #0
 800a3c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3c8:	f10a 0a01 	add.w	sl, sl, #1
 800a3cc:	9304      	str	r3, [sp, #16]
 800a3ce:	9307      	str	r3, [sp, #28]
 800a3d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3d4:	931a      	str	r3, [sp, #104]	; 0x68
 800a3d6:	4654      	mov	r4, sl
 800a3d8:	2205      	movs	r2, #5
 800a3da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3de:	4854      	ldr	r0, [pc, #336]	; (800a530 <_vfiprintf_r+0x220>)
 800a3e0:	f7f5 ff16 	bl	8000210 <memchr>
 800a3e4:	9a04      	ldr	r2, [sp, #16]
 800a3e6:	b9d8      	cbnz	r0, 800a420 <_vfiprintf_r+0x110>
 800a3e8:	06d1      	lsls	r1, r2, #27
 800a3ea:	bf44      	itt	mi
 800a3ec:	2320      	movmi	r3, #32
 800a3ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3f2:	0713      	lsls	r3, r2, #28
 800a3f4:	bf44      	itt	mi
 800a3f6:	232b      	movmi	r3, #43	; 0x2b
 800a3f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3fc:	f89a 3000 	ldrb.w	r3, [sl]
 800a400:	2b2a      	cmp	r3, #42	; 0x2a
 800a402:	d015      	beq.n	800a430 <_vfiprintf_r+0x120>
 800a404:	9a07      	ldr	r2, [sp, #28]
 800a406:	4654      	mov	r4, sl
 800a408:	2000      	movs	r0, #0
 800a40a:	f04f 0c0a 	mov.w	ip, #10
 800a40e:	4621      	mov	r1, r4
 800a410:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a414:	3b30      	subs	r3, #48	; 0x30
 800a416:	2b09      	cmp	r3, #9
 800a418:	d94d      	bls.n	800a4b6 <_vfiprintf_r+0x1a6>
 800a41a:	b1b0      	cbz	r0, 800a44a <_vfiprintf_r+0x13a>
 800a41c:	9207      	str	r2, [sp, #28]
 800a41e:	e014      	b.n	800a44a <_vfiprintf_r+0x13a>
 800a420:	eba0 0308 	sub.w	r3, r0, r8
 800a424:	fa09 f303 	lsl.w	r3, r9, r3
 800a428:	4313      	orrs	r3, r2
 800a42a:	9304      	str	r3, [sp, #16]
 800a42c:	46a2      	mov	sl, r4
 800a42e:	e7d2      	b.n	800a3d6 <_vfiprintf_r+0xc6>
 800a430:	9b03      	ldr	r3, [sp, #12]
 800a432:	1d19      	adds	r1, r3, #4
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	9103      	str	r1, [sp, #12]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	bfbb      	ittet	lt
 800a43c:	425b      	neglt	r3, r3
 800a43e:	f042 0202 	orrlt.w	r2, r2, #2
 800a442:	9307      	strge	r3, [sp, #28]
 800a444:	9307      	strlt	r3, [sp, #28]
 800a446:	bfb8      	it	lt
 800a448:	9204      	strlt	r2, [sp, #16]
 800a44a:	7823      	ldrb	r3, [r4, #0]
 800a44c:	2b2e      	cmp	r3, #46	; 0x2e
 800a44e:	d10c      	bne.n	800a46a <_vfiprintf_r+0x15a>
 800a450:	7863      	ldrb	r3, [r4, #1]
 800a452:	2b2a      	cmp	r3, #42	; 0x2a
 800a454:	d134      	bne.n	800a4c0 <_vfiprintf_r+0x1b0>
 800a456:	9b03      	ldr	r3, [sp, #12]
 800a458:	1d1a      	adds	r2, r3, #4
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	9203      	str	r2, [sp, #12]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	bfb8      	it	lt
 800a462:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a466:	3402      	adds	r4, #2
 800a468:	9305      	str	r3, [sp, #20]
 800a46a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a540 <_vfiprintf_r+0x230>
 800a46e:	7821      	ldrb	r1, [r4, #0]
 800a470:	2203      	movs	r2, #3
 800a472:	4650      	mov	r0, sl
 800a474:	f7f5 fecc 	bl	8000210 <memchr>
 800a478:	b138      	cbz	r0, 800a48a <_vfiprintf_r+0x17a>
 800a47a:	9b04      	ldr	r3, [sp, #16]
 800a47c:	eba0 000a 	sub.w	r0, r0, sl
 800a480:	2240      	movs	r2, #64	; 0x40
 800a482:	4082      	lsls	r2, r0
 800a484:	4313      	orrs	r3, r2
 800a486:	3401      	adds	r4, #1
 800a488:	9304      	str	r3, [sp, #16]
 800a48a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a48e:	4829      	ldr	r0, [pc, #164]	; (800a534 <_vfiprintf_r+0x224>)
 800a490:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a494:	2206      	movs	r2, #6
 800a496:	f7f5 febb 	bl	8000210 <memchr>
 800a49a:	2800      	cmp	r0, #0
 800a49c:	d03f      	beq.n	800a51e <_vfiprintf_r+0x20e>
 800a49e:	4b26      	ldr	r3, [pc, #152]	; (800a538 <_vfiprintf_r+0x228>)
 800a4a0:	bb1b      	cbnz	r3, 800a4ea <_vfiprintf_r+0x1da>
 800a4a2:	9b03      	ldr	r3, [sp, #12]
 800a4a4:	3307      	adds	r3, #7
 800a4a6:	f023 0307 	bic.w	r3, r3, #7
 800a4aa:	3308      	adds	r3, #8
 800a4ac:	9303      	str	r3, [sp, #12]
 800a4ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4b0:	443b      	add	r3, r7
 800a4b2:	9309      	str	r3, [sp, #36]	; 0x24
 800a4b4:	e768      	b.n	800a388 <_vfiprintf_r+0x78>
 800a4b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4ba:	460c      	mov	r4, r1
 800a4bc:	2001      	movs	r0, #1
 800a4be:	e7a6      	b.n	800a40e <_vfiprintf_r+0xfe>
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	3401      	adds	r4, #1
 800a4c4:	9305      	str	r3, [sp, #20]
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	f04f 0c0a 	mov.w	ip, #10
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4d2:	3a30      	subs	r2, #48	; 0x30
 800a4d4:	2a09      	cmp	r2, #9
 800a4d6:	d903      	bls.n	800a4e0 <_vfiprintf_r+0x1d0>
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d0c6      	beq.n	800a46a <_vfiprintf_r+0x15a>
 800a4dc:	9105      	str	r1, [sp, #20]
 800a4de:	e7c4      	b.n	800a46a <_vfiprintf_r+0x15a>
 800a4e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e7f0      	b.n	800a4cc <_vfiprintf_r+0x1bc>
 800a4ea:	ab03      	add	r3, sp, #12
 800a4ec:	9300      	str	r3, [sp, #0]
 800a4ee:	462a      	mov	r2, r5
 800a4f0:	4b12      	ldr	r3, [pc, #72]	; (800a53c <_vfiprintf_r+0x22c>)
 800a4f2:	a904      	add	r1, sp, #16
 800a4f4:	4630      	mov	r0, r6
 800a4f6:	f7fd fb49 	bl	8007b8c <_printf_float>
 800a4fa:	4607      	mov	r7, r0
 800a4fc:	1c78      	adds	r0, r7, #1
 800a4fe:	d1d6      	bne.n	800a4ae <_vfiprintf_r+0x19e>
 800a500:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a502:	07d9      	lsls	r1, r3, #31
 800a504:	d405      	bmi.n	800a512 <_vfiprintf_r+0x202>
 800a506:	89ab      	ldrh	r3, [r5, #12]
 800a508:	059a      	lsls	r2, r3, #22
 800a50a:	d402      	bmi.n	800a512 <_vfiprintf_r+0x202>
 800a50c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a50e:	f7fe f873 	bl	80085f8 <__retarget_lock_release_recursive>
 800a512:	89ab      	ldrh	r3, [r5, #12]
 800a514:	065b      	lsls	r3, r3, #25
 800a516:	f53f af1d 	bmi.w	800a354 <_vfiprintf_r+0x44>
 800a51a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a51c:	e71c      	b.n	800a358 <_vfiprintf_r+0x48>
 800a51e:	ab03      	add	r3, sp, #12
 800a520:	9300      	str	r3, [sp, #0]
 800a522:	462a      	mov	r2, r5
 800a524:	4b05      	ldr	r3, [pc, #20]	; (800a53c <_vfiprintf_r+0x22c>)
 800a526:	a904      	add	r1, sp, #16
 800a528:	4630      	mov	r0, r6
 800a52a:	f7fd fdd3 	bl	80080d4 <_printf_i>
 800a52e:	e7e4      	b.n	800a4fa <_vfiprintf_r+0x1ea>
 800a530:	0800ca25 	.word	0x0800ca25
 800a534:	0800ca2f 	.word	0x0800ca2f
 800a538:	08007b8d 	.word	0x08007b8d
 800a53c:	0800a2eb 	.word	0x0800a2eb
 800a540:	0800ca2b 	.word	0x0800ca2b

0800a544 <__swbuf_r>:
 800a544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a546:	460e      	mov	r6, r1
 800a548:	4614      	mov	r4, r2
 800a54a:	4605      	mov	r5, r0
 800a54c:	b118      	cbz	r0, 800a556 <__swbuf_r+0x12>
 800a54e:	6a03      	ldr	r3, [r0, #32]
 800a550:	b90b      	cbnz	r3, 800a556 <__swbuf_r+0x12>
 800a552:	f7fd ff8d 	bl	8008470 <__sinit>
 800a556:	69a3      	ldr	r3, [r4, #24]
 800a558:	60a3      	str	r3, [r4, #8]
 800a55a:	89a3      	ldrh	r3, [r4, #12]
 800a55c:	071a      	lsls	r2, r3, #28
 800a55e:	d525      	bpl.n	800a5ac <__swbuf_r+0x68>
 800a560:	6923      	ldr	r3, [r4, #16]
 800a562:	b31b      	cbz	r3, 800a5ac <__swbuf_r+0x68>
 800a564:	6823      	ldr	r3, [r4, #0]
 800a566:	6922      	ldr	r2, [r4, #16]
 800a568:	1a98      	subs	r0, r3, r2
 800a56a:	6963      	ldr	r3, [r4, #20]
 800a56c:	b2f6      	uxtb	r6, r6
 800a56e:	4283      	cmp	r3, r0
 800a570:	4637      	mov	r7, r6
 800a572:	dc04      	bgt.n	800a57e <__swbuf_r+0x3a>
 800a574:	4621      	mov	r1, r4
 800a576:	4628      	mov	r0, r5
 800a578:	f7ff f99a 	bl	80098b0 <_fflush_r>
 800a57c:	b9e0      	cbnz	r0, 800a5b8 <__swbuf_r+0x74>
 800a57e:	68a3      	ldr	r3, [r4, #8]
 800a580:	3b01      	subs	r3, #1
 800a582:	60a3      	str	r3, [r4, #8]
 800a584:	6823      	ldr	r3, [r4, #0]
 800a586:	1c5a      	adds	r2, r3, #1
 800a588:	6022      	str	r2, [r4, #0]
 800a58a:	701e      	strb	r6, [r3, #0]
 800a58c:	6962      	ldr	r2, [r4, #20]
 800a58e:	1c43      	adds	r3, r0, #1
 800a590:	429a      	cmp	r2, r3
 800a592:	d004      	beq.n	800a59e <__swbuf_r+0x5a>
 800a594:	89a3      	ldrh	r3, [r4, #12]
 800a596:	07db      	lsls	r3, r3, #31
 800a598:	d506      	bpl.n	800a5a8 <__swbuf_r+0x64>
 800a59a:	2e0a      	cmp	r6, #10
 800a59c:	d104      	bne.n	800a5a8 <__swbuf_r+0x64>
 800a59e:	4621      	mov	r1, r4
 800a5a0:	4628      	mov	r0, r5
 800a5a2:	f7ff f985 	bl	80098b0 <_fflush_r>
 800a5a6:	b938      	cbnz	r0, 800a5b8 <__swbuf_r+0x74>
 800a5a8:	4638      	mov	r0, r7
 800a5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5ac:	4621      	mov	r1, r4
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	f000 f806 	bl	800a5c0 <__swsetup_r>
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	d0d5      	beq.n	800a564 <__swbuf_r+0x20>
 800a5b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a5bc:	e7f4      	b.n	800a5a8 <__swbuf_r+0x64>
	...

0800a5c0 <__swsetup_r>:
 800a5c0:	b538      	push	{r3, r4, r5, lr}
 800a5c2:	4b2a      	ldr	r3, [pc, #168]	; (800a66c <__swsetup_r+0xac>)
 800a5c4:	4605      	mov	r5, r0
 800a5c6:	6818      	ldr	r0, [r3, #0]
 800a5c8:	460c      	mov	r4, r1
 800a5ca:	b118      	cbz	r0, 800a5d4 <__swsetup_r+0x14>
 800a5cc:	6a03      	ldr	r3, [r0, #32]
 800a5ce:	b90b      	cbnz	r3, 800a5d4 <__swsetup_r+0x14>
 800a5d0:	f7fd ff4e 	bl	8008470 <__sinit>
 800a5d4:	89a3      	ldrh	r3, [r4, #12]
 800a5d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5da:	0718      	lsls	r0, r3, #28
 800a5dc:	d422      	bmi.n	800a624 <__swsetup_r+0x64>
 800a5de:	06d9      	lsls	r1, r3, #27
 800a5e0:	d407      	bmi.n	800a5f2 <__swsetup_r+0x32>
 800a5e2:	2309      	movs	r3, #9
 800a5e4:	602b      	str	r3, [r5, #0]
 800a5e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a5ea:	81a3      	strh	r3, [r4, #12]
 800a5ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5f0:	e034      	b.n	800a65c <__swsetup_r+0x9c>
 800a5f2:	0758      	lsls	r0, r3, #29
 800a5f4:	d512      	bpl.n	800a61c <__swsetup_r+0x5c>
 800a5f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5f8:	b141      	cbz	r1, 800a60c <__swsetup_r+0x4c>
 800a5fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5fe:	4299      	cmp	r1, r3
 800a600:	d002      	beq.n	800a608 <__swsetup_r+0x48>
 800a602:	4628      	mov	r0, r5
 800a604:	f7fe fe82 	bl	800930c <_free_r>
 800a608:	2300      	movs	r3, #0
 800a60a:	6363      	str	r3, [r4, #52]	; 0x34
 800a60c:	89a3      	ldrh	r3, [r4, #12]
 800a60e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a612:	81a3      	strh	r3, [r4, #12]
 800a614:	2300      	movs	r3, #0
 800a616:	6063      	str	r3, [r4, #4]
 800a618:	6923      	ldr	r3, [r4, #16]
 800a61a:	6023      	str	r3, [r4, #0]
 800a61c:	89a3      	ldrh	r3, [r4, #12]
 800a61e:	f043 0308 	orr.w	r3, r3, #8
 800a622:	81a3      	strh	r3, [r4, #12]
 800a624:	6923      	ldr	r3, [r4, #16]
 800a626:	b94b      	cbnz	r3, 800a63c <__swsetup_r+0x7c>
 800a628:	89a3      	ldrh	r3, [r4, #12]
 800a62a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a62e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a632:	d003      	beq.n	800a63c <__swsetup_r+0x7c>
 800a634:	4621      	mov	r1, r4
 800a636:	4628      	mov	r0, r5
 800a638:	f000 f840 	bl	800a6bc <__smakebuf_r>
 800a63c:	89a0      	ldrh	r0, [r4, #12]
 800a63e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a642:	f010 0301 	ands.w	r3, r0, #1
 800a646:	d00a      	beq.n	800a65e <__swsetup_r+0x9e>
 800a648:	2300      	movs	r3, #0
 800a64a:	60a3      	str	r3, [r4, #8]
 800a64c:	6963      	ldr	r3, [r4, #20]
 800a64e:	425b      	negs	r3, r3
 800a650:	61a3      	str	r3, [r4, #24]
 800a652:	6923      	ldr	r3, [r4, #16]
 800a654:	b943      	cbnz	r3, 800a668 <__swsetup_r+0xa8>
 800a656:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a65a:	d1c4      	bne.n	800a5e6 <__swsetup_r+0x26>
 800a65c:	bd38      	pop	{r3, r4, r5, pc}
 800a65e:	0781      	lsls	r1, r0, #30
 800a660:	bf58      	it	pl
 800a662:	6963      	ldrpl	r3, [r4, #20]
 800a664:	60a3      	str	r3, [r4, #8]
 800a666:	e7f4      	b.n	800a652 <__swsetup_r+0x92>
 800a668:	2000      	movs	r0, #0
 800a66a:	e7f7      	b.n	800a65c <__swsetup_r+0x9c>
 800a66c:	20000078 	.word	0x20000078

0800a670 <__swhatbuf_r>:
 800a670:	b570      	push	{r4, r5, r6, lr}
 800a672:	460c      	mov	r4, r1
 800a674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a678:	2900      	cmp	r1, #0
 800a67a:	b096      	sub	sp, #88	; 0x58
 800a67c:	4615      	mov	r5, r2
 800a67e:	461e      	mov	r6, r3
 800a680:	da0d      	bge.n	800a69e <__swhatbuf_r+0x2e>
 800a682:	89a3      	ldrh	r3, [r4, #12]
 800a684:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a688:	f04f 0100 	mov.w	r1, #0
 800a68c:	bf0c      	ite	eq
 800a68e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a692:	2340      	movne	r3, #64	; 0x40
 800a694:	2000      	movs	r0, #0
 800a696:	6031      	str	r1, [r6, #0]
 800a698:	602b      	str	r3, [r5, #0]
 800a69a:	b016      	add	sp, #88	; 0x58
 800a69c:	bd70      	pop	{r4, r5, r6, pc}
 800a69e:	466a      	mov	r2, sp
 800a6a0:	f000 f848 	bl	800a734 <_fstat_r>
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	dbec      	blt.n	800a682 <__swhatbuf_r+0x12>
 800a6a8:	9901      	ldr	r1, [sp, #4]
 800a6aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a6ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a6b2:	4259      	negs	r1, r3
 800a6b4:	4159      	adcs	r1, r3
 800a6b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6ba:	e7eb      	b.n	800a694 <__swhatbuf_r+0x24>

0800a6bc <__smakebuf_r>:
 800a6bc:	898b      	ldrh	r3, [r1, #12]
 800a6be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6c0:	079d      	lsls	r5, r3, #30
 800a6c2:	4606      	mov	r6, r0
 800a6c4:	460c      	mov	r4, r1
 800a6c6:	d507      	bpl.n	800a6d8 <__smakebuf_r+0x1c>
 800a6c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a6cc:	6023      	str	r3, [r4, #0]
 800a6ce:	6123      	str	r3, [r4, #16]
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	6163      	str	r3, [r4, #20]
 800a6d4:	b002      	add	sp, #8
 800a6d6:	bd70      	pop	{r4, r5, r6, pc}
 800a6d8:	ab01      	add	r3, sp, #4
 800a6da:	466a      	mov	r2, sp
 800a6dc:	f7ff ffc8 	bl	800a670 <__swhatbuf_r>
 800a6e0:	9900      	ldr	r1, [sp, #0]
 800a6e2:	4605      	mov	r5, r0
 800a6e4:	4630      	mov	r0, r6
 800a6e6:	f7fe ffdd 	bl	80096a4 <_malloc_r>
 800a6ea:	b948      	cbnz	r0, 800a700 <__smakebuf_r+0x44>
 800a6ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6f0:	059a      	lsls	r2, r3, #22
 800a6f2:	d4ef      	bmi.n	800a6d4 <__smakebuf_r+0x18>
 800a6f4:	f023 0303 	bic.w	r3, r3, #3
 800a6f8:	f043 0302 	orr.w	r3, r3, #2
 800a6fc:	81a3      	strh	r3, [r4, #12]
 800a6fe:	e7e3      	b.n	800a6c8 <__smakebuf_r+0xc>
 800a700:	89a3      	ldrh	r3, [r4, #12]
 800a702:	6020      	str	r0, [r4, #0]
 800a704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a708:	81a3      	strh	r3, [r4, #12]
 800a70a:	9b00      	ldr	r3, [sp, #0]
 800a70c:	6163      	str	r3, [r4, #20]
 800a70e:	9b01      	ldr	r3, [sp, #4]
 800a710:	6120      	str	r0, [r4, #16]
 800a712:	b15b      	cbz	r3, 800a72c <__smakebuf_r+0x70>
 800a714:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a718:	4630      	mov	r0, r6
 800a71a:	f000 f81d 	bl	800a758 <_isatty_r>
 800a71e:	b128      	cbz	r0, 800a72c <__smakebuf_r+0x70>
 800a720:	89a3      	ldrh	r3, [r4, #12]
 800a722:	f023 0303 	bic.w	r3, r3, #3
 800a726:	f043 0301 	orr.w	r3, r3, #1
 800a72a:	81a3      	strh	r3, [r4, #12]
 800a72c:	89a3      	ldrh	r3, [r4, #12]
 800a72e:	431d      	orrs	r5, r3
 800a730:	81a5      	strh	r5, [r4, #12]
 800a732:	e7cf      	b.n	800a6d4 <__smakebuf_r+0x18>

0800a734 <_fstat_r>:
 800a734:	b538      	push	{r3, r4, r5, lr}
 800a736:	4d07      	ldr	r5, [pc, #28]	; (800a754 <_fstat_r+0x20>)
 800a738:	2300      	movs	r3, #0
 800a73a:	4604      	mov	r4, r0
 800a73c:	4608      	mov	r0, r1
 800a73e:	4611      	mov	r1, r2
 800a740:	602b      	str	r3, [r5, #0]
 800a742:	f7f7 fb22 	bl	8001d8a <_fstat>
 800a746:	1c43      	adds	r3, r0, #1
 800a748:	d102      	bne.n	800a750 <_fstat_r+0x1c>
 800a74a:	682b      	ldr	r3, [r5, #0]
 800a74c:	b103      	cbz	r3, 800a750 <_fstat_r+0x1c>
 800a74e:	6023      	str	r3, [r4, #0]
 800a750:	bd38      	pop	{r3, r4, r5, pc}
 800a752:	bf00      	nop
 800a754:	20005274 	.word	0x20005274

0800a758 <_isatty_r>:
 800a758:	b538      	push	{r3, r4, r5, lr}
 800a75a:	4d06      	ldr	r5, [pc, #24]	; (800a774 <_isatty_r+0x1c>)
 800a75c:	2300      	movs	r3, #0
 800a75e:	4604      	mov	r4, r0
 800a760:	4608      	mov	r0, r1
 800a762:	602b      	str	r3, [r5, #0]
 800a764:	f7f7 fb21 	bl	8001daa <_isatty>
 800a768:	1c43      	adds	r3, r0, #1
 800a76a:	d102      	bne.n	800a772 <_isatty_r+0x1a>
 800a76c:	682b      	ldr	r3, [r5, #0]
 800a76e:	b103      	cbz	r3, 800a772 <_isatty_r+0x1a>
 800a770:	6023      	str	r3, [r4, #0]
 800a772:	bd38      	pop	{r3, r4, r5, pc}
 800a774:	20005274 	.word	0x20005274

0800a778 <_raise_r>:
 800a778:	291f      	cmp	r1, #31
 800a77a:	b538      	push	{r3, r4, r5, lr}
 800a77c:	4604      	mov	r4, r0
 800a77e:	460d      	mov	r5, r1
 800a780:	d904      	bls.n	800a78c <_raise_r+0x14>
 800a782:	2316      	movs	r3, #22
 800a784:	6003      	str	r3, [r0, #0]
 800a786:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a78a:	bd38      	pop	{r3, r4, r5, pc}
 800a78c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a78e:	b112      	cbz	r2, 800a796 <_raise_r+0x1e>
 800a790:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a794:	b94b      	cbnz	r3, 800a7aa <_raise_r+0x32>
 800a796:	4620      	mov	r0, r4
 800a798:	f000 f830 	bl	800a7fc <_getpid_r>
 800a79c:	462a      	mov	r2, r5
 800a79e:	4601      	mov	r1, r0
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7a6:	f000 b817 	b.w	800a7d8 <_kill_r>
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	d00a      	beq.n	800a7c4 <_raise_r+0x4c>
 800a7ae:	1c59      	adds	r1, r3, #1
 800a7b0:	d103      	bne.n	800a7ba <_raise_r+0x42>
 800a7b2:	2316      	movs	r3, #22
 800a7b4:	6003      	str	r3, [r0, #0]
 800a7b6:	2001      	movs	r0, #1
 800a7b8:	e7e7      	b.n	800a78a <_raise_r+0x12>
 800a7ba:	2400      	movs	r4, #0
 800a7bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	4798      	blx	r3
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	e7e0      	b.n	800a78a <_raise_r+0x12>

0800a7c8 <raise>:
 800a7c8:	4b02      	ldr	r3, [pc, #8]	; (800a7d4 <raise+0xc>)
 800a7ca:	4601      	mov	r1, r0
 800a7cc:	6818      	ldr	r0, [r3, #0]
 800a7ce:	f7ff bfd3 	b.w	800a778 <_raise_r>
 800a7d2:	bf00      	nop
 800a7d4:	20000078 	.word	0x20000078

0800a7d8 <_kill_r>:
 800a7d8:	b538      	push	{r3, r4, r5, lr}
 800a7da:	4d07      	ldr	r5, [pc, #28]	; (800a7f8 <_kill_r+0x20>)
 800a7dc:	2300      	movs	r3, #0
 800a7de:	4604      	mov	r4, r0
 800a7e0:	4608      	mov	r0, r1
 800a7e2:	4611      	mov	r1, r2
 800a7e4:	602b      	str	r3, [r5, #0]
 800a7e6:	f7f7 fa71 	bl	8001ccc <_kill>
 800a7ea:	1c43      	adds	r3, r0, #1
 800a7ec:	d102      	bne.n	800a7f4 <_kill_r+0x1c>
 800a7ee:	682b      	ldr	r3, [r5, #0]
 800a7f0:	b103      	cbz	r3, 800a7f4 <_kill_r+0x1c>
 800a7f2:	6023      	str	r3, [r4, #0]
 800a7f4:	bd38      	pop	{r3, r4, r5, pc}
 800a7f6:	bf00      	nop
 800a7f8:	20005274 	.word	0x20005274

0800a7fc <_getpid_r>:
 800a7fc:	f7f7 ba5e 	b.w	8001cbc <_getpid>

0800a800 <_init>:
 800a800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a802:	bf00      	nop
 800a804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a806:	bc08      	pop	{r3}
 800a808:	469e      	mov	lr, r3
 800a80a:	4770      	bx	lr

0800a80c <_fini>:
 800a80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a80e:	bf00      	nop
 800a810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a812:	bc08      	pop	{r3}
 800a814:	469e      	mov	lr, r3
 800a816:	4770      	bx	lr
